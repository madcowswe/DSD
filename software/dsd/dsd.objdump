
dsd.elf:     file format elf32-littlenios2
dsd.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x040001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x04000000 paddr 0x04000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04000020 paddr 0x04000020 align 2**12
         filesz 0x00009774 memsz 0x00009774 flags r-x
    LOAD off    0x0000a794 vaddr 0x04009794 paddr 0x04009e88 align 2**12
         filesz 0x000006f4 memsz 0x000006f4 flags rw-
    LOAD off    0x0000b57c vaddr 0x0400a57c paddr 0x0400a57c align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04000000  04000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  04000020  04000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00009324  040001b4  040001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000002bc  040094d8  040094d8  0000a4d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000006f4  04009794  04009e88  0000a794  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  0400a57c  0400a57c  0000b57c  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  0000ae88  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000ab8  00000000  00000000  0000aeb0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000faa  00000000  00000000  0000b968  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00015ede  00000000  00000000  0000c912  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00006416  00000000  00000000  000227f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000ee54  00000000  00000000  00028c06  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000146c  00000000  00000000  00037a5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001772  00000000  00000000  00038ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000881b  00000000  00000000  0003a63a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  00042e58  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000660  00000000  00000000  00042e78  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00045beb  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00045bee  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00045bf1  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00045bf2  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00045bf3  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00045bf7  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00045bfb  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00045bff  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00045c08  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00045c11  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000012  00000000  00000000  00045c1a  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000002e  00000000  00000000  00045c2c  2**0
                  CONTENTS, READONLY
 29 .jdi          00004eef  00000000  00000000  00045c5a  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0003ff26  00000000  00000000  0004ab49  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04000000 l    d  .entry	00000000 .entry
04000020 l    d  .exceptions	00000000 .exceptions
040001b4 l    d  .text	00000000 .text
040094d8 l    d  .rodata	00000000 .rodata
04009794 l    d  .rwdata	00000000 .rwdata
0400a57c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
040001ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 fp-bit.c
040009e8 l     F .text	000001e4 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
0400106c l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 efgcvt.c
00000000 l    df *ABS*	00000000 impure.c
04009794 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 ecvtbuf.c
04002d0c l     F .text	00000204 print_e
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 mprec.c
04009748 l     O .rodata	0000000c p05.2496
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 dtoa.c
04005564 l     F .text	00000244 quorem
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
04007778 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_load.c
04007a0c l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
04009e60 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_times.c
04007e48 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_write.c
04007fcc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
04009c7c l     O .rwdata	0000002c jtag_uart
040080a8 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
04008338 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_close.c
04008538 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
040085b4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
04008694 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
040089f0 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
04008b40 l     F .text	000000f8 alt_file_locked
04008dc4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fputs.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __call_atexit.c
040092b4 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
04009474 l     F .text	00000040 alt_sim_halt
040040b8 g     F .text	00000094 _mprec_log10
040041a4 g     F .text	00000088 __any_on
04009720 g     O .rodata	00000028 __mprec_tinytens
04007a78 g     F .text	0000005c alt_main
04005404 g     F .text	00000020 strcpy
04002bd8 g     F .text	00000090 _puts_r
0400a5d0 g     O .bss	00000100 alt_irq
04009e88 g       *ABS*	00000000 __flash_rwdata_start
04007240 g     F .text	00000088 __eqdf2
0400a6d0 g       *ABS*	00000000 __alt_heap_start
04003630 g     F .text	000001a8 fcvtbuf
04007af4 g     F .text	00000020 __malloc_unlock
04000e80 g     F .text	00000174 __divsf3
04006dc8 g     F .text	00000060 memmove
040042a4 g     F .text	000000f0 _Balloc
04007b14 g     F .text	00000040 alt_putstr
04007350 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
04000000 g     F .entry	0000001c __reset
04007db4 g     F .text	00000094 times
04000020 g       *ABS*	00000000 __flash_exceptions_start
0400a58c g     O .bss	00000004 errno
04007740 g     F .text	00000038 __make_dp
0400a594 g     O .bss	00000004 alt_argv
04011e50 g       *ABS*	00000000 _gp
04000bcc g     F .text	00000070 __subsf3
04009cd0 g     O .rwdata	00000180 alt_fd_list
04008ebc g     F .text	00000094 alt_find_dev
04006d9c g     F .text	0000002c memcpy
04007570 g     F .text	000000f8 __floatsidf
04008ac8 g     F .text	00000078 alt_io_redirect
04007460 g     F .text	00000088 __ltdf2
04002c68 g     F .text	00000014 puts
04004008 g     F .text	000000b0 __ratio
04008190 g     F .text	00000104 altera_avalon_jtag_uart_read
04002464 g     F .text	00000014 malloc
040078b4 g     F .text	00000008 __udivsi3
04009630 g     O .rodata	000000c8 __mprec_tens
04002320 g     F .text	00000040 gcvtf
04009140 g     F .text	00000090 alt_icache_flush
0400a580 g     O .bss	00000004 __malloc_top_pad
04004a3c g     F .text	0000003c __i2b
04002c7c g     F .text	00000070 _sbrk_r
04009e7c g     O .rwdata	00000004 alt_max_fd
0400211c g     F .text	00000138 __unpack_d
0400a584 g     O .bss	00000004 __malloc_max_sbrked_mem
04006e28 g     F .text	00000054 __extendsfdf2
040014fc g     F .text	00000074 __adddf3
04000ff4 g     F .text	00000078 __nesf2
04003ee8 g     F .text	00000120 __b2d
04009e54 g     O .rwdata	00000004 _global_impure_ptr
04004e10 g     F .text	000005f4 _realloc_r
0400a6d0 g       *ABS*	00000000 __bss_end
040088f8 g     F .text	000000f8 alt_iic_isr_register
04007ca8 g     F .text	0000010c alt_tick
040096f8 g     O .rodata	00000028 __mprec_bigtens
04004cf0 g     F .text	00000120 __s2b
040017c8 g     F .text	00000194 __floatunsidf
04003e08 g     F .text	00000060 __mcmp
040088b0 g     F .text	00000048 alt_ic_irq_enabled
04007c10 g     F .text	00000098 alt_alarm_stop
0400a5a4 g     O .bss	00000004 alt_irq_active
040000ec g     F .exceptions	000000c8 alt_irq_handler
04009ca8 g     O .rwdata	00000028 alt_dev_null
04001c98 g     F .text	000000c8 __unpack_f
04008598 g     F .text	0000001c alt_dcache_flush_all
04003cd4 g     F .text	00000070 __hi0bits
04007668 g     F .text	000000d8 __fixdfsi
04009e88 g       *ABS*	00000000 __ram_rwdata_end
04009e74 g     O .rwdata	00000008 alt_dev_list
04007ea8 g     F .text	00000124 write
04009794 g       *ABS*	00000000 __ram_rodata_end
0400a57c g     O .bss	00000004 tempmat
040074e8 g     F .text	00000088 __ledf2
04004ba4 g     F .text	0000014c __pow5mult
040078bc g     F .text	00000008 __umodsi3
0400a6d0 g       *ABS*	00000000 end
04001b38 g     F .text	00000160 __pack_f
08000000 g       *ABS*	00000000 __alt_stack_pointer
040031f0 g     F .text	000002f8 _dcvt
040083a8 g     F .text	00000090 alt_avalon_timer_sc_init
04001ab8 g     F .text	00000080 __clzsi2
04008294 g     F .text	000000a4 altera_avalon_jtag_uart_write
04003904 g     F .text	00000314 _free_r
040092b8 g     F .text	000001bc __call_exitprocs
04009e5c g     O .rwdata	00000004 __malloc_sbrk_base
040001b4 g     F .text	0000003c _start
0400a59c g     O .bss	00000004 _alt_tick_rate
04002f10 g     F .text	000002e0 _gcvt
0400469c g     F .text	0000014c __lshift
0400042c g     F .text	000003b0 detmat
0400a5a0 g     O .bss	00000004 _alt_nticks
04008060 g     F .text	00000048 alt_sys_init
040047e8 g     F .text	00000254 __multiply
0400195c g     F .text	00000038 __mulsi3
04009794 g       *ABS*	00000000 __ram_rwdata_start
040094d8 g       *ABS*	00000000 __ram_rodata_start
0400a5a8 g     O .bss	00000028 __malloc_current_mallinfo
04004394 g     F .text	0000017c __d2b
040080e0 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
04009070 g     F .text	000000d0 alt_get_fd
040078c4 g     F .text	000000c8 __fpcmp_parts_d
04009278 g     F .text	0000003c memcmp
0400a6d0 g       *ABS*	00000000 __alt_stack_base
04001570 g     F .text	00000258 __divdf3
0400414c g     F .text	00000058 __copybits
04009874 g     O .rwdata	00000408 __malloc_av_
04006e7c g     F .text	000003c4 __muldf3
04009508 g     O .rodata	00000010 __thenan_sf
04008f50 g     F .text	00000120 alt_find_file
040085e0 g     F .text	000000b4 alt_dev_llist_insert
04007ad4 g     F .text	00000020 __malloc_lock
04007b54 g     F .text	000000bc sbrk
0400549c g     F .text	000000c8 _calloc_r
04003c18 g     F .text	000000bc __sfvwrite_small_dev
0400a57c g       *ABS*	00000000 __bss_start
04002bb8 g     F .text	00000020 memset
040007dc g     F .text	0000020c main
040023d8 g     F .text	00000024 fcvt
0400a598 g     O .bss	00000004 alt_envp
0400a588 g     O .bss	00000004 __malloc_max_total_mem
04008138 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
040034e8 g     F .text	00000148 ecvtbuf
0400038c g     F .text	000000a0 rswap
08000000 g       *ABS*	00000000 __alt_heap_limit
040057a8 g     F .text	000015f4 _dtoa_r
04002478 g     F .text	00000740 _malloc_r
04009e80 g     O .rwdata	00000004 alt_errno
04002384 g     F .text	00000054 ecvtf
040077f4 g     F .text	00000060 __divsi3
04009518 g     O .rodata	00000014 __thenan_df
040037d8 g     F .text	0000012c _malloc_trim_r
04000ca0 g     F .text	000001e0 __mulsf3
040094d8 g       *ABS*	00000000 __flash_rodata_start
040072c8 g     F .text	00000088 __nedf2
0400802c g     F .text	00000034 alt_irq_init
04008e24 g     F .text	00000078 alt_release_fd
0400952c g     O .rodata	00000100 __clz_tab
04005424 g     F .text	00000078 _write_r
04009e50 g     O .rwdata	00000004 _impure_ptr
0400a590 g     O .bss	00000004 alt_argc
04000000 g       *ABS*	00000000 __alt_mem_sdram_0
04000020 g       .exceptions	00000000 alt_irq_entry
04003e68 g     F .text	00000080 __ulp
04002360 g     F .text	00000024 ecvt
04009e6c g     O .rwdata	00000008 alt_fs_list
04000020 g       *ABS*	00000000 __ram_exceptions_start
04008724 g     F .text	00000050 alt_ic_isr_register
04009e88 g       *ABS*	00000000 _edata
0400a6d0 g       *ABS*	00000000 _end
040001b4 g       *ABS*	00000000 __ram_exceptions_end
04008810 g     F .text	000000a0 alt_ic_irq_disable
04009e58 g     O .rwdata	00000004 __malloc_trim_threshold
040023fc g     F .text	00000054 fcvtf
04008e9c g     F .text	00000020 altera_nios2_qsys_irq_init
040091d0 g     F .text	00000020 exit
04004510 g     F .text	0000018c __mdiff
04007854 g     F .text	00000060 __modsi3
08000000 g       *ABS*	00000000 __alt_data_end
04000020 g     F .exceptions	00000000 alt_exception
04002254 g     F .text	000000cc gcvt
04001d60 g     F .text	000000a8 __fpcmp_parts_f
040094b4 g     F .text	00000020 _exit
04001994 g     F .text	00000124 __muldi3
04002cec g     F .text	00000020 strlen
04008c38 g     F .text	0000018c open
040073d8 g     F .text	00000088 __gedf2
040086f4 g     F .text	00000030 alt_icache_flush_all
040091f0 g     F .text	00000088 fputs
04009e84 g     O .rwdata	00000004 alt_priority_mask
04008774 g     F .text	0000009c alt_ic_irq_enable
0400147c g     F .text	00000080 __subdf3
04003d44 g     F .text	000000c4 __lo0bits
04009e64 g     O .rwdata	00000008 alt_alarm_list
04008438 g     F .text	00000100 close
04000c3c g     F .text	00000064 __addsf3
0400798c g     F .text	00000080 alt_load
04001e08 g     F .text	00000314 __pack_d
040001f0 g     F .text	0000019c det3x3
04002450 g     F .text	00000014 free
04004a78 g     F .text	0000012c __multadd
0400422c g     F .text	00000078 _Bfree



Disassembly of section .entry:

04000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 4000000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
 4000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 4000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 400000c:	00bffd16 	blt	zero,r2,4000004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4000010:	00410034 	movhi	at,1024
    ori r1, r1, %lo(_start)
 4000014:	08406d14 	ori	at,at,436
    jmp r1
 4000018:	0800683a 	jmp	at
 400001c:	00000000 	call	0 <__reset-0x4000000>

Disassembly of section .exceptions:

04000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 4000020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 4000024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 4000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 400002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 400003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4000040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 4000044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 4000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 400004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 400005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 400006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 400007c:	10000326 	beq	r2,zero,400008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4000080:	20000226 	beq	r4,zero,400008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4000084:	40000ec0 	call	40000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4000088:	00000306 	br	4000098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 400008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 4000090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 4000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 4000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 400009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 40000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 40000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40000e8:	ef80083a 	eret

040000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40000ec:	defff904 	addi	sp,sp,-28
 40000f0:	dfc00615 	stw	ra,24(sp)
 40000f4:	df000515 	stw	fp,20(sp)
 40000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 40000fc:	0005313a 	rdctl	r2,ipending
 4000100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 4000104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 4000108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 400010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4000110:	00800044 	movi	r2,1
 4000114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 4000118:	e0ffff17 	ldw	r3,-4(fp)
 400011c:	e0bffe17 	ldw	r2,-8(fp)
 4000120:	1884703a 	and	r2,r3,r2
 4000124:	1005003a 	cmpeq	r2,r2,zero
 4000128:	1000161e 	bne	r2,zero,4000184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 400012c:	e0bffd17 	ldw	r2,-12(fp)
 4000130:	00c10074 	movhi	r3,1025
 4000134:	18e97404 	addi	r3,r3,-23088
 4000138:	100490fa 	slli	r2,r2,3
 400013c:	10c5883a 	add	r2,r2,r3
 4000140:	11400017 	ldw	r5,0(r2)
 4000144:	e0bffd17 	ldw	r2,-12(fp)
 4000148:	00c10074 	movhi	r3,1025
 400014c:	18e97404 	addi	r3,r3,-23088
 4000150:	100490fa 	slli	r2,r2,3
 4000154:	10c5883a 	add	r2,r2,r3
 4000158:	10800104 	addi	r2,r2,4
 400015c:	11000017 	ldw	r4,0(r2)
 4000160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4000164:	0005313a 	rdctl	r2,ipending
 4000168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 400016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 4000170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 4000174:	e0bfff17 	ldw	r2,-4(fp)
 4000178:	1004c03a 	cmpne	r2,r2,zero
 400017c:	103fe31e 	bne	r2,zero,400010c <alt_irq_handler+0x20>
 4000180:	00000706 	br	40001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 4000184:	e0bffe17 	ldw	r2,-8(fp)
 4000188:	1085883a 	add	r2,r2,r2
 400018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 4000190:	e0bffd17 	ldw	r2,-12(fp)
 4000194:	10800044 	addi	r2,r2,1
 4000198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 400019c:	003fde06 	br	4000118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 40001a0:	e037883a 	mov	sp,fp
 40001a4:	dfc00117 	ldw	ra,4(sp)
 40001a8:	df000017 	ldw	fp,0(sp)
 40001ac:	dec00204 	addi	sp,sp,8
 40001b0:	f800283a 	ret

Disassembly of section .text:

040001b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 40001b4:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
 40001b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 40001bc:	06810074 	movhi	gp,1025
    ori gp, gp, %lo(_gp)
 40001c0:	d6879414 	ori	gp,gp,7760
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 40001c4:	00810034 	movhi	r2,1024
    ori r2, r2, %lo(__bss_start)
 40001c8:	10a95f14 	ori	r2,r2,42364

    movhi r3, %hi(__bss_end)
 40001cc:	00c10034 	movhi	r3,1024
    ori r3, r3, %lo(__bss_end)
 40001d0:	18e9b414 	ori	r3,r3,42704

    beq r2, r3, 1f
 40001d4:	10c00326 	beq	r2,r3,40001e4 <_start+0x30>

0:
    stw zero, (r2)
 40001d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 40001dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 40001e0:	10fffd36 	bltu	r2,r3,40001d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 40001e4:	400798c0 	call	400798c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 40001e8:	4007a780 	call	4007a78 <alt_main>

040001ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 40001ec:	003fff06 	br	40001ec <alt_after_alt_main>

040001f0 <det3x3>:
#define MXSIZE 20

float **tempmat;

typedef float mat3x3[3][3];
float det3x3(volatile mat3x3 inmat){
 40001f0:	defffa04 	addi	sp,sp,-24
 40001f4:	dfc00515 	stw	ra,20(sp)
 40001f8:	df000415 	stw	fp,16(sp)
 40001fc:	dc400315 	stw	r17,12(sp)
 4000200:	dc000215 	stw	r16,8(sp)
 4000204:	df000204 	addi	fp,sp,8
 4000208:	e13fff15 	stw	r4,-4(fp)
	float result = inmat[0][0] * (inmat[1][1] * inmat[2][2] - inmat[2][1] * inmat[1][2]);
 400020c:	e0bfff17 	ldw	r2,-4(fp)
 4000210:	14000017 	ldw	r16,0(r2)
 4000214:	e0bfff17 	ldw	r2,-4(fp)
 4000218:	10800304 	addi	r2,r2,12
 400021c:	10c00117 	ldw	r3,4(r2)
 4000220:	e0bfff17 	ldw	r2,-4(fp)
 4000224:	10800604 	addi	r2,r2,24
 4000228:	10800217 	ldw	r2,8(r2)
 400022c:	1809883a 	mov	r4,r3
 4000230:	100b883a 	mov	r5,r2
 4000234:	4000ca00 	call	4000ca0 <__mulsf3>
 4000238:	1023883a 	mov	r17,r2
 400023c:	e0bfff17 	ldw	r2,-4(fp)
 4000240:	10800604 	addi	r2,r2,24
 4000244:	10c00117 	ldw	r3,4(r2)
 4000248:	e0bfff17 	ldw	r2,-4(fp)
 400024c:	10800304 	addi	r2,r2,12
 4000250:	10800217 	ldw	r2,8(r2)
 4000254:	1809883a 	mov	r4,r3
 4000258:	100b883a 	mov	r5,r2
 400025c:	4000ca00 	call	4000ca0 <__mulsf3>
 4000260:	8809883a 	mov	r4,r17
 4000264:	100b883a 	mov	r5,r2
 4000268:	4000bcc0 	call	4000bcc <__subsf3>
 400026c:	8009883a 	mov	r4,r16
 4000270:	100b883a 	mov	r5,r2
 4000274:	4000ca00 	call	4000ca0 <__mulsf3>
 4000278:	e0bffe15 	stw	r2,-8(fp)
	result -= inmat[1][0] * (inmat[0][1] * inmat[2][2] - inmat[2][1] * inmat[0][2]);
 400027c:	e0bfff17 	ldw	r2,-4(fp)
 4000280:	10800304 	addi	r2,r2,12
 4000284:	14000017 	ldw	r16,0(r2)
 4000288:	e0bfff17 	ldw	r2,-4(fp)
 400028c:	10c00117 	ldw	r3,4(r2)
 4000290:	e0bfff17 	ldw	r2,-4(fp)
 4000294:	10800604 	addi	r2,r2,24
 4000298:	10800217 	ldw	r2,8(r2)
 400029c:	1809883a 	mov	r4,r3
 40002a0:	100b883a 	mov	r5,r2
 40002a4:	4000ca00 	call	4000ca0 <__mulsf3>
 40002a8:	1023883a 	mov	r17,r2
 40002ac:	e0bfff17 	ldw	r2,-4(fp)
 40002b0:	10800604 	addi	r2,r2,24
 40002b4:	10c00117 	ldw	r3,4(r2)
 40002b8:	e0bfff17 	ldw	r2,-4(fp)
 40002bc:	10800217 	ldw	r2,8(r2)
 40002c0:	1809883a 	mov	r4,r3
 40002c4:	100b883a 	mov	r5,r2
 40002c8:	4000ca00 	call	4000ca0 <__mulsf3>
 40002cc:	8809883a 	mov	r4,r17
 40002d0:	100b883a 	mov	r5,r2
 40002d4:	4000bcc0 	call	4000bcc <__subsf3>
 40002d8:	8009883a 	mov	r4,r16
 40002dc:	100b883a 	mov	r5,r2
 40002e0:	4000ca00 	call	4000ca0 <__mulsf3>
 40002e4:	e13ffe17 	ldw	r4,-8(fp)
 40002e8:	100b883a 	mov	r5,r2
 40002ec:	4000bcc0 	call	4000bcc <__subsf3>
 40002f0:	e0bffe15 	stw	r2,-8(fp)
	result += inmat[2][0] * (inmat[0][1] * inmat[1][2] - inmat[1][1] * inmat[0][2]);
 40002f4:	e0bfff17 	ldw	r2,-4(fp)
 40002f8:	10800604 	addi	r2,r2,24
 40002fc:	14000017 	ldw	r16,0(r2)
 4000300:	e0bfff17 	ldw	r2,-4(fp)
 4000304:	10c00117 	ldw	r3,4(r2)
 4000308:	e0bfff17 	ldw	r2,-4(fp)
 400030c:	10800304 	addi	r2,r2,12
 4000310:	10800217 	ldw	r2,8(r2)
 4000314:	1809883a 	mov	r4,r3
 4000318:	100b883a 	mov	r5,r2
 400031c:	4000ca00 	call	4000ca0 <__mulsf3>
 4000320:	1023883a 	mov	r17,r2
 4000324:	e0bfff17 	ldw	r2,-4(fp)
 4000328:	10800304 	addi	r2,r2,12
 400032c:	10c00117 	ldw	r3,4(r2)
 4000330:	e0bfff17 	ldw	r2,-4(fp)
 4000334:	10800217 	ldw	r2,8(r2)
 4000338:	1809883a 	mov	r4,r3
 400033c:	100b883a 	mov	r5,r2
 4000340:	4000ca00 	call	4000ca0 <__mulsf3>
 4000344:	8809883a 	mov	r4,r17
 4000348:	100b883a 	mov	r5,r2
 400034c:	4000bcc0 	call	4000bcc <__subsf3>
 4000350:	8009883a 	mov	r4,r16
 4000354:	100b883a 	mov	r5,r2
 4000358:	4000ca00 	call	4000ca0 <__mulsf3>
 400035c:	e13ffe17 	ldw	r4,-8(fp)
 4000360:	100b883a 	mov	r5,r2
 4000364:	4000c3c0 	call	4000c3c <__addsf3>
 4000368:	e0bffe15 	stw	r2,-8(fp)
	return result;
 400036c:	e0bffe17 	ldw	r2,-8(fp)
}
 4000370:	e037883a 	mov	sp,fp
 4000374:	dfc00317 	ldw	ra,12(sp)
 4000378:	df000217 	ldw	fp,8(sp)
 400037c:	dc400117 	ldw	r17,4(sp)
 4000380:	dc000017 	ldw	r16,0(sp)
 4000384:	dec00404 	addi	sp,sp,16
 4000388:	f800283a 	ret

0400038c <rswap>:

void rswap (float **tempmat, size_t i, size_t j){
 400038c:	defffb04 	addi	sp,sp,-20
 4000390:	df000415 	stw	fp,16(sp)
 4000394:	df000404 	addi	fp,sp,16
 4000398:	e13ffd15 	stw	r4,-12(fp)
 400039c:	e17ffe15 	stw	r5,-8(fp)
 40003a0:	e1bfff15 	stw	r6,-4(fp)
	float *tmp = tempmat[i];
 40003a4:	e0bffe17 	ldw	r2,-8(fp)
 40003a8:	1085883a 	add	r2,r2,r2
 40003ac:	1085883a 	add	r2,r2,r2
 40003b0:	1007883a 	mov	r3,r2
 40003b4:	e0bffd17 	ldw	r2,-12(fp)
 40003b8:	1885883a 	add	r2,r3,r2
 40003bc:	10800017 	ldw	r2,0(r2)
 40003c0:	e0bffc15 	stw	r2,-16(fp)
	tempmat[i] = tempmat[j]; tempmat[j] = tmp;
 40003c4:	e0bffe17 	ldw	r2,-8(fp)
 40003c8:	1085883a 	add	r2,r2,r2
 40003cc:	1085883a 	add	r2,r2,r2
 40003d0:	1007883a 	mov	r3,r2
 40003d4:	e0bffd17 	ldw	r2,-12(fp)
 40003d8:	1889883a 	add	r4,r3,r2
 40003dc:	e0bfff17 	ldw	r2,-4(fp)
 40003e0:	1085883a 	add	r2,r2,r2
 40003e4:	1085883a 	add	r2,r2,r2
 40003e8:	1007883a 	mov	r3,r2
 40003ec:	e0bffd17 	ldw	r2,-12(fp)
 40003f0:	1885883a 	add	r2,r3,r2
 40003f4:	10800017 	ldw	r2,0(r2)
 40003f8:	20800015 	stw	r2,0(r4)
 40003fc:	e0bfff17 	ldw	r2,-4(fp)
 4000400:	1085883a 	add	r2,r2,r2
 4000404:	1085883a 	add	r2,r2,r2
 4000408:	1007883a 	mov	r3,r2
 400040c:	e0bffd17 	ldw	r2,-12(fp)
 4000410:	1887883a 	add	r3,r3,r2
 4000414:	e0bffc17 	ldw	r2,-16(fp)
 4000418:	18800015 	stw	r2,0(r3)
}
 400041c:	e037883a 	mov	sp,fp
 4000420:	df000017 	ldw	fp,0(sp)
 4000424:	dec00104 	addi	sp,sp,4
 4000428:	f800283a 	ret

0400042c <detmat>:

float detmat(float matrix[][MXSIZE]){
 400042c:	defff004 	addi	sp,sp,-64
 4000430:	dfc00f15 	stw	ra,60(sp)
 4000434:	df000e15 	stw	fp,56(sp)
 4000438:	dc400d15 	stw	r17,52(sp)
 400043c:	dc000c15 	stw	r16,48(sp)
 4000440:	df000c04 	addi	fp,sp,48
 4000444:	e13ffe15 	stw	r4,-8(fp)
	float det = 1.0f;
 4000448:	008fe034 	movhi	r2,16256
 400044c:	e0bffd15 	stw	r2,-12(fp)

	//Copy Matrix to tempmat
	for(int i = 0; i != MXSIZE; ++i){
 4000450:	e03ffb15 	stw	zero,-20(fp)
 4000454:	00002206 	br	40004e0 <detmat+0xb4>
		for(int j = 0; j != MXSIZE; j++)
 4000458:	e03ffa15 	stw	zero,-24(fp)
 400045c:	00001a06 	br	40004c8 <detmat+0x9c>
			tempmat[i][j] = matrix[i][j];
 4000460:	e0bffb17 	ldw	r2,-20(fp)
 4000464:	1085883a 	add	r2,r2,r2
 4000468:	1085883a 	add	r2,r2,r2
 400046c:	1007883a 	mov	r3,r2
 4000470:	d0a1cb17 	ldw	r2,-30932(gp)
 4000474:	1885883a 	add	r2,r3,r2
 4000478:	10c00017 	ldw	r3,0(r2)
 400047c:	e0bffa17 	ldw	r2,-24(fp)
 4000480:	1085883a 	add	r2,r2,r2
 4000484:	1085883a 	add	r2,r2,r2
 4000488:	18a1883a 	add	r16,r3,r2
 400048c:	e13ffb17 	ldw	r4,-20(fp)
 4000490:	01401404 	movi	r5,80
 4000494:	400195c0 	call	400195c <__mulsi3>
 4000498:	1007883a 	mov	r3,r2
 400049c:	e0bffe17 	ldw	r2,-8(fp)
 40004a0:	1887883a 	add	r3,r3,r2
 40004a4:	e0bffa17 	ldw	r2,-24(fp)
 40004a8:	1085883a 	add	r2,r2,r2
 40004ac:	1085883a 	add	r2,r2,r2
 40004b0:	10c5883a 	add	r2,r2,r3
 40004b4:	10800017 	ldw	r2,0(r2)
 40004b8:	80800015 	stw	r2,0(r16)
float detmat(float matrix[][MXSIZE]){
	float det = 1.0f;

	//Copy Matrix to tempmat
	for(int i = 0; i != MXSIZE; ++i){
		for(int j = 0; j != MXSIZE; j++)
 40004bc:	e0bffa17 	ldw	r2,-24(fp)
 40004c0:	10800044 	addi	r2,r2,1
 40004c4:	e0bffa15 	stw	r2,-24(fp)
 40004c8:	e0bffa17 	ldw	r2,-24(fp)
 40004cc:	10800518 	cmpnei	r2,r2,20
 40004d0:	103fe31e 	bne	r2,zero,4000460 <detmat+0x34>

float detmat(float matrix[][MXSIZE]){
	float det = 1.0f;

	//Copy Matrix to tempmat
	for(int i = 0; i != MXSIZE; ++i){
 40004d4:	e0bffb17 	ldw	r2,-20(fp)
 40004d8:	10800044 	addi	r2,r2,1
 40004dc:	e0bffb15 	stw	r2,-20(fp)
 40004e0:	e0bffb17 	ldw	r2,-20(fp)
 40004e4:	10800518 	cmpnei	r2,r2,20
 40004e8:	103fdb1e 	bne	r2,zero,4000458 <detmat+0x2c>
		for(int j = 0; j != MXSIZE; j++)
			tempmat[i][j] = matrix[i][j];
	}

	// Fill Lower with 0's
	int rswapcount = 0;
 40004ec:	e03ffc15 	stw	zero,-16(fp)
	for(int i =0; i < MXSIZE; ++i){
 40004f0:	e03ff915 	stw	zero,-28(fp)
 40004f4:	00009306 	br	4000744 <detmat+0x318>
		if (tempmat[i][i] != 0){
 40004f8:	e0bff917 	ldw	r2,-28(fp)
 40004fc:	1085883a 	add	r2,r2,r2
 4000500:	1085883a 	add	r2,r2,r2
 4000504:	1007883a 	mov	r3,r2
 4000508:	d0a1cb17 	ldw	r2,-30932(gp)
 400050c:	1885883a 	add	r2,r3,r2
 4000510:	10c00017 	ldw	r3,0(r2)
 4000514:	e0bff917 	ldw	r2,-28(fp)
 4000518:	1085883a 	add	r2,r2,r2
 400051c:	1085883a 	add	r2,r2,r2
 4000520:	1885883a 	add	r2,r3,r2
 4000524:	10800017 	ldw	r2,0(r2)
 4000528:	1009883a 	mov	r4,r2
 400052c:	000b883a 	mov	r5,zero
 4000530:	4000ff40 	call	4000ff4 <__nesf2>
 4000534:	1004c03a 	cmpne	r2,r2,zero
 4000538:	1000011e 	bne	r2,zero,4000540 <detmat+0x114>
 400053c:	00005a06 	br	40006a8 <detmat+0x27c>
			for(int j = i+1; j < MXSIZE; j++){
 4000540:	e0bff917 	ldw	r2,-28(fp)
 4000544:	10800044 	addi	r2,r2,1
 4000548:	e0bff815 	stw	r2,-32(fp)
 400054c:	00005206 	br	4000698 <detmat+0x26c>
				rswapcount =0;
 4000550:	e03ffc15 	stw	zero,-16(fp)
				float f = tempmat[j][i]/tempmat[i][i];
 4000554:	e0bff817 	ldw	r2,-32(fp)
 4000558:	1085883a 	add	r2,r2,r2
 400055c:	1085883a 	add	r2,r2,r2
 4000560:	1007883a 	mov	r3,r2
 4000564:	d0a1cb17 	ldw	r2,-30932(gp)
 4000568:	1885883a 	add	r2,r3,r2
 400056c:	10c00017 	ldw	r3,0(r2)
 4000570:	e0bff917 	ldw	r2,-28(fp)
 4000574:	1085883a 	add	r2,r2,r2
 4000578:	1085883a 	add	r2,r2,r2
 400057c:	1885883a 	add	r2,r3,r2
 4000580:	11000017 	ldw	r4,0(r2)
 4000584:	e0bff917 	ldw	r2,-28(fp)
 4000588:	1085883a 	add	r2,r2,r2
 400058c:	1085883a 	add	r2,r2,r2
 4000590:	1007883a 	mov	r3,r2
 4000594:	d0a1cb17 	ldw	r2,-30932(gp)
 4000598:	1885883a 	add	r2,r3,r2
 400059c:	10c00017 	ldw	r3,0(r2)
 40005a0:	e0bff917 	ldw	r2,-28(fp)
 40005a4:	1085883a 	add	r2,r2,r2
 40005a8:	1085883a 	add	r2,r2,r2
 40005ac:	1885883a 	add	r2,r3,r2
 40005b0:	10800017 	ldw	r2,0(r2)
 40005b4:	100b883a 	mov	r5,r2
 40005b8:	4000e800 	call	4000e80 <__divsf3>
 40005bc:	e0bff715 	stw	r2,-36(fp)
				for (int k = i; k < MXSIZE; ++k)
 40005c0:	e0bff917 	ldw	r2,-28(fp)
 40005c4:	e0bff615 	stw	r2,-40(fp)
 40005c8:	00002d06 	br	4000680 <detmat+0x254>
					tempmat[j][k] = tempmat[j][k] - f*tempmat[i][k];
 40005cc:	e0bff817 	ldw	r2,-32(fp)
 40005d0:	1085883a 	add	r2,r2,r2
 40005d4:	1085883a 	add	r2,r2,r2
 40005d8:	1007883a 	mov	r3,r2
 40005dc:	d0a1cb17 	ldw	r2,-30932(gp)
 40005e0:	1885883a 	add	r2,r3,r2
 40005e4:	10c00017 	ldw	r3,0(r2)
 40005e8:	e0bff617 	ldw	r2,-40(fp)
 40005ec:	1085883a 	add	r2,r2,r2
 40005f0:	1085883a 	add	r2,r2,r2
 40005f4:	18a1883a 	add	r16,r3,r2
 40005f8:	e0bff817 	ldw	r2,-32(fp)
 40005fc:	1085883a 	add	r2,r2,r2
 4000600:	1085883a 	add	r2,r2,r2
 4000604:	1007883a 	mov	r3,r2
 4000608:	d0a1cb17 	ldw	r2,-30932(gp)
 400060c:	1885883a 	add	r2,r3,r2
 4000610:	10c00017 	ldw	r3,0(r2)
 4000614:	e0bff617 	ldw	r2,-40(fp)
 4000618:	1085883a 	add	r2,r2,r2
 400061c:	1085883a 	add	r2,r2,r2
 4000620:	1885883a 	add	r2,r3,r2
 4000624:	14400017 	ldw	r17,0(r2)
 4000628:	e0bff917 	ldw	r2,-28(fp)
 400062c:	1085883a 	add	r2,r2,r2
 4000630:	1085883a 	add	r2,r2,r2
 4000634:	1007883a 	mov	r3,r2
 4000638:	d0a1cb17 	ldw	r2,-30932(gp)
 400063c:	1885883a 	add	r2,r3,r2
 4000640:	10c00017 	ldw	r3,0(r2)
 4000644:	e0bff617 	ldw	r2,-40(fp)
 4000648:	1085883a 	add	r2,r2,r2
 400064c:	1085883a 	add	r2,r2,r2
 4000650:	1885883a 	add	r2,r3,r2
 4000654:	10800017 	ldw	r2,0(r2)
 4000658:	1009883a 	mov	r4,r2
 400065c:	e17ff717 	ldw	r5,-36(fp)
 4000660:	4000ca00 	call	4000ca0 <__mulsf3>
 4000664:	8809883a 	mov	r4,r17
 4000668:	100b883a 	mov	r5,r2
 400066c:	4000bcc0 	call	4000bcc <__subsf3>
 4000670:	80800015 	stw	r2,0(r16)
	for(int i =0; i < MXSIZE; ++i){
		if (tempmat[i][i] != 0){
			for(int j = i+1; j < MXSIZE; j++){
				rswapcount =0;
				float f = tempmat[j][i]/tempmat[i][i];
				for (int k = i; k < MXSIZE; ++k)
 4000674:	e0bff617 	ldw	r2,-40(fp)
 4000678:	10800044 	addi	r2,r2,1
 400067c:	e0bff615 	stw	r2,-40(fp)
 4000680:	e0bff617 	ldw	r2,-40(fp)
 4000684:	10800510 	cmplti	r2,r2,20
 4000688:	103fd01e 	bne	r2,zero,40005cc <detmat+0x1a0>

	// Fill Lower with 0's
	int rswapcount = 0;
	for(int i =0; i < MXSIZE; ++i){
		if (tempmat[i][i] != 0){
			for(int j = i+1; j < MXSIZE; j++){
 400068c:	e0bff817 	ldw	r2,-32(fp)
 4000690:	10800044 	addi	r2,r2,1
 4000694:	e0bff815 	stw	r2,-32(fp)
 4000698:	e0bff817 	ldw	r2,-32(fp)
 400069c:	10800510 	cmplti	r2,r2,20
 40006a0:	103fab1e 	bne	r2,zero,4000550 <detmat+0x124>
 40006a4:	00002406 	br	4000738 <detmat+0x30c>
				float f = tempmat[j][i]/tempmat[i][i];
				for (int k = i; k < MXSIZE; ++k)
					tempmat[j][k] = tempmat[j][k] - f*tempmat[i][k];
			}
		} else {
			if ((MXSIZE - 1 - i) == rswapcount++){
 40006a8:	00c004c4 	movi	r3,19
 40006ac:	e0bff917 	ldw	r2,-28(fp)
 40006b0:	1887c83a 	sub	r3,r3,r2
 40006b4:	e0bffc17 	ldw	r2,-16(fp)
 40006b8:	1885003a 	cmpeq	r2,r3,r2
 40006bc:	1007883a 	mov	r3,r2
 40006c0:	e0bffc17 	ldw	r2,-16(fp)
 40006c4:	10800044 	addi	r2,r2,1
 40006c8:	e0bffc15 	stw	r2,-16(fp)
 40006cc:	18803fcc 	andi	r2,r3,255
 40006d0:	1005003a 	cmpeq	r2,r2,zero
 40006d4:	1000031e 	bne	r2,zero,40006e4 <detmat+0x2b8>
				return 0;
 40006d8:	0005883a 	mov	r2,zero
 40006dc:	e0bfff15 	stw	r2,-4(fp)
 40006e0:	00003506 	br	40007b8 <detmat+0x38c>
			} else {
				for (int k = i; k < MXSIZE - 1; ++k){
 40006e4:	e0bff917 	ldw	r2,-28(fp)
 40006e8:	e0bff515 	stw	r2,-44(fp)
 40006ec:	00000c06 	br	4000720 <detmat+0x2f4>
					rswap(tempmat,k,k+1);
 40006f0:	d121cb17 	ldw	r4,-30932(gp)
 40006f4:	e17ff517 	ldw	r5,-44(fp)
 40006f8:	e0bff517 	ldw	r2,-44(fp)
 40006fc:	10800044 	addi	r2,r2,1
 4000700:	100d883a 	mov	r6,r2
 4000704:	400038c0 	call	400038c <rswap>
					det *= -1;
 4000708:	e0bffd17 	ldw	r2,-12(fp)
 400070c:	10a0003c 	xorhi	r2,r2,32768
 4000710:	e0bffd15 	stw	r2,-12(fp)
			}
		} else {
			if ((MXSIZE - 1 - i) == rswapcount++){
				return 0;
			} else {
				for (int k = i; k < MXSIZE - 1; ++k){
 4000714:	e0bff517 	ldw	r2,-44(fp)
 4000718:	10800044 	addi	r2,r2,1
 400071c:	e0bff515 	stw	r2,-44(fp)
 4000720:	e0bff517 	ldw	r2,-44(fp)
 4000724:	108004d0 	cmplti	r2,r2,19
 4000728:	103ff11e 	bne	r2,zero,40006f0 <detmat+0x2c4>
					rswap(tempmat,k,k+1);
					det *= -1;
				}
				i--;
 400072c:	e0bff917 	ldw	r2,-28(fp)
 4000730:	10bfffc4 	addi	r2,r2,-1
 4000734:	e0bff915 	stw	r2,-28(fp)
			tempmat[i][j] = matrix[i][j];
	}

	// Fill Lower with 0's
	int rswapcount = 0;
	for(int i =0; i < MXSIZE; ++i){
 4000738:	e0bff917 	ldw	r2,-28(fp)
 400073c:	10800044 	addi	r2,r2,1
 4000740:	e0bff915 	stw	r2,-28(fp)
 4000744:	e0bff917 	ldw	r2,-28(fp)
 4000748:	10800510 	cmplti	r2,r2,20
 400074c:	103f6a1e 	bne	r2,zero,40004f8 <detmat+0xcc>
				i--;
			}
		}
	}
	// Calculate Determinant
	for(int i=0; i < MXSIZE; ++i)
 4000750:	e03ff415 	stw	zero,-48(fp)
 4000754:	00001306 	br	40007a4 <detmat+0x378>
		det *= tempmat[i][i];
 4000758:	e0bff417 	ldw	r2,-48(fp)
 400075c:	1085883a 	add	r2,r2,r2
 4000760:	1085883a 	add	r2,r2,r2
 4000764:	1007883a 	mov	r3,r2
 4000768:	d0a1cb17 	ldw	r2,-30932(gp)
 400076c:	1885883a 	add	r2,r3,r2
 4000770:	10c00017 	ldw	r3,0(r2)
 4000774:	e0bff417 	ldw	r2,-48(fp)
 4000778:	1085883a 	add	r2,r2,r2
 400077c:	1085883a 	add	r2,r2,r2
 4000780:	1885883a 	add	r2,r3,r2
 4000784:	10800017 	ldw	r2,0(r2)
 4000788:	e13ffd17 	ldw	r4,-12(fp)
 400078c:	100b883a 	mov	r5,r2
 4000790:	4000ca00 	call	4000ca0 <__mulsf3>
 4000794:	e0bffd15 	stw	r2,-12(fp)
				i--;
			}
		}
	}
	// Calculate Determinant
	for(int i=0; i < MXSIZE; ++i)
 4000798:	e0bff417 	ldw	r2,-48(fp)
 400079c:	10800044 	addi	r2,r2,1
 40007a0:	e0bff415 	stw	r2,-48(fp)
 40007a4:	e0bff417 	ldw	r2,-48(fp)
 40007a8:	10800510 	cmplti	r2,r2,20
 40007ac:	103fea1e 	bne	r2,zero,4000758 <detmat+0x32c>
		det *= tempmat[i][i];

	// return det
	return det;
 40007b0:	e0fffd17 	ldw	r3,-12(fp)
 40007b4:	e0ffff15 	stw	r3,-4(fp)
 40007b8:	e0ffff17 	ldw	r3,-4(fp)
 40007bc:	1805883a 	mov	r2,r3
}
 40007c0:	e037883a 	mov	sp,fp
 40007c4:	dfc00317 	ldw	ra,12(sp)
 40007c8:	df000217 	ldw	fp,8(sp)
 40007cc:	dc400117 	ldw	r17,4(sp)
 40007d0:	dc000017 	ldw	r16,0(sp)
 40007d4:	dec00404 	addi	sp,sp,16
 40007d8:	f800283a 	ret

040007dc <main>:

int main()
{
 40007dc:	defe6304 	addi	sp,sp,-1652
 40007e0:	dfc19c15 	stw	ra,1648(sp)
 40007e4:	df019b15 	stw	fp,1644(sp)
 40007e8:	dc419a15 	stw	r17,1640(sp)
 40007ec:	dc019915 	stw	r16,1636(sp)
 40007f0:	df019904 	addi	fp,sp,1636
	while(1){
		printf("Hello from Nios II!\n");
 40007f4:	01010074 	movhi	r4,1025
 40007f8:	21253604 	addi	r4,r4,-27432
 40007fc:	4002c680 	call	4002c68 <puts>

		volatile float testmat[MXSIZE][MXSIZE] = {{-2,2,-3},{-1,1,3},{2,0,-1}};
 4000800:	e13e7004 	addi	r4,fp,-1600
 4000804:	01819004 	movi	r6,1600
 4000808:	000b883a 	mov	r5,zero
 400080c:	4002bb80 	call	4002bb8 <memset>
 4000810:	00b00034 	movhi	r2,49152
 4000814:	e0be7015 	stw	r2,-1600(fp)
 4000818:	00900034 	movhi	r2,16384
 400081c:	e0be7115 	stw	r2,-1596(fp)
 4000820:	00b01034 	movhi	r2,49216
 4000824:	e0be7215 	stw	r2,-1592(fp)
 4000828:	00afe034 	movhi	r2,49024
 400082c:	e0be8415 	stw	r2,-1520(fp)
 4000830:	008fe034 	movhi	r2,16256
 4000834:	e0be8515 	stw	r2,-1516(fp)
 4000838:	00901034 	movhi	r2,16448
 400083c:	e0be8615 	stw	r2,-1512(fp)
 4000840:	00900034 	movhi	r2,16384
 4000844:	e0be9815 	stw	r2,-1440(fp)
 4000848:	00afe034 	movhi	r2,49024
 400084c:	e0be9a15 	stw	r2,-1432(fp)
		char buf[10];
		volatile float result;

		//initialize the 2D arrays used for determinant row swapping
		tempmat = malloc(MXSIZE*sizeof(float*));
 4000850:	01001404 	movi	r4,80
 4000854:	40024640 	call	4002464 <malloc>
 4000858:	d0a1cb15 	stw	r2,-30932(gp)
			for(int i = 0; i != MXSIZE; ++i)
 400085c:	e03e6915 	stw	zero,-1628(fp)
 4000860:	00000c06 	br	4000894 <main+0xb8>
				tempmat[i] = malloc(MXSIZE*sizeof(float));
 4000864:	e0be6917 	ldw	r2,-1628(fp)
 4000868:	1085883a 	add	r2,r2,r2
 400086c:	1085883a 	add	r2,r2,r2
 4000870:	1007883a 	mov	r3,r2
 4000874:	d0a1cb17 	ldw	r2,-30932(gp)
 4000878:	18a1883a 	add	r16,r3,r2
 400087c:	01001404 	movi	r4,80
 4000880:	40024640 	call	4002464 <malloc>
 4000884:	80800015 	stw	r2,0(r16)
		char buf[10];
		volatile float result;

		//initialize the 2D arrays used for determinant row swapping
		tempmat = malloc(MXSIZE*sizeof(float*));
			for(int i = 0; i != MXSIZE; ++i)
 4000888:	e0be6917 	ldw	r2,-1628(fp)
 400088c:	10800044 	addi	r2,r2,1
 4000890:	e0be6915 	stw	r2,-1628(fp)
 4000894:	e0be6917 	ldw	r2,-1628(fp)
 4000898:	10800518 	cmpnei	r2,r2,20
 400089c:	103ff11e 	bne	r2,zero,4000864 <main+0x88>
				tempmat[i] = malloc(MXSIZE*sizeof(float));

		clock_t exec_t1, exec_t2;
		exec_t1 = times(NULL); // get system time before starting the process
 40008a0:	0009883a 	mov	r4,zero
 40008a4:	4007db40 	call	4007db4 <times>
 40008a8:	e0be6b15 	stw	r2,-1620(fp)

		for (int i = 0; i < 1000; i++){
 40008ac:	e03e6815 	stw	zero,-1632(fp)
 40008b0:	00000606 	br	40008cc <main+0xf0>
			result = detmat(testmat);
 40008b4:	e13e7004 	addi	r4,fp,-1600
 40008b8:	400042c0 	call	400042c <detmat>
 40008bc:	e0be6f15 	stw	r2,-1604(fp)
				tempmat[i] = malloc(MXSIZE*sizeof(float));

		clock_t exec_t1, exec_t2;
		exec_t1 = times(NULL); // get system time before starting the process

		for (int i = 0; i < 1000; i++){
 40008c0:	e0be6817 	ldw	r2,-1632(fp)
 40008c4:	10800044 	addi	r2,r2,1
 40008c8:	e0be6815 	stw	r2,-1632(fp)
 40008cc:	e0be6817 	ldw	r2,-1632(fp)
 40008d0:	1080fa10 	cmplti	r2,r2,1000
 40008d4:	103ff71e 	bne	r2,zero,40008b4 <main+0xd8>
			result = detmat(testmat);
		}

		exec_t2 = times(NULL); // get system time after finishing the process
 40008d8:	0009883a 	mov	r4,zero
 40008dc:	4007db40 	call	4007db4 <times>
 40008e0:	e0be6a15 	stw	r2,-1624(fp)
		gcvt(((double)exec_t2-(double)exec_t1) / alt_ticks_per_second(), 10, buf);
 40008e4:	e13e6a17 	ldw	r4,-1624(fp)
 40008e8:	40017c80 	call	40017c8 <__floatunsidf>
 40008ec:	1021883a 	mov	r16,r2
 40008f0:	1823883a 	mov	r17,r3
 40008f4:	e13e6b17 	ldw	r4,-1620(fp)
 40008f8:	40017c80 	call	40017c8 <__floatunsidf>
 40008fc:	100f883a 	mov	r7,r2
 4000900:	1811883a 	mov	r8,r3
 4000904:	8009883a 	mov	r4,r16
 4000908:	880b883a 	mov	r5,r17
 400090c:	380d883a 	mov	r6,r7
 4000910:	400f883a 	mov	r7,r8
 4000914:	400147c0 	call	400147c <__subdf3>
 4000918:	1009883a 	mov	r4,r2
 400091c:	180b883a 	mov	r5,r3
 4000920:	2021883a 	mov	r16,r4
 4000924:	2823883a 	mov	r17,r5
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 4000928:	00810074 	movhi	r2,1025
 400092c:	10a96704 	addi	r2,r2,-23140
 4000930:	10800017 	ldw	r2,0(r2)
 4000934:	1009883a 	mov	r4,r2
 4000938:	40017c80 	call	40017c8 <__floatunsidf>
 400093c:	100f883a 	mov	r7,r2
 4000940:	1811883a 	mov	r8,r3
 4000944:	8009883a 	mov	r4,r16
 4000948:	880b883a 	mov	r5,r17
 400094c:	380d883a 	mov	r6,r7
 4000950:	400f883a 	mov	r7,r8
 4000954:	40015700 	call	4001570 <__divdf3>
 4000958:	1009883a 	mov	r4,r2
 400095c:	180b883a 	mov	r5,r3
 4000960:	2005883a 	mov	r2,r4
 4000964:	2807883a 	mov	r3,r5
 4000968:	e1fe6c04 	addi	r7,fp,-1616
 400096c:	1009883a 	mov	r4,r2
 4000970:	180b883a 	mov	r5,r3
 4000974:	01800284 	movi	r6,10
 4000978:	40022540 	call	4002254 <gcvt>
		alt_putstr(" proc time = "); alt_putstr(buf); alt_putstr(" seconds \n");
 400097c:	01010074 	movhi	r4,1025
 4000980:	21253b04 	addi	r4,r4,-27412
 4000984:	4007b140 	call	4007b14 <alt_putstr>
 4000988:	e13e6c04 	addi	r4,fp,-1616
 400098c:	4007b140 	call	4007b14 <alt_putstr>
 4000990:	01010074 	movhi	r4,1025
 4000994:	21253f04 	addi	r4,r4,-27396
 4000998:	4007b140 	call	4007b14 <alt_putstr>

		// Free tempmat
		for(int i = 0; i != MXSIZE; ++i)
 400099c:	e03e6715 	stw	zero,-1636(fp)
 40009a0:	00000b06 	br	40009d0 <main+0x1f4>
			free(tempmat[i]);
 40009a4:	e0be6717 	ldw	r2,-1636(fp)
 40009a8:	1085883a 	add	r2,r2,r2
 40009ac:	1085883a 	add	r2,r2,r2
 40009b0:	1007883a 	mov	r3,r2
 40009b4:	d0a1cb17 	ldw	r2,-30932(gp)
 40009b8:	1885883a 	add	r2,r3,r2
 40009bc:	11000017 	ldw	r4,0(r2)
 40009c0:	40024500 	call	4002450 <free>
		exec_t2 = times(NULL); // get system time after finishing the process
		gcvt(((double)exec_t2-(double)exec_t1) / alt_ticks_per_second(), 10, buf);
		alt_putstr(" proc time = "); alt_putstr(buf); alt_putstr(" seconds \n");

		// Free tempmat
		for(int i = 0; i != MXSIZE; ++i)
 40009c4:	e0be6717 	ldw	r2,-1636(fp)
 40009c8:	10800044 	addi	r2,r2,1
 40009cc:	e0be6715 	stw	r2,-1636(fp)
 40009d0:	e0be6717 	ldw	r2,-1636(fp)
 40009d4:	10800518 	cmpnei	r2,r2,20
 40009d8:	103ff21e 	bne	r2,zero,40009a4 <main+0x1c8>
			free(tempmat[i]);
		free(tempmat);
 40009dc:	d121cb17 	ldw	r4,-30932(gp)
 40009e0:	40024500 	call	4002450 <free>

	}
 40009e4:	003f8306 	br	40007f4 <main+0x18>

040009e8 <_fpadd_parts>:
 40009e8:	21c00017 	ldw	r7,0(r4)
 40009ec:	02000044 	movi	r8,1
 40009f0:	41c0332e 	bgeu	r8,r7,4000ac0 <_fpadd_parts+0xd8>
 40009f4:	28800017 	ldw	r2,0(r5)
 40009f8:	4080462e 	bgeu	r8,r2,4000b14 <_fpadd_parts+0x12c>
 40009fc:	00c00104 	movi	r3,4
 4000a00:	38c06b26 	beq	r7,r3,4000bb0 <_fpadd_parts+0x1c8>
 4000a04:	10c04326 	beq	r2,r3,4000b14 <_fpadd_parts+0x12c>
 4000a08:	00c00084 	movi	r3,2
 4000a0c:	10c02e26 	beq	r2,r3,4000ac8 <_fpadd_parts+0xe0>
 4000a10:	38c04026 	beq	r7,r3,4000b14 <_fpadd_parts+0x12c>
 4000a14:	22800217 	ldw	r10,8(r4)
 4000a18:	28c00217 	ldw	r3,8(r5)
 4000a1c:	23000317 	ldw	r12,12(r4)
 4000a20:	2a400317 	ldw	r9,12(r5)
 4000a24:	50cfc83a 	sub	r7,r10,r3
 4000a28:	3817883a 	mov	r11,r7
 4000a2c:	38004f16 	blt	r7,zero,4000b6c <_fpadd_parts+0x184>
 4000a30:	008007c4 	movi	r2,31
 4000a34:	11c03316 	blt	r2,r7,4000b04 <_fpadd_parts+0x11c>
 4000a38:	02c0540e 	bge	zero,r11,4000b8c <_fpadd_parts+0x1a4>
 4000a3c:	41c4983a 	sll	r2,r8,r7
 4000a40:	49c6d83a 	srl	r3,r9,r7
 4000a44:	10bfffc4 	addi	r2,r2,-1
 4000a48:	4884703a 	and	r2,r9,r2
 4000a4c:	1004c03a 	cmpne	r2,r2,zero
 4000a50:	1892b03a 	or	r9,r3,r2
 4000a54:	20c00117 	ldw	r3,4(r4)
 4000a58:	28800117 	ldw	r2,4(r5)
 4000a5c:	18803c26 	beq	r3,r2,4000b50 <_fpadd_parts+0x168>
 4000a60:	18002f26 	beq	r3,zero,4000b20 <_fpadd_parts+0x138>
 4000a64:	4b05c83a 	sub	r2,r9,r12
 4000a68:	10004216 	blt	r2,zero,4000b74 <_fpadd_parts+0x18c>
 4000a6c:	32800215 	stw	r10,8(r6)
 4000a70:	30800315 	stw	r2,12(r6)
 4000a74:	30000115 	stw	zero,4(r6)
 4000a78:	31000317 	ldw	r4,12(r6)
 4000a7c:	01d00034 	movhi	r7,16384
 4000a80:	39ffff84 	addi	r7,r7,-2
 4000a84:	20bfffc4 	addi	r2,r4,-1
 4000a88:	2007883a 	mov	r3,r4
 4000a8c:	38800836 	bltu	r7,r2,4000ab0 <_fpadd_parts+0xc8>
 4000a90:	31400217 	ldw	r5,8(r6)
 4000a94:	18c9883a 	add	r4,r3,r3
 4000a98:	20bfffc4 	addi	r2,r4,-1
 4000a9c:	297fffc4 	addi	r5,r5,-1
 4000aa0:	2007883a 	mov	r3,r4
 4000aa4:	38bffb2e 	bgeu	r7,r2,4000a94 <_fpadd_parts+0xac>
 4000aa8:	31400215 	stw	r5,8(r6)
 4000aac:	31000315 	stw	r4,12(r6)
 4000ab0:	008000c4 	movi	r2,3
 4000ab4:	30800015 	stw	r2,0(r6)
 4000ab8:	20001b16 	blt	r4,zero,4000b28 <_fpadd_parts+0x140>
 4000abc:	3009883a 	mov	r4,r6
 4000ac0:	2005883a 	mov	r2,r4
 4000ac4:	f800283a 	ret
 4000ac8:	38fffd1e 	bne	r7,r3,4000ac0 <_fpadd_parts+0xd8>
 4000acc:	31c00015 	stw	r7,0(r6)
 4000ad0:	20800117 	ldw	r2,4(r4)
 4000ad4:	30800115 	stw	r2,4(r6)
 4000ad8:	20c00217 	ldw	r3,8(r4)
 4000adc:	30c00215 	stw	r3,8(r6)
 4000ae0:	20800317 	ldw	r2,12(r4)
 4000ae4:	30800315 	stw	r2,12(r6)
 4000ae8:	20c00117 	ldw	r3,4(r4)
 4000aec:	28800117 	ldw	r2,4(r5)
 4000af0:	3009883a 	mov	r4,r6
 4000af4:	1886703a 	and	r3,r3,r2
 4000af8:	2005883a 	mov	r2,r4
 4000afc:	30c00115 	stw	r3,4(r6)
 4000b00:	f800283a 	ret
 4000b04:	1a801716 	blt	r3,r10,4000b64 <_fpadd_parts+0x17c>
 4000b08:	1815883a 	mov	r10,r3
 4000b0c:	0019883a 	mov	r12,zero
 4000b10:	003fd006 	br	4000a54 <_fpadd_parts+0x6c>
 4000b14:	2809883a 	mov	r4,r5
 4000b18:	2005883a 	mov	r2,r4
 4000b1c:	f800283a 	ret
 4000b20:	6245c83a 	sub	r2,r12,r9
 4000b24:	003fd006 	br	4000a68 <_fpadd_parts+0x80>
 4000b28:	30800217 	ldw	r2,8(r6)
 4000b2c:	2006d07a 	srli	r3,r4,1
 4000b30:	2100004c 	andi	r4,r4,1
 4000b34:	10800044 	addi	r2,r2,1
 4000b38:	1906b03a 	or	r3,r3,r4
 4000b3c:	3009883a 	mov	r4,r6
 4000b40:	30800215 	stw	r2,8(r6)
 4000b44:	2005883a 	mov	r2,r4
 4000b48:	30c00315 	stw	r3,12(r6)
 4000b4c:	f800283a 	ret
 4000b50:	4b09883a 	add	r4,r9,r12
 4000b54:	30c00115 	stw	r3,4(r6)
 4000b58:	32800215 	stw	r10,8(r6)
 4000b5c:	31000315 	stw	r4,12(r6)
 4000b60:	003fd306 	br	4000ab0 <_fpadd_parts+0xc8>
 4000b64:	0013883a 	mov	r9,zero
 4000b68:	003fba06 	br	4000a54 <_fpadd_parts+0x6c>
 4000b6c:	01cfc83a 	sub	r7,zero,r7
 4000b70:	003faf06 	br	4000a30 <_fpadd_parts+0x48>
 4000b74:	0089c83a 	sub	r4,zero,r2
 4000b78:	00800044 	movi	r2,1
 4000b7c:	30800115 	stw	r2,4(r6)
 4000b80:	32800215 	stw	r10,8(r6)
 4000b84:	31000315 	stw	r4,12(r6)
 4000b88:	003fbb06 	br	4000a78 <_fpadd_parts+0x90>
 4000b8c:	583fb126 	beq	r11,zero,4000a54 <_fpadd_parts+0x6c>
 4000b90:	41c4983a 	sll	r2,r8,r7
 4000b94:	61c6d83a 	srl	r3,r12,r7
 4000b98:	51d5883a 	add	r10,r10,r7
 4000b9c:	10bfffc4 	addi	r2,r2,-1
 4000ba0:	6084703a 	and	r2,r12,r2
 4000ba4:	1004c03a 	cmpne	r2,r2,zero
 4000ba8:	1898b03a 	or	r12,r3,r2
 4000bac:	003fa906 	br	4000a54 <_fpadd_parts+0x6c>
 4000bb0:	11ffc31e 	bne	r2,r7,4000ac0 <_fpadd_parts+0xd8>
 4000bb4:	28c00117 	ldw	r3,4(r5)
 4000bb8:	20800117 	ldw	r2,4(r4)
 4000bbc:	10ffc026 	beq	r2,r3,4000ac0 <_fpadd_parts+0xd8>
 4000bc0:	01010074 	movhi	r4,1025
 4000bc4:	21254204 	addi	r4,r4,-27384
 4000bc8:	003fbd06 	br	4000ac0 <_fpadd_parts+0xd8>

04000bcc <__subsf3>:
 4000bcc:	deffef04 	addi	sp,sp,-68
 4000bd0:	dcc00f15 	stw	r19,60(sp)
 4000bd4:	dcc00204 	addi	r19,sp,8
 4000bd8:	dc400e15 	stw	r17,56(sp)
 4000bdc:	d9000015 	stw	r4,0(sp)
 4000be0:	d9400115 	stw	r5,4(sp)
 4000be4:	d809883a 	mov	r4,sp
 4000be8:	980b883a 	mov	r5,r19
 4000bec:	dc400604 	addi	r17,sp,24
 4000bf0:	dfc01015 	stw	ra,64(sp)
 4000bf4:	4001c980 	call	4001c98 <__unpack_f>
 4000bf8:	d9000104 	addi	r4,sp,4
 4000bfc:	880b883a 	mov	r5,r17
 4000c00:	4001c980 	call	4001c98 <__unpack_f>
 4000c04:	d8800717 	ldw	r2,28(sp)
 4000c08:	9809883a 	mov	r4,r19
 4000c0c:	880b883a 	mov	r5,r17
 4000c10:	d9800a04 	addi	r6,sp,40
 4000c14:	1080005c 	xori	r2,r2,1
 4000c18:	d8800715 	stw	r2,28(sp)
 4000c1c:	40009e80 	call	40009e8 <_fpadd_parts>
 4000c20:	1009883a 	mov	r4,r2
 4000c24:	4001b380 	call	4001b38 <__pack_f>
 4000c28:	dfc01017 	ldw	ra,64(sp)
 4000c2c:	dcc00f17 	ldw	r19,60(sp)
 4000c30:	dc400e17 	ldw	r17,56(sp)
 4000c34:	dec01104 	addi	sp,sp,68
 4000c38:	f800283a 	ret

04000c3c <__addsf3>:
 4000c3c:	deffef04 	addi	sp,sp,-68
 4000c40:	dcc00f15 	stw	r19,60(sp)
 4000c44:	dcc00204 	addi	r19,sp,8
 4000c48:	dc400e15 	stw	r17,56(sp)
 4000c4c:	d9000015 	stw	r4,0(sp)
 4000c50:	d9400115 	stw	r5,4(sp)
 4000c54:	d809883a 	mov	r4,sp
 4000c58:	980b883a 	mov	r5,r19
 4000c5c:	dc400604 	addi	r17,sp,24
 4000c60:	dfc01015 	stw	ra,64(sp)
 4000c64:	4001c980 	call	4001c98 <__unpack_f>
 4000c68:	d9000104 	addi	r4,sp,4
 4000c6c:	880b883a 	mov	r5,r17
 4000c70:	4001c980 	call	4001c98 <__unpack_f>
 4000c74:	d9800a04 	addi	r6,sp,40
 4000c78:	9809883a 	mov	r4,r19
 4000c7c:	880b883a 	mov	r5,r17
 4000c80:	40009e80 	call	40009e8 <_fpadd_parts>
 4000c84:	1009883a 	mov	r4,r2
 4000c88:	4001b380 	call	4001b38 <__pack_f>
 4000c8c:	dfc01017 	ldw	ra,64(sp)
 4000c90:	dcc00f17 	ldw	r19,60(sp)
 4000c94:	dc400e17 	ldw	r17,56(sp)
 4000c98:	dec01104 	addi	sp,sp,68
 4000c9c:	f800283a 	ret

04000ca0 <__mulsf3>:
 4000ca0:	deffef04 	addi	sp,sp,-68
 4000ca4:	dc400f15 	stw	r17,60(sp)
 4000ca8:	dc400204 	addi	r17,sp,8
 4000cac:	dc000e15 	stw	r16,56(sp)
 4000cb0:	d9000015 	stw	r4,0(sp)
 4000cb4:	d9400115 	stw	r5,4(sp)
 4000cb8:	d809883a 	mov	r4,sp
 4000cbc:	880b883a 	mov	r5,r17
 4000cc0:	dc000604 	addi	r16,sp,24
 4000cc4:	dfc01015 	stw	ra,64(sp)
 4000cc8:	4001c980 	call	4001c98 <__unpack_f>
 4000ccc:	d9000104 	addi	r4,sp,4
 4000cd0:	800b883a 	mov	r5,r16
 4000cd4:	4001c980 	call	4001c98 <__unpack_f>
 4000cd8:	d9000217 	ldw	r4,8(sp)
 4000cdc:	00800044 	movi	r2,1
 4000ce0:	01400104 	movi	r5,4
 4000ce4:	1100142e 	bgeu	r2,r4,4000d38 <__mulsf3+0x98>
 4000ce8:	d8c00617 	ldw	r3,24(sp)
 4000cec:	10c0052e 	bgeu	r2,r3,4000d04 <__mulsf3+0x64>
 4000cf0:	21400f26 	beq	r4,r5,4000d30 <__mulsf3+0x90>
 4000cf4:	19405d26 	beq	r3,r5,4000e6c <__mulsf3+0x1cc>
 4000cf8:	00800084 	movi	r2,2
 4000cfc:	20800e26 	beq	r4,r2,4000d38 <__mulsf3+0x98>
 4000d00:	1880181e 	bne	r3,r2,4000d64 <__mulsf3+0xc4>
 4000d04:	d8c00717 	ldw	r3,28(sp)
 4000d08:	d8800317 	ldw	r2,12(sp)
 4000d0c:	8009883a 	mov	r4,r16
 4000d10:	10c4c03a 	cmpne	r2,r2,r3
 4000d14:	d8800715 	stw	r2,28(sp)
 4000d18:	4001b380 	call	4001b38 <__pack_f>
 4000d1c:	dfc01017 	ldw	ra,64(sp)
 4000d20:	dc400f17 	ldw	r17,60(sp)
 4000d24:	dc000e17 	ldw	r16,56(sp)
 4000d28:	dec01104 	addi	sp,sp,68
 4000d2c:	f800283a 	ret
 4000d30:	00800084 	movi	r2,2
 4000d34:	18804f26 	beq	r3,r2,4000e74 <__mulsf3+0x1d4>
 4000d38:	d8800317 	ldw	r2,12(sp)
 4000d3c:	d8c00717 	ldw	r3,28(sp)
 4000d40:	8809883a 	mov	r4,r17
 4000d44:	10c4c03a 	cmpne	r2,r2,r3
 4000d48:	d8800315 	stw	r2,12(sp)
 4000d4c:	4001b380 	call	4001b38 <__pack_f>
 4000d50:	dfc01017 	ldw	ra,64(sp)
 4000d54:	dc400f17 	ldw	r17,60(sp)
 4000d58:	dc000e17 	ldw	r16,56(sp)
 4000d5c:	dec01104 	addi	sp,sp,68
 4000d60:	f800283a 	ret
 4000d64:	d8800517 	ldw	r2,20(sp)
 4000d68:	da000917 	ldw	r8,36(sp)
 4000d6c:	0013883a 	mov	r9,zero
 4000d70:	0007883a 	mov	r3,zero
 4000d74:	480f883a 	mov	r7,r9
 4000d78:	180b883a 	mov	r5,r3
 4000d7c:	400d883a 	mov	r6,r8
 4000d80:	1009883a 	mov	r4,r2
 4000d84:	40019940 	call	4001994 <__muldi3>
 4000d88:	da800417 	ldw	r10,16(sp)
 4000d8c:	d9800817 	ldw	r6,32(sp)
 4000d90:	da400317 	ldw	r9,12(sp)
 4000d94:	52800084 	addi	r10,r10,2
 4000d98:	3295883a 	add	r10,r6,r10
 4000d9c:	d9800717 	ldw	r6,28(sp)
 4000da0:	180b883a 	mov	r5,r3
 4000da4:	180f883a 	mov	r7,r3
 4000da8:	4992c03a 	cmpne	r9,r9,r6
 4000dac:	da400b15 	stw	r9,44(sp)
 4000db0:	1007883a 	mov	r3,r2
 4000db4:	da800c15 	stw	r10,48(sp)
 4000db8:	2800070e 	bge	r5,zero,4000dd8 <__mulsf3+0x138>
 4000dbc:	2880004c 	andi	r2,r5,1
 4000dc0:	1005003a 	cmpeq	r2,r2,zero
 4000dc4:	500d883a 	mov	r6,r10
 4000dc8:	10001e26 	beq	r2,zero,4000e44 <__mulsf3+0x1a4>
 4000dcc:	380ed07a 	srli	r7,r7,1
 4000dd0:	31800044 	addi	r6,r6,1
 4000dd4:	d9800c15 	stw	r6,48(sp)
 4000dd8:	01100034 	movhi	r4,16384
 4000ddc:	213fffc4 	addi	r4,r4,-1
 4000de0:	21c00b36 	bltu	r4,r7,4000e10 <__mulsf3+0x170>
 4000de4:	d8800c17 	ldw	r2,48(sp)
 4000de8:	00000206 	br	4000df4 <__mulsf3+0x154>
 4000dec:	18c7883a 	add	r3,r3,r3
 4000df0:	21c00636 	bltu	r4,r7,4000e0c <__mulsf3+0x16c>
 4000df4:	10bfffc4 	addi	r2,r2,-1
 4000df8:	39cf883a 	add	r7,r7,r7
 4000dfc:	183ffb0e 	bge	r3,zero,4000dec <__mulsf3+0x14c>
 4000e00:	39c00054 	ori	r7,r7,1
 4000e04:	18c7883a 	add	r3,r3,r3
 4000e08:	21fffa2e 	bgeu	r4,r7,4000df4 <__mulsf3+0x154>
 4000e0c:	d8800c15 	stw	r2,48(sp)
 4000e10:	39001fcc 	andi	r4,r7,127
 4000e14:	00801004 	movi	r2,64
 4000e18:	20800d26 	beq	r4,r2,4000e50 <__mulsf3+0x1b0>
 4000e1c:	008000c4 	movi	r2,3
 4000e20:	d9000a04 	addi	r4,sp,40
 4000e24:	d9c00d15 	stw	r7,52(sp)
 4000e28:	d8800a15 	stw	r2,40(sp)
 4000e2c:	4001b380 	call	4001b38 <__pack_f>
 4000e30:	dfc01017 	ldw	ra,64(sp)
 4000e34:	dc400f17 	ldw	r17,60(sp)
 4000e38:	dc000e17 	ldw	r16,56(sp)
 4000e3c:	dec01104 	addi	sp,sp,68
 4000e40:	f800283a 	ret
 4000e44:	1804d07a 	srli	r2,r3,1
 4000e48:	10e00034 	orhi	r3,r2,32768
 4000e4c:	003fdf06 	br	4000dcc <__mulsf3+0x12c>
 4000e50:	3880200c 	andi	r2,r7,128
 4000e54:	103ff11e 	bne	r2,zero,4000e1c <__mulsf3+0x17c>
 4000e58:	183ff026 	beq	r3,zero,4000e1c <__mulsf3+0x17c>
 4000e5c:	3907883a 	add	r3,r7,r4
 4000e60:	00bfe004 	movi	r2,-128
 4000e64:	188e703a 	and	r7,r3,r2
 4000e68:	003fec06 	br	4000e1c <__mulsf3+0x17c>
 4000e6c:	00800084 	movi	r2,2
 4000e70:	20bfa41e 	bne	r4,r2,4000d04 <__mulsf3+0x64>
 4000e74:	01010074 	movhi	r4,1025
 4000e78:	21254204 	addi	r4,r4,-27384
 4000e7c:	003fb306 	br	4000d4c <__mulsf3+0xac>

04000e80 <__divsf3>:
 4000e80:	defff304 	addi	sp,sp,-52
 4000e84:	dc400b15 	stw	r17,44(sp)
 4000e88:	dc400204 	addi	r17,sp,8
 4000e8c:	dc000a15 	stw	r16,40(sp)
 4000e90:	d9000015 	stw	r4,0(sp)
 4000e94:	d9400115 	stw	r5,4(sp)
 4000e98:	d809883a 	mov	r4,sp
 4000e9c:	880b883a 	mov	r5,r17
 4000ea0:	dc000604 	addi	r16,sp,24
 4000ea4:	dfc00c15 	stw	ra,48(sp)
 4000ea8:	4001c980 	call	4001c98 <__unpack_f>
 4000eac:	d9000104 	addi	r4,sp,4
 4000eb0:	800b883a 	mov	r5,r16
 4000eb4:	4001c980 	call	4001c98 <__unpack_f>
 4000eb8:	d9000217 	ldw	r4,8(sp)
 4000ebc:	00800044 	movi	r2,1
 4000ec0:	01800104 	movi	r6,4
 4000ec4:	11000a2e 	bgeu	r2,r4,4000ef0 <__divsf3+0x70>
 4000ec8:	d9400617 	ldw	r5,24(sp)
 4000ecc:	1140432e 	bgeu	r2,r5,4000fdc <__divsf3+0x15c>
 4000ed0:	d8800317 	ldw	r2,12(sp)
 4000ed4:	d8c00717 	ldw	r3,28(sp)
 4000ed8:	10c4f03a 	xor	r2,r2,r3
 4000edc:	d8800315 	stw	r2,12(sp)
 4000ee0:	21800226 	beq	r4,r6,4000eec <__divsf3+0x6c>
 4000ee4:	00800084 	movi	r2,2
 4000ee8:	2080101e 	bne	r4,r2,4000f2c <__divsf3+0xac>
 4000eec:	29000726 	beq	r5,r4,4000f0c <__divsf3+0x8c>
 4000ef0:	8809883a 	mov	r4,r17
 4000ef4:	4001b380 	call	4001b38 <__pack_f>
 4000ef8:	dfc00c17 	ldw	ra,48(sp)
 4000efc:	dc400b17 	ldw	r17,44(sp)
 4000f00:	dc000a17 	ldw	r16,40(sp)
 4000f04:	dec00d04 	addi	sp,sp,52
 4000f08:	f800283a 	ret
 4000f0c:	01010074 	movhi	r4,1025
 4000f10:	21254204 	addi	r4,r4,-27384
 4000f14:	4001b380 	call	4001b38 <__pack_f>
 4000f18:	dfc00c17 	ldw	ra,48(sp)
 4000f1c:	dc400b17 	ldw	r17,44(sp)
 4000f20:	dc000a17 	ldw	r16,40(sp)
 4000f24:	dec00d04 	addi	sp,sp,52
 4000f28:	f800283a 	ret
 4000f2c:	29802d26 	beq	r5,r6,4000fe4 <__divsf3+0x164>
 4000f30:	28801a26 	beq	r5,r2,4000f9c <__divsf3+0x11c>
 4000f34:	d8c00417 	ldw	r3,16(sp)
 4000f38:	d8800817 	ldw	r2,32(sp)
 4000f3c:	d9000517 	ldw	r4,20(sp)
 4000f40:	d9800917 	ldw	r6,36(sp)
 4000f44:	1885c83a 	sub	r2,r3,r2
 4000f48:	d8800415 	stw	r2,16(sp)
 4000f4c:	2180032e 	bgeu	r4,r6,4000f5c <__divsf3+0xdc>
 4000f50:	10bfffc4 	addi	r2,r2,-1
 4000f54:	d8800415 	stw	r2,16(sp)
 4000f58:	2109883a 	add	r4,r4,r4
 4000f5c:	01500034 	movhi	r5,16384
 4000f60:	0007883a 	mov	r3,zero
 4000f64:	0005883a 	mov	r2,zero
 4000f68:	01c007c4 	movi	r7,31
 4000f6c:	10800044 	addi	r2,r2,1
 4000f70:	21800236 	bltu	r4,r6,4000f7c <__divsf3+0xfc>
 4000f74:	1946b03a 	or	r3,r3,r5
 4000f78:	2189c83a 	sub	r4,r4,r6
 4000f7c:	280ad07a 	srli	r5,r5,1
 4000f80:	2109883a 	add	r4,r4,r4
 4000f84:	11fff91e 	bne	r2,r7,4000f6c <__divsf3+0xec>
 4000f88:	19401fcc 	andi	r5,r3,127
 4000f8c:	00801004 	movi	r2,64
 4000f90:	28800a26 	beq	r5,r2,4000fbc <__divsf3+0x13c>
 4000f94:	d8c00515 	stw	r3,20(sp)
 4000f98:	003fd506 	br	4000ef0 <__divsf3+0x70>
 4000f9c:	8809883a 	mov	r4,r17
 4000fa0:	d9800215 	stw	r6,8(sp)
 4000fa4:	4001b380 	call	4001b38 <__pack_f>
 4000fa8:	dfc00c17 	ldw	ra,48(sp)
 4000fac:	dc400b17 	ldw	r17,44(sp)
 4000fb0:	dc000a17 	ldw	r16,40(sp)
 4000fb4:	dec00d04 	addi	sp,sp,52
 4000fb8:	f800283a 	ret
 4000fbc:	1880200c 	andi	r2,r3,128
 4000fc0:	103ff41e 	bne	r2,zero,4000f94 <__divsf3+0x114>
 4000fc4:	203ff326 	beq	r4,zero,4000f94 <__divsf3+0x114>
 4000fc8:	1947883a 	add	r3,r3,r5
 4000fcc:	00bfe004 	movi	r2,-128
 4000fd0:	1886703a 	and	r3,r3,r2
 4000fd4:	d8c00515 	stw	r3,20(sp)
 4000fd8:	003fc506 	br	4000ef0 <__divsf3+0x70>
 4000fdc:	8009883a 	mov	r4,r16
 4000fe0:	003fc406 	br	4000ef4 <__divsf3+0x74>
 4000fe4:	8809883a 	mov	r4,r17
 4000fe8:	d8000515 	stw	zero,20(sp)
 4000fec:	d8000415 	stw	zero,16(sp)
 4000ff0:	003fc006 	br	4000ef4 <__divsf3+0x74>

04000ff4 <__nesf2>:
 4000ff4:	defff304 	addi	sp,sp,-52
 4000ff8:	dc400b15 	stw	r17,44(sp)
 4000ffc:	dc400204 	addi	r17,sp,8
 4001000:	dc000a15 	stw	r16,40(sp)
 4001004:	d9000015 	stw	r4,0(sp)
 4001008:	d9400115 	stw	r5,4(sp)
 400100c:	d809883a 	mov	r4,sp
 4001010:	880b883a 	mov	r5,r17
 4001014:	dc000604 	addi	r16,sp,24
 4001018:	dfc00c15 	stw	ra,48(sp)
 400101c:	4001c980 	call	4001c98 <__unpack_f>
 4001020:	d9000104 	addi	r4,sp,4
 4001024:	800b883a 	mov	r5,r16
 4001028:	4001c980 	call	4001c98 <__unpack_f>
 400102c:	d8800217 	ldw	r2,8(sp)
 4001030:	00c00044 	movi	r3,1
 4001034:	180d883a 	mov	r6,r3
 4001038:	1880062e 	bgeu	r3,r2,4001054 <__nesf2+0x60>
 400103c:	d8800617 	ldw	r2,24(sp)
 4001040:	8809883a 	mov	r4,r17
 4001044:	800b883a 	mov	r5,r16
 4001048:	1880022e 	bgeu	r3,r2,4001054 <__nesf2+0x60>
 400104c:	4001d600 	call	4001d60 <__fpcmp_parts_f>
 4001050:	100d883a 	mov	r6,r2
 4001054:	3005883a 	mov	r2,r6
 4001058:	dfc00c17 	ldw	ra,48(sp)
 400105c:	dc400b17 	ldw	r17,44(sp)
 4001060:	dc000a17 	ldw	r16,40(sp)
 4001064:	dec00d04 	addi	sp,sp,52
 4001068:	f800283a 	ret

0400106c <_fpadd_parts>:
 400106c:	defff804 	addi	sp,sp,-32
 4001070:	dcc00315 	stw	r19,12(sp)
 4001074:	2027883a 	mov	r19,r4
 4001078:	21000017 	ldw	r4,0(r4)
 400107c:	00c00044 	movi	r3,1
 4001080:	dd400515 	stw	r21,20(sp)
 4001084:	dd000415 	stw	r20,16(sp)
 4001088:	ddc00715 	stw	r23,28(sp)
 400108c:	dd800615 	stw	r22,24(sp)
 4001090:	dc800215 	stw	r18,8(sp)
 4001094:	dc400115 	stw	r17,4(sp)
 4001098:	dc000015 	stw	r16,0(sp)
 400109c:	282b883a 	mov	r21,r5
 40010a0:	3029883a 	mov	r20,r6
 40010a4:	1900632e 	bgeu	r3,r4,4001234 <_fpadd_parts+0x1c8>
 40010a8:	28800017 	ldw	r2,0(r5)
 40010ac:	1880812e 	bgeu	r3,r2,40012b4 <_fpadd_parts+0x248>
 40010b0:	00c00104 	movi	r3,4
 40010b4:	20c0dc26 	beq	r4,r3,4001428 <_fpadd_parts+0x3bc>
 40010b8:	10c07e26 	beq	r2,r3,40012b4 <_fpadd_parts+0x248>
 40010bc:	00c00084 	movi	r3,2
 40010c0:	10c06726 	beq	r2,r3,4001260 <_fpadd_parts+0x1f4>
 40010c4:	20c07b26 	beq	r4,r3,40012b4 <_fpadd_parts+0x248>
 40010c8:	9dc00217 	ldw	r23,8(r19)
 40010cc:	28c00217 	ldw	r3,8(r5)
 40010d0:	9c400317 	ldw	r17,12(r19)
 40010d4:	2bc00317 	ldw	r15,12(r5)
 40010d8:	b8cdc83a 	sub	r6,r23,r3
 40010dc:	9c800417 	ldw	r18,16(r19)
 40010e0:	2c000417 	ldw	r16,16(r5)
 40010e4:	3009883a 	mov	r4,r6
 40010e8:	30009716 	blt	r6,zero,4001348 <_fpadd_parts+0x2dc>
 40010ec:	00800fc4 	movi	r2,63
 40010f0:	11806b16 	blt	r2,r6,40012a0 <_fpadd_parts+0x234>
 40010f4:	0100a40e 	bge	zero,r4,4001388 <_fpadd_parts+0x31c>
 40010f8:	35bff804 	addi	r22,r6,-32
 40010fc:	b000bc16 	blt	r22,zero,40013f0 <_fpadd_parts+0x384>
 4001100:	8596d83a 	srl	r11,r16,r22
 4001104:	0019883a 	mov	r12,zero
 4001108:	0013883a 	mov	r9,zero
 400110c:	01000044 	movi	r4,1
 4001110:	0015883a 	mov	r10,zero
 4001114:	b000be16 	blt	r22,zero,4001410 <_fpadd_parts+0x3a4>
 4001118:	2590983a 	sll	r8,r4,r22
 400111c:	000f883a 	mov	r7,zero
 4001120:	00bfffc4 	movi	r2,-1
 4001124:	3889883a 	add	r4,r7,r2
 4001128:	408b883a 	add	r5,r8,r2
 400112c:	21cd803a 	cmpltu	r6,r4,r7
 4001130:	314b883a 	add	r5,r6,r5
 4001134:	7904703a 	and	r2,r15,r4
 4001138:	8146703a 	and	r3,r16,r5
 400113c:	10c4b03a 	or	r2,r2,r3
 4001140:	10000226 	beq	r2,zero,400114c <_fpadd_parts+0xe0>
 4001144:	02400044 	movi	r9,1
 4001148:	0015883a 	mov	r10,zero
 400114c:	5a5eb03a 	or	r15,r11,r9
 4001150:	62a0b03a 	or	r16,r12,r10
 4001154:	99400117 	ldw	r5,4(r19)
 4001158:	a8800117 	ldw	r2,4(r21)
 400115c:	28806e26 	beq	r5,r2,4001318 <_fpadd_parts+0x2ac>
 4001160:	28006626 	beq	r5,zero,40012fc <_fpadd_parts+0x290>
 4001164:	7c45c83a 	sub	r2,r15,r17
 4001168:	7889803a 	cmpltu	r4,r15,r2
 400116c:	8487c83a 	sub	r3,r16,r18
 4001170:	1909c83a 	sub	r4,r3,r4
 4001174:	100d883a 	mov	r6,r2
 4001178:	200f883a 	mov	r7,r4
 400117c:	38007716 	blt	r7,zero,400135c <_fpadd_parts+0x2f0>
 4001180:	a5c00215 	stw	r23,8(r20)
 4001184:	a1c00415 	stw	r7,16(r20)
 4001188:	a0000115 	stw	zero,4(r20)
 400118c:	a1800315 	stw	r6,12(r20)
 4001190:	a2000317 	ldw	r8,12(r20)
 4001194:	a2400417 	ldw	r9,16(r20)
 4001198:	00bfffc4 	movi	r2,-1
 400119c:	408b883a 	add	r5,r8,r2
 40011a0:	2a09803a 	cmpltu	r4,r5,r8
 40011a4:	488d883a 	add	r6,r9,r2
 40011a8:	01c40034 	movhi	r7,4096
 40011ac:	39ffffc4 	addi	r7,r7,-1
 40011b0:	218d883a 	add	r6,r4,r6
 40011b4:	39801736 	bltu	r7,r6,4001214 <_fpadd_parts+0x1a8>
 40011b8:	31c06526 	beq	r6,r7,4001350 <_fpadd_parts+0x2e4>
 40011bc:	a3000217 	ldw	r12,8(r20)
 40011c0:	4209883a 	add	r4,r8,r8
 40011c4:	00bfffc4 	movi	r2,-1
 40011c8:	220f803a 	cmpltu	r7,r4,r8
 40011cc:	4a4b883a 	add	r5,r9,r9
 40011d0:	394f883a 	add	r7,r7,r5
 40011d4:	2095883a 	add	r10,r4,r2
 40011d8:	3897883a 	add	r11,r7,r2
 40011dc:	510d803a 	cmpltu	r6,r10,r4
 40011e0:	6099883a 	add	r12,r12,r2
 40011e4:	32d7883a 	add	r11,r6,r11
 40011e8:	00840034 	movhi	r2,4096
 40011ec:	10bfffc4 	addi	r2,r2,-1
 40011f0:	2011883a 	mov	r8,r4
 40011f4:	3813883a 	mov	r9,r7
 40011f8:	a1000315 	stw	r4,12(r20)
 40011fc:	a1c00415 	stw	r7,16(r20)
 4001200:	a3000215 	stw	r12,8(r20)
 4001204:	12c00336 	bltu	r2,r11,4001214 <_fpadd_parts+0x1a8>
 4001208:	58bfed1e 	bne	r11,r2,40011c0 <_fpadd_parts+0x154>
 400120c:	00bfff84 	movi	r2,-2
 4001210:	12bfeb2e 	bgeu	r2,r10,40011c0 <_fpadd_parts+0x154>
 4001214:	a2800417 	ldw	r10,16(r20)
 4001218:	008000c4 	movi	r2,3
 400121c:	00c80034 	movhi	r3,8192
 4001220:	18ffffc4 	addi	r3,r3,-1
 4001224:	a2400317 	ldw	r9,12(r20)
 4001228:	a0800015 	stw	r2,0(r20)
 400122c:	1a802336 	bltu	r3,r10,40012bc <_fpadd_parts+0x250>
 4001230:	a027883a 	mov	r19,r20
 4001234:	9805883a 	mov	r2,r19
 4001238:	ddc00717 	ldw	r23,28(sp)
 400123c:	dd800617 	ldw	r22,24(sp)
 4001240:	dd400517 	ldw	r21,20(sp)
 4001244:	dd000417 	ldw	r20,16(sp)
 4001248:	dcc00317 	ldw	r19,12(sp)
 400124c:	dc800217 	ldw	r18,8(sp)
 4001250:	dc400117 	ldw	r17,4(sp)
 4001254:	dc000017 	ldw	r16,0(sp)
 4001258:	dec00804 	addi	sp,sp,32
 400125c:	f800283a 	ret
 4001260:	20fff41e 	bne	r4,r3,4001234 <_fpadd_parts+0x1c8>
 4001264:	31000015 	stw	r4,0(r6)
 4001268:	98800117 	ldw	r2,4(r19)
 400126c:	30800115 	stw	r2,4(r6)
 4001270:	98c00217 	ldw	r3,8(r19)
 4001274:	30c00215 	stw	r3,8(r6)
 4001278:	98800317 	ldw	r2,12(r19)
 400127c:	30800315 	stw	r2,12(r6)
 4001280:	98c00417 	ldw	r3,16(r19)
 4001284:	30c00415 	stw	r3,16(r6)
 4001288:	98800117 	ldw	r2,4(r19)
 400128c:	28c00117 	ldw	r3,4(r5)
 4001290:	3027883a 	mov	r19,r6
 4001294:	10c4703a 	and	r2,r2,r3
 4001298:	30800115 	stw	r2,4(r6)
 400129c:	003fe506 	br	4001234 <_fpadd_parts+0x1c8>
 40012a0:	1dc02616 	blt	r3,r23,400133c <_fpadd_parts+0x2d0>
 40012a4:	0023883a 	mov	r17,zero
 40012a8:	182f883a 	mov	r23,r3
 40012ac:	0025883a 	mov	r18,zero
 40012b0:	003fa806 	br	4001154 <_fpadd_parts+0xe8>
 40012b4:	a827883a 	mov	r19,r21
 40012b8:	003fde06 	br	4001234 <_fpadd_parts+0x1c8>
 40012bc:	01800044 	movi	r6,1
 40012c0:	500497fa 	slli	r2,r10,31
 40012c4:	4808d07a 	srli	r4,r9,1
 40012c8:	518ad83a 	srl	r5,r10,r6
 40012cc:	a2000217 	ldw	r8,8(r20)
 40012d0:	1108b03a 	or	r4,r2,r4
 40012d4:	0007883a 	mov	r3,zero
 40012d8:	4984703a 	and	r2,r9,r6
 40012dc:	208cb03a 	or	r6,r4,r2
 40012e0:	28ceb03a 	or	r7,r5,r3
 40012e4:	42000044 	addi	r8,r8,1
 40012e8:	a027883a 	mov	r19,r20
 40012ec:	a1c00415 	stw	r7,16(r20)
 40012f0:	a2000215 	stw	r8,8(r20)
 40012f4:	a1800315 	stw	r6,12(r20)
 40012f8:	003fce06 	br	4001234 <_fpadd_parts+0x1c8>
 40012fc:	8bc5c83a 	sub	r2,r17,r15
 4001300:	8889803a 	cmpltu	r4,r17,r2
 4001304:	9407c83a 	sub	r3,r18,r16
 4001308:	1909c83a 	sub	r4,r3,r4
 400130c:	100d883a 	mov	r6,r2
 4001310:	200f883a 	mov	r7,r4
 4001314:	003f9906 	br	400117c <_fpadd_parts+0x110>
 4001318:	7c45883a 	add	r2,r15,r17
 400131c:	13c9803a 	cmpltu	r4,r2,r15
 4001320:	8487883a 	add	r3,r16,r18
 4001324:	20c9883a 	add	r4,r4,r3
 4001328:	a1400115 	stw	r5,4(r20)
 400132c:	a5c00215 	stw	r23,8(r20)
 4001330:	a0800315 	stw	r2,12(r20)
 4001334:	a1000415 	stw	r4,16(r20)
 4001338:	003fb606 	br	4001214 <_fpadd_parts+0x1a8>
 400133c:	001f883a 	mov	r15,zero
 4001340:	0021883a 	mov	r16,zero
 4001344:	003f8306 	br	4001154 <_fpadd_parts+0xe8>
 4001348:	018dc83a 	sub	r6,zero,r6
 400134c:	003f6706 	br	40010ec <_fpadd_parts+0x80>
 4001350:	00bfff84 	movi	r2,-2
 4001354:	117faf36 	bltu	r2,r5,4001214 <_fpadd_parts+0x1a8>
 4001358:	003f9806 	br	40011bc <_fpadd_parts+0x150>
 400135c:	0005883a 	mov	r2,zero
 4001360:	1189c83a 	sub	r4,r2,r6
 4001364:	1105803a 	cmpltu	r2,r2,r4
 4001368:	01cbc83a 	sub	r5,zero,r7
 400136c:	2885c83a 	sub	r2,r5,r2
 4001370:	01800044 	movi	r6,1
 4001374:	a1800115 	stw	r6,4(r20)
 4001378:	a5c00215 	stw	r23,8(r20)
 400137c:	a1000315 	stw	r4,12(r20)
 4001380:	a0800415 	stw	r2,16(r20)
 4001384:	003f8206 	br	4001190 <_fpadd_parts+0x124>
 4001388:	203f7226 	beq	r4,zero,4001154 <_fpadd_parts+0xe8>
 400138c:	35bff804 	addi	r22,r6,-32
 4001390:	b9af883a 	add	r23,r23,r6
 4001394:	b0003116 	blt	r22,zero,400145c <_fpadd_parts+0x3f0>
 4001398:	959ad83a 	srl	r13,r18,r22
 400139c:	001d883a 	mov	r14,zero
 40013a0:	000f883a 	mov	r7,zero
 40013a4:	01000044 	movi	r4,1
 40013a8:	0011883a 	mov	r8,zero
 40013ac:	b0002516 	blt	r22,zero,4001444 <_fpadd_parts+0x3d8>
 40013b0:	2594983a 	sll	r10,r4,r22
 40013b4:	0013883a 	mov	r9,zero
 40013b8:	00bfffc4 	movi	r2,-1
 40013bc:	4889883a 	add	r4,r9,r2
 40013c0:	508b883a 	add	r5,r10,r2
 40013c4:	224d803a 	cmpltu	r6,r4,r9
 40013c8:	314b883a 	add	r5,r6,r5
 40013cc:	8904703a 	and	r2,r17,r4
 40013d0:	9146703a 	and	r3,r18,r5
 40013d4:	10c4b03a 	or	r2,r2,r3
 40013d8:	10000226 	beq	r2,zero,40013e4 <_fpadd_parts+0x378>
 40013dc:	01c00044 	movi	r7,1
 40013e0:	0011883a 	mov	r8,zero
 40013e4:	69e2b03a 	or	r17,r13,r7
 40013e8:	7224b03a 	or	r18,r14,r8
 40013ec:	003f5906 	br	4001154 <_fpadd_parts+0xe8>
 40013f0:	8407883a 	add	r3,r16,r16
 40013f4:	008007c4 	movi	r2,31
 40013f8:	1185c83a 	sub	r2,r2,r6
 40013fc:	1886983a 	sll	r3,r3,r2
 4001400:	7996d83a 	srl	r11,r15,r6
 4001404:	8198d83a 	srl	r12,r16,r6
 4001408:	1ad6b03a 	or	r11,r3,r11
 400140c:	003f3e06 	br	4001108 <_fpadd_parts+0x9c>
 4001410:	2006d07a 	srli	r3,r4,1
 4001414:	008007c4 	movi	r2,31
 4001418:	1185c83a 	sub	r2,r2,r6
 400141c:	1890d83a 	srl	r8,r3,r2
 4001420:	218e983a 	sll	r7,r4,r6
 4001424:	003f3e06 	br	4001120 <_fpadd_parts+0xb4>
 4001428:	113f821e 	bne	r2,r4,4001234 <_fpadd_parts+0x1c8>
 400142c:	28c00117 	ldw	r3,4(r5)
 4001430:	98800117 	ldw	r2,4(r19)
 4001434:	10ff7f26 	beq	r2,r3,4001234 <_fpadd_parts+0x1c8>
 4001438:	04c10074 	movhi	r19,1025
 400143c:	9ce54604 	addi	r19,r19,-27368
 4001440:	003f7c06 	br	4001234 <_fpadd_parts+0x1c8>
 4001444:	2006d07a 	srli	r3,r4,1
 4001448:	008007c4 	movi	r2,31
 400144c:	1185c83a 	sub	r2,r2,r6
 4001450:	1894d83a 	srl	r10,r3,r2
 4001454:	2192983a 	sll	r9,r4,r6
 4001458:	003fd706 	br	40013b8 <_fpadd_parts+0x34c>
 400145c:	9487883a 	add	r3,r18,r18
 4001460:	008007c4 	movi	r2,31
 4001464:	1185c83a 	sub	r2,r2,r6
 4001468:	1886983a 	sll	r3,r3,r2
 400146c:	899ad83a 	srl	r13,r17,r6
 4001470:	919cd83a 	srl	r14,r18,r6
 4001474:	1b5ab03a 	or	r13,r3,r13
 4001478:	003fc906 	br	40013a0 <_fpadd_parts+0x334>

0400147c <__subdf3>:
 400147c:	deffea04 	addi	sp,sp,-88
 4001480:	dcc01415 	stw	r19,80(sp)
 4001484:	dcc00404 	addi	r19,sp,16
 4001488:	2011883a 	mov	r8,r4
 400148c:	2813883a 	mov	r9,r5
 4001490:	dc401315 	stw	r17,76(sp)
 4001494:	d809883a 	mov	r4,sp
 4001498:	980b883a 	mov	r5,r19
 400149c:	dc400904 	addi	r17,sp,36
 40014a0:	dfc01515 	stw	ra,84(sp)
 40014a4:	da400115 	stw	r9,4(sp)
 40014a8:	d9c00315 	stw	r7,12(sp)
 40014ac:	da000015 	stw	r8,0(sp)
 40014b0:	d9800215 	stw	r6,8(sp)
 40014b4:	400211c0 	call	400211c <__unpack_d>
 40014b8:	d9000204 	addi	r4,sp,8
 40014bc:	880b883a 	mov	r5,r17
 40014c0:	400211c0 	call	400211c <__unpack_d>
 40014c4:	d8800a17 	ldw	r2,40(sp)
 40014c8:	880b883a 	mov	r5,r17
 40014cc:	9809883a 	mov	r4,r19
 40014d0:	d9800e04 	addi	r6,sp,56
 40014d4:	1080005c 	xori	r2,r2,1
 40014d8:	d8800a15 	stw	r2,40(sp)
 40014dc:	400106c0 	call	400106c <_fpadd_parts>
 40014e0:	1009883a 	mov	r4,r2
 40014e4:	4001e080 	call	4001e08 <__pack_d>
 40014e8:	dfc01517 	ldw	ra,84(sp)
 40014ec:	dcc01417 	ldw	r19,80(sp)
 40014f0:	dc401317 	ldw	r17,76(sp)
 40014f4:	dec01604 	addi	sp,sp,88
 40014f8:	f800283a 	ret

040014fc <__adddf3>:
 40014fc:	deffea04 	addi	sp,sp,-88
 4001500:	dcc01415 	stw	r19,80(sp)
 4001504:	dcc00404 	addi	r19,sp,16
 4001508:	2011883a 	mov	r8,r4
 400150c:	2813883a 	mov	r9,r5
 4001510:	dc401315 	stw	r17,76(sp)
 4001514:	d809883a 	mov	r4,sp
 4001518:	980b883a 	mov	r5,r19
 400151c:	dc400904 	addi	r17,sp,36
 4001520:	dfc01515 	stw	ra,84(sp)
 4001524:	da400115 	stw	r9,4(sp)
 4001528:	d9c00315 	stw	r7,12(sp)
 400152c:	da000015 	stw	r8,0(sp)
 4001530:	d9800215 	stw	r6,8(sp)
 4001534:	400211c0 	call	400211c <__unpack_d>
 4001538:	d9000204 	addi	r4,sp,8
 400153c:	880b883a 	mov	r5,r17
 4001540:	400211c0 	call	400211c <__unpack_d>
 4001544:	d9800e04 	addi	r6,sp,56
 4001548:	9809883a 	mov	r4,r19
 400154c:	880b883a 	mov	r5,r17
 4001550:	400106c0 	call	400106c <_fpadd_parts>
 4001554:	1009883a 	mov	r4,r2
 4001558:	4001e080 	call	4001e08 <__pack_d>
 400155c:	dfc01517 	ldw	ra,84(sp)
 4001560:	dcc01417 	ldw	r19,80(sp)
 4001564:	dc401317 	ldw	r17,76(sp)
 4001568:	dec01604 	addi	sp,sp,88
 400156c:	f800283a 	ret

04001570 <__divdf3>:
 4001570:	deffed04 	addi	sp,sp,-76
 4001574:	dcc01115 	stw	r19,68(sp)
 4001578:	dcc00404 	addi	r19,sp,16
 400157c:	2011883a 	mov	r8,r4
 4001580:	2813883a 	mov	r9,r5
 4001584:	dc000e15 	stw	r16,56(sp)
 4001588:	d809883a 	mov	r4,sp
 400158c:	980b883a 	mov	r5,r19
 4001590:	dc000904 	addi	r16,sp,36
 4001594:	dfc01215 	stw	ra,72(sp)
 4001598:	da400115 	stw	r9,4(sp)
 400159c:	d9c00315 	stw	r7,12(sp)
 40015a0:	da000015 	stw	r8,0(sp)
 40015a4:	d9800215 	stw	r6,8(sp)
 40015a8:	dc801015 	stw	r18,64(sp)
 40015ac:	dc400f15 	stw	r17,60(sp)
 40015b0:	400211c0 	call	400211c <__unpack_d>
 40015b4:	d9000204 	addi	r4,sp,8
 40015b8:	800b883a 	mov	r5,r16
 40015bc:	400211c0 	call	400211c <__unpack_d>
 40015c0:	d9000417 	ldw	r4,16(sp)
 40015c4:	00800044 	movi	r2,1
 40015c8:	11000b2e 	bgeu	r2,r4,40015f8 <__divdf3+0x88>
 40015cc:	d9400917 	ldw	r5,36(sp)
 40015d0:	1140762e 	bgeu	r2,r5,40017ac <__divdf3+0x23c>
 40015d4:	d8800517 	ldw	r2,20(sp)
 40015d8:	d8c00a17 	ldw	r3,40(sp)
 40015dc:	01800104 	movi	r6,4
 40015e0:	10c4f03a 	xor	r2,r2,r3
 40015e4:	d8800515 	stw	r2,20(sp)
 40015e8:	21800226 	beq	r4,r6,40015f4 <__divdf3+0x84>
 40015ec:	00800084 	movi	r2,2
 40015f0:	2080141e 	bne	r4,r2,4001644 <__divdf3+0xd4>
 40015f4:	29000926 	beq	r5,r4,400161c <__divdf3+0xac>
 40015f8:	9809883a 	mov	r4,r19
 40015fc:	4001e080 	call	4001e08 <__pack_d>
 4001600:	dfc01217 	ldw	ra,72(sp)
 4001604:	dcc01117 	ldw	r19,68(sp)
 4001608:	dc801017 	ldw	r18,64(sp)
 400160c:	dc400f17 	ldw	r17,60(sp)
 4001610:	dc000e17 	ldw	r16,56(sp)
 4001614:	dec01304 	addi	sp,sp,76
 4001618:	f800283a 	ret
 400161c:	01010074 	movhi	r4,1025
 4001620:	21254604 	addi	r4,r4,-27368
 4001624:	4001e080 	call	4001e08 <__pack_d>
 4001628:	dfc01217 	ldw	ra,72(sp)
 400162c:	dcc01117 	ldw	r19,68(sp)
 4001630:	dc801017 	ldw	r18,64(sp)
 4001634:	dc400f17 	ldw	r17,60(sp)
 4001638:	dc000e17 	ldw	r16,56(sp)
 400163c:	dec01304 	addi	sp,sp,76
 4001640:	f800283a 	ret
 4001644:	29805b26 	beq	r5,r6,40017b4 <__divdf3+0x244>
 4001648:	28802d26 	beq	r5,r2,4001700 <__divdf3+0x190>
 400164c:	d8c00617 	ldw	r3,24(sp)
 4001650:	d8800b17 	ldw	r2,44(sp)
 4001654:	d9c00817 	ldw	r7,32(sp)
 4001658:	dc400d17 	ldw	r17,52(sp)
 400165c:	188bc83a 	sub	r5,r3,r2
 4001660:	d9800717 	ldw	r6,28(sp)
 4001664:	dc000c17 	ldw	r16,48(sp)
 4001668:	d9400615 	stw	r5,24(sp)
 400166c:	3c403836 	bltu	r7,r17,4001750 <__divdf3+0x1e0>
 4001670:	89c03626 	beq	r17,r7,400174c <__divdf3+0x1dc>
 4001674:	0015883a 	mov	r10,zero
 4001678:	001d883a 	mov	r14,zero
 400167c:	02c40034 	movhi	r11,4096
 4001680:	001f883a 	mov	r15,zero
 4001684:	003f883a 	mov	ra,zero
 4001688:	04800f44 	movi	r18,61
 400168c:	00000f06 	br	40016cc <__divdf3+0x15c>
 4001690:	601d883a 	mov	r14,r12
 4001694:	681f883a 	mov	r15,r13
 4001698:	400d883a 	mov	r6,r8
 400169c:	100f883a 	mov	r7,r2
 40016a0:	3191883a 	add	r8,r6,r6
 40016a4:	5808d07a 	srli	r4,r11,1
 40016a8:	4185803a 	cmpltu	r2,r8,r6
 40016ac:	39d3883a 	add	r9,r7,r7
 40016b0:	28c6b03a 	or	r3,r5,r3
 40016b4:	1245883a 	add	r2,r2,r9
 40016b8:	1815883a 	mov	r10,r3
 40016bc:	2017883a 	mov	r11,r4
 40016c0:	400d883a 	mov	r6,r8
 40016c4:	100f883a 	mov	r7,r2
 40016c8:	fc801726 	beq	ra,r18,4001728 <__divdf3+0x1b8>
 40016cc:	580a97fa 	slli	r5,r11,31
 40016d0:	5006d07a 	srli	r3,r10,1
 40016d4:	ffc00044 	addi	ra,ra,1
 40016d8:	3c7ff136 	bltu	r7,r17,40016a0 <__divdf3+0x130>
 40016dc:	3411c83a 	sub	r8,r6,r16
 40016e0:	3205803a 	cmpltu	r2,r6,r8
 40016e4:	3c53c83a 	sub	r9,r7,r17
 40016e8:	7298b03a 	or	r12,r14,r10
 40016ec:	7adab03a 	or	r13,r15,r11
 40016f0:	4885c83a 	sub	r2,r9,r2
 40016f4:	89ffe61e 	bne	r17,r7,4001690 <__divdf3+0x120>
 40016f8:	343fe936 	bltu	r6,r16,40016a0 <__divdf3+0x130>
 40016fc:	003fe406 	br	4001690 <__divdf3+0x120>
 4001700:	9809883a 	mov	r4,r19
 4001704:	d9800415 	stw	r6,16(sp)
 4001708:	4001e080 	call	4001e08 <__pack_d>
 400170c:	dfc01217 	ldw	ra,72(sp)
 4001710:	dcc01117 	ldw	r19,68(sp)
 4001714:	dc801017 	ldw	r18,64(sp)
 4001718:	dc400f17 	ldw	r17,60(sp)
 400171c:	dc000e17 	ldw	r16,56(sp)
 4001720:	dec01304 	addi	sp,sp,76
 4001724:	f800283a 	ret
 4001728:	00803fc4 	movi	r2,255
 400172c:	7090703a 	and	r8,r14,r2
 4001730:	00802004 	movi	r2,128
 4001734:	0007883a 	mov	r3,zero
 4001738:	0013883a 	mov	r9,zero
 400173c:	40800d26 	beq	r8,r2,4001774 <__divdf3+0x204>
 4001740:	dbc00815 	stw	r15,32(sp)
 4001744:	db800715 	stw	r14,28(sp)
 4001748:	003fab06 	br	40015f8 <__divdf3+0x88>
 400174c:	343fc92e 	bgeu	r6,r16,4001674 <__divdf3+0x104>
 4001750:	3185883a 	add	r2,r6,r6
 4001754:	1189803a 	cmpltu	r4,r2,r6
 4001758:	39c7883a 	add	r3,r7,r7
 400175c:	20c9883a 	add	r4,r4,r3
 4001760:	297fffc4 	addi	r5,r5,-1
 4001764:	100d883a 	mov	r6,r2
 4001768:	200f883a 	mov	r7,r4
 400176c:	d9400615 	stw	r5,24(sp)
 4001770:	003fc006 	br	4001674 <__divdf3+0x104>
 4001774:	483ff21e 	bne	r9,zero,4001740 <__divdf3+0x1d0>
 4001778:	01004004 	movi	r4,256
 400177c:	7104703a 	and	r2,r14,r4
 4001780:	10c4b03a 	or	r2,r2,r3
 4001784:	103fee1e 	bne	r2,zero,4001740 <__divdf3+0x1d0>
 4001788:	31c4b03a 	or	r2,r6,r7
 400178c:	103fec26 	beq	r2,zero,4001740 <__divdf3+0x1d0>
 4001790:	7205883a 	add	r2,r14,r8
 4001794:	1391803a 	cmpltu	r8,r2,r14
 4001798:	43d1883a 	add	r8,r8,r15
 400179c:	013fc004 	movi	r4,-256
 40017a0:	111c703a 	and	r14,r2,r4
 40017a4:	401f883a 	mov	r15,r8
 40017a8:	003fe506 	br	4001740 <__divdf3+0x1d0>
 40017ac:	8009883a 	mov	r4,r16
 40017b0:	003f9206 	br	40015fc <__divdf3+0x8c>
 40017b4:	9809883a 	mov	r4,r19
 40017b8:	d8000715 	stw	zero,28(sp)
 40017bc:	d8000815 	stw	zero,32(sp)
 40017c0:	d8000615 	stw	zero,24(sp)
 40017c4:	003f8d06 	br	40015fc <__divdf3+0x8c>

040017c8 <__floatunsidf>:
 40017c8:	defff204 	addi	sp,sp,-56
 40017cc:	dfc00d15 	stw	ra,52(sp)
 40017d0:	ddc00c15 	stw	r23,48(sp)
 40017d4:	dd800b15 	stw	r22,44(sp)
 40017d8:	dd400a15 	stw	r21,40(sp)
 40017dc:	dd000915 	stw	r20,36(sp)
 40017e0:	dcc00815 	stw	r19,32(sp)
 40017e4:	dc800715 	stw	r18,28(sp)
 40017e8:	dc400615 	stw	r17,24(sp)
 40017ec:	dc000515 	stw	r16,20(sp)
 40017f0:	d8000115 	stw	zero,4(sp)
 40017f4:	20000f1e 	bne	r4,zero,4001834 <__floatunsidf+0x6c>
 40017f8:	00800084 	movi	r2,2
 40017fc:	d8800015 	stw	r2,0(sp)
 4001800:	d809883a 	mov	r4,sp
 4001804:	4001e080 	call	4001e08 <__pack_d>
 4001808:	dfc00d17 	ldw	ra,52(sp)
 400180c:	ddc00c17 	ldw	r23,48(sp)
 4001810:	dd800b17 	ldw	r22,44(sp)
 4001814:	dd400a17 	ldw	r21,40(sp)
 4001818:	dd000917 	ldw	r20,36(sp)
 400181c:	dcc00817 	ldw	r19,32(sp)
 4001820:	dc800717 	ldw	r18,28(sp)
 4001824:	dc400617 	ldw	r17,24(sp)
 4001828:	dc000517 	ldw	r16,20(sp)
 400182c:	dec00e04 	addi	sp,sp,56
 4001830:	f800283a 	ret
 4001834:	008000c4 	movi	r2,3
 4001838:	00c00f04 	movi	r3,60
 400183c:	002f883a 	mov	r23,zero
 4001840:	202d883a 	mov	r22,r4
 4001844:	d8800015 	stw	r2,0(sp)
 4001848:	d8c00215 	stw	r3,8(sp)
 400184c:	d9000315 	stw	r4,12(sp)
 4001850:	ddc00415 	stw	r23,16(sp)
 4001854:	4001ab80 	call	4001ab8 <__clzsi2>
 4001858:	12400744 	addi	r9,r2,29
 400185c:	48000b16 	blt	r9,zero,400188c <__floatunsidf+0xc4>
 4001860:	483fe726 	beq	r9,zero,4001800 <__floatunsidf+0x38>
 4001864:	10bfff44 	addi	r2,r2,-3
 4001868:	10002e16 	blt	r2,zero,4001924 <__floatunsidf+0x15c>
 400186c:	b0a2983a 	sll	r17,r22,r2
 4001870:	0021883a 	mov	r16,zero
 4001874:	d8800217 	ldw	r2,8(sp)
 4001878:	dc400415 	stw	r17,16(sp)
 400187c:	dc000315 	stw	r16,12(sp)
 4001880:	1245c83a 	sub	r2,r2,r9
 4001884:	d8800215 	stw	r2,8(sp)
 4001888:	003fdd06 	br	4001800 <__floatunsidf+0x38>
 400188c:	0255c83a 	sub	r10,zero,r9
 4001890:	51bff804 	addi	r6,r10,-32
 4001894:	30001b16 	blt	r6,zero,4001904 <__floatunsidf+0x13c>
 4001898:	b9a8d83a 	srl	r20,r23,r6
 400189c:	002b883a 	mov	r21,zero
 40018a0:	000f883a 	mov	r7,zero
 40018a4:	01000044 	movi	r4,1
 40018a8:	0011883a 	mov	r8,zero
 40018ac:	30002516 	blt	r6,zero,4001944 <__floatunsidf+0x17c>
 40018b0:	21a6983a 	sll	r19,r4,r6
 40018b4:	0025883a 	mov	r18,zero
 40018b8:	00bfffc4 	movi	r2,-1
 40018bc:	9089883a 	add	r4,r18,r2
 40018c0:	988b883a 	add	r5,r19,r2
 40018c4:	248d803a 	cmpltu	r6,r4,r18
 40018c8:	314b883a 	add	r5,r6,r5
 40018cc:	b104703a 	and	r2,r22,r4
 40018d0:	b946703a 	and	r3,r23,r5
 40018d4:	10c4b03a 	or	r2,r2,r3
 40018d8:	10000226 	beq	r2,zero,40018e4 <__floatunsidf+0x11c>
 40018dc:	01c00044 	movi	r7,1
 40018e0:	0011883a 	mov	r8,zero
 40018e4:	d9000217 	ldw	r4,8(sp)
 40018e8:	a1c4b03a 	or	r2,r20,r7
 40018ec:	aa06b03a 	or	r3,r21,r8
 40018f0:	2249c83a 	sub	r4,r4,r9
 40018f4:	d8c00415 	stw	r3,16(sp)
 40018f8:	d9000215 	stw	r4,8(sp)
 40018fc:	d8800315 	stw	r2,12(sp)
 4001900:	003fbf06 	br	4001800 <__floatunsidf+0x38>
 4001904:	bdc7883a 	add	r3,r23,r23
 4001908:	008007c4 	movi	r2,31
 400190c:	1285c83a 	sub	r2,r2,r10
 4001910:	1886983a 	sll	r3,r3,r2
 4001914:	b2a8d83a 	srl	r20,r22,r10
 4001918:	baaad83a 	srl	r21,r23,r10
 400191c:	1d28b03a 	or	r20,r3,r20
 4001920:	003fdf06 	br	40018a0 <__floatunsidf+0xd8>
 4001924:	b006d07a 	srli	r3,r22,1
 4001928:	008007c4 	movi	r2,31
 400192c:	1245c83a 	sub	r2,r2,r9
 4001930:	1886d83a 	srl	r3,r3,r2
 4001934:	ba62983a 	sll	r17,r23,r9
 4001938:	b260983a 	sll	r16,r22,r9
 400193c:	1c62b03a 	or	r17,r3,r17
 4001940:	003fcc06 	br	4001874 <__floatunsidf+0xac>
 4001944:	2006d07a 	srli	r3,r4,1
 4001948:	008007c4 	movi	r2,31
 400194c:	1285c83a 	sub	r2,r2,r10
 4001950:	18a6d83a 	srl	r19,r3,r2
 4001954:	22a4983a 	sll	r18,r4,r10
 4001958:	003fd706 	br	40018b8 <__floatunsidf+0xf0>

0400195c <__mulsi3>:
 400195c:	20000a26 	beq	r4,zero,4001988 <__mulsi3+0x2c>
 4001960:	0007883a 	mov	r3,zero
 4001964:	2080004c 	andi	r2,r4,1
 4001968:	1005003a 	cmpeq	r2,r2,zero
 400196c:	2008d07a 	srli	r4,r4,1
 4001970:	1000011e 	bne	r2,zero,4001978 <__mulsi3+0x1c>
 4001974:	1947883a 	add	r3,r3,r5
 4001978:	294b883a 	add	r5,r5,r5
 400197c:	203ff91e 	bne	r4,zero,4001964 <__mulsi3+0x8>
 4001980:	1805883a 	mov	r2,r3
 4001984:	f800283a 	ret
 4001988:	0007883a 	mov	r3,zero
 400198c:	1805883a 	mov	r2,r3
 4001990:	f800283a 	ret

04001994 <__muldi3>:
 4001994:	defff204 	addi	sp,sp,-56
 4001998:	df000c15 	stw	fp,48(sp)
 400199c:	3038d43a 	srli	fp,r6,16
 40019a0:	dd000815 	stw	r20,32(sp)
 40019a4:	dc400515 	stw	r17,20(sp)
 40019a8:	2028d43a 	srli	r20,r4,16
 40019ac:	247fffcc 	andi	r17,r4,65535
 40019b0:	dc000415 	stw	r16,16(sp)
 40019b4:	343fffcc 	andi	r16,r6,65535
 40019b8:	dcc00715 	stw	r19,28(sp)
 40019bc:	d9000015 	stw	r4,0(sp)
 40019c0:	2827883a 	mov	r19,r5
 40019c4:	8809883a 	mov	r4,r17
 40019c8:	d9400115 	stw	r5,4(sp)
 40019cc:	800b883a 	mov	r5,r16
 40019d0:	d9800215 	stw	r6,8(sp)
 40019d4:	dfc00d15 	stw	ra,52(sp)
 40019d8:	d9c00315 	stw	r7,12(sp)
 40019dc:	dd800a15 	stw	r22,40(sp)
 40019e0:	dd400915 	stw	r21,36(sp)
 40019e4:	302d883a 	mov	r22,r6
 40019e8:	ddc00b15 	stw	r23,44(sp)
 40019ec:	dc800615 	stw	r18,24(sp)
 40019f0:	400195c0 	call	400195c <__mulsi3>
 40019f4:	8809883a 	mov	r4,r17
 40019f8:	e00b883a 	mov	r5,fp
 40019fc:	102b883a 	mov	r21,r2
 4001a00:	400195c0 	call	400195c <__mulsi3>
 4001a04:	800b883a 	mov	r5,r16
 4001a08:	a009883a 	mov	r4,r20
 4001a0c:	1023883a 	mov	r17,r2
 4001a10:	400195c0 	call	400195c <__mulsi3>
 4001a14:	a009883a 	mov	r4,r20
 4001a18:	e00b883a 	mov	r5,fp
 4001a1c:	1021883a 	mov	r16,r2
 4001a20:	400195c0 	call	400195c <__mulsi3>
 4001a24:	a8ffffcc 	andi	r3,r21,65535
 4001a28:	a82ad43a 	srli	r21,r21,16
 4001a2c:	8c23883a 	add	r17,r17,r16
 4001a30:	1011883a 	mov	r8,r2
 4001a34:	ac6b883a 	add	r21,r21,r17
 4001a38:	a804943a 	slli	r2,r21,16
 4001a3c:	b009883a 	mov	r4,r22
 4001a40:	980b883a 	mov	r5,r19
 4001a44:	10c7883a 	add	r3,r2,r3
 4001a48:	a812d43a 	srli	r9,r21,16
 4001a4c:	180d883a 	mov	r6,r3
 4001a50:	ac00022e 	bgeu	r21,r16,4001a5c <__muldi3+0xc8>
 4001a54:	00800074 	movhi	r2,1
 4001a58:	4091883a 	add	r8,r8,r2
 4001a5c:	4267883a 	add	r19,r8,r9
 4001a60:	302d883a 	mov	r22,r6
 4001a64:	400195c0 	call	400195c <__mulsi3>
 4001a68:	d9400317 	ldw	r5,12(sp)
 4001a6c:	d9000017 	ldw	r4,0(sp)
 4001a70:	1023883a 	mov	r17,r2
 4001a74:	400195c0 	call	400195c <__mulsi3>
 4001a78:	14cb883a 	add	r5,r2,r19
 4001a7c:	894b883a 	add	r5,r17,r5
 4001a80:	b005883a 	mov	r2,r22
 4001a84:	2807883a 	mov	r3,r5
 4001a88:	dfc00d17 	ldw	ra,52(sp)
 4001a8c:	df000c17 	ldw	fp,48(sp)
 4001a90:	ddc00b17 	ldw	r23,44(sp)
 4001a94:	dd800a17 	ldw	r22,40(sp)
 4001a98:	dd400917 	ldw	r21,36(sp)
 4001a9c:	dd000817 	ldw	r20,32(sp)
 4001aa0:	dcc00717 	ldw	r19,28(sp)
 4001aa4:	dc800617 	ldw	r18,24(sp)
 4001aa8:	dc400517 	ldw	r17,20(sp)
 4001aac:	dc000417 	ldw	r16,16(sp)
 4001ab0:	dec00e04 	addi	sp,sp,56
 4001ab4:	f800283a 	ret

04001ab8 <__clzsi2>:
 4001ab8:	00bfffd4 	movui	r2,65535
 4001abc:	11000e36 	bltu	r2,r4,4001af8 <__clzsi2+0x40>
 4001ac0:	00803fc4 	movi	r2,255
 4001ac4:	01400204 	movi	r5,8
 4001ac8:	0007883a 	mov	r3,zero
 4001acc:	11001036 	bltu	r2,r4,4001b10 <__clzsi2+0x58>
 4001ad0:	000b883a 	mov	r5,zero
 4001ad4:	20c6d83a 	srl	r3,r4,r3
 4001ad8:	00810074 	movhi	r2,1025
 4001adc:	10a54b04 	addi	r2,r2,-27348
 4001ae0:	1887883a 	add	r3,r3,r2
 4001ae4:	18800003 	ldbu	r2,0(r3)
 4001ae8:	00c00804 	movi	r3,32
 4001aec:	2885883a 	add	r2,r5,r2
 4001af0:	1885c83a 	sub	r2,r3,r2
 4001af4:	f800283a 	ret
 4001af8:	01400404 	movi	r5,16
 4001afc:	00804034 	movhi	r2,256
 4001b00:	10bfffc4 	addi	r2,r2,-1
 4001b04:	2807883a 	mov	r3,r5
 4001b08:	113ff22e 	bgeu	r2,r4,4001ad4 <__clzsi2+0x1c>
 4001b0c:	01400604 	movi	r5,24
 4001b10:	2807883a 	mov	r3,r5
 4001b14:	20c6d83a 	srl	r3,r4,r3
 4001b18:	00810074 	movhi	r2,1025
 4001b1c:	10a54b04 	addi	r2,r2,-27348
 4001b20:	1887883a 	add	r3,r3,r2
 4001b24:	18800003 	ldbu	r2,0(r3)
 4001b28:	00c00804 	movi	r3,32
 4001b2c:	2885883a 	add	r2,r5,r2
 4001b30:	1885c83a 	sub	r2,r3,r2
 4001b34:	f800283a 	ret

04001b38 <__pack_f>:
 4001b38:	20c00017 	ldw	r3,0(r4)
 4001b3c:	01c00044 	movi	r7,1
 4001b40:	21800317 	ldw	r6,12(r4)
 4001b44:	21400117 	ldw	r5,4(r4)
 4001b48:	38c02d2e 	bgeu	r7,r3,4001c00 <__pack_f+0xc8>
 4001b4c:	00800104 	movi	r2,4
 4001b50:	18802826 	beq	r3,r2,4001bf4 <__pack_f+0xbc>
 4001b54:	00800084 	movi	r2,2
 4001b58:	18800126 	beq	r3,r2,4001b60 <__pack_f+0x28>
 4001b5c:	3000101e 	bne	r6,zero,4001ba0 <__pack_f+0x68>
 4001b60:	000d883a 	mov	r6,zero
 4001b64:	0007883a 	mov	r3,zero
 4001b68:	19003fcc 	andi	r4,r3,255
 4001b6c:	200895fa 	slli	r4,r4,23
 4001b70:	00c02034 	movhi	r3,128
 4001b74:	18ffffc4 	addi	r3,r3,-1
 4001b78:	30c6703a 	and	r3,r6,r3
 4001b7c:	10a0002c 	andhi	r2,r2,32768
 4001b80:	10c4b03a 	or	r2,r2,r3
 4001b84:	280a97fa 	slli	r5,r5,31
 4001b88:	1104b03a 	or	r2,r2,r4
 4001b8c:	00e00034 	movhi	r3,32768
 4001b90:	18ffffc4 	addi	r3,r3,-1
 4001b94:	10c4703a 	and	r2,r2,r3
 4001b98:	1144b03a 	or	r2,r2,r5
 4001b9c:	f800283a 	ret
 4001ba0:	21000217 	ldw	r4,8(r4)
 4001ba4:	00bfe084 	movi	r2,-126
 4001ba8:	20801b16 	blt	r4,r2,4001c18 <__pack_f+0xe0>
 4001bac:	00801fc4 	movi	r2,127
 4001bb0:	11001016 	blt	r2,r4,4001bf4 <__pack_f+0xbc>
 4001bb4:	308e703a 	and	r7,r6,r2
 4001bb8:	2087883a 	add	r3,r4,r2
 4001bbc:	00801004 	movi	r2,64
 4001bc0:	38800526 	beq	r7,r2,4001bd8 <__pack_f+0xa0>
 4001bc4:	31800fc4 	addi	r6,r6,63
 4001bc8:	30000716 	blt	r6,zero,4001be8 <__pack_f+0xb0>
 4001bcc:	300490ba 	slli	r2,r6,2
 4001bd0:	100cd27a 	srli	r6,r2,9
 4001bd4:	003fe406 	br	4001b68 <__pack_f+0x30>
 4001bd8:	3080200c 	andi	r2,r6,128
 4001bdc:	103ffa26 	beq	r2,zero,4001bc8 <__pack_f+0x90>
 4001be0:	31cd883a 	add	r6,r6,r7
 4001be4:	003ff806 	br	4001bc8 <__pack_f+0x90>
 4001be8:	300cd07a 	srli	r6,r6,1
 4001bec:	18c00044 	addi	r3,r3,1
 4001bf0:	003ff606 	br	4001bcc <__pack_f+0x94>
 4001bf4:	000d883a 	mov	r6,zero
 4001bf8:	00ffffc4 	movi	r3,-1
 4001bfc:	003fda06 	br	4001b68 <__pack_f+0x30>
 4001c00:	31800434 	orhi	r6,r6,16
 4001c04:	00802034 	movhi	r2,128
 4001c08:	10bfffc4 	addi	r2,r2,-1
 4001c0c:	308c703a 	and	r6,r6,r2
 4001c10:	00ffffc4 	movi	r3,-1
 4001c14:	003fd406 	br	4001b68 <__pack_f+0x30>
 4001c18:	1109c83a 	sub	r4,r2,r4
 4001c1c:	00800644 	movi	r2,25
 4001c20:	11001216 	blt	r2,r4,4001c6c <__pack_f+0x134>
 4001c24:	3904983a 	sll	r2,r7,r4
 4001c28:	3106d83a 	srl	r3,r6,r4
 4001c2c:	10bfffc4 	addi	r2,r2,-1
 4001c30:	3084703a 	and	r2,r6,r2
 4001c34:	1004c03a 	cmpne	r2,r2,zero
 4001c38:	1886b03a 	or	r3,r3,r2
 4001c3c:	19001fcc 	andi	r4,r3,127
 4001c40:	00801004 	movi	r2,64
 4001c44:	20800c26 	beq	r4,r2,4001c78 <__pack_f+0x140>
 4001c48:	18c00fc4 	addi	r3,r3,63
 4001c4c:	00900034 	movhi	r2,16384
 4001c50:	10bfffc4 	addi	r2,r2,-1
 4001c54:	180cd1fa 	srli	r6,r3,7
 4001c58:	10c7803a 	cmpltu	r3,r2,r3
 4001c5c:	00802034 	movhi	r2,128
 4001c60:	10bfffc4 	addi	r2,r2,-1
 4001c64:	308c703a 	and	r6,r6,r2
 4001c68:	003fbf06 	br	4001b68 <__pack_f+0x30>
 4001c6c:	0007883a 	mov	r3,zero
 4001c70:	000d883a 	mov	r6,zero
 4001c74:	003ff906 	br	4001c5c <__pack_f+0x124>
 4001c78:	1880200c 	andi	r2,r3,128
 4001c7c:	10000126 	beq	r2,zero,4001c84 <__pack_f+0x14c>
 4001c80:	1907883a 	add	r3,r3,r4
 4001c84:	180cd1fa 	srli	r6,r3,7
 4001c88:	00900034 	movhi	r2,16384
 4001c8c:	10bfffc4 	addi	r2,r2,-1
 4001c90:	10c7803a 	cmpltu	r3,r2,r3
 4001c94:	003ff106 	br	4001c5c <__pack_f+0x124>

04001c98 <__unpack_f>:
 4001c98:	21800017 	ldw	r6,0(r4)
 4001c9c:	00c02034 	movhi	r3,128
 4001ca0:	18ffffc4 	addi	r3,r3,-1
 4001ca4:	3004d5fa 	srli	r2,r6,23
 4001ca8:	3008d7fa 	srli	r4,r6,31
 4001cac:	30ce703a 	and	r7,r6,r3
 4001cb0:	10c03fcc 	andi	r3,r2,255
 4001cb4:	29000115 	stw	r4,4(r5)
 4001cb8:	1800131e 	bne	r3,zero,4001d08 <__unpack_f+0x70>
 4001cbc:	38000f26 	beq	r7,zero,4001cfc <__unpack_f+0x64>
 4001cc0:	380691fa 	slli	r3,r7,7
 4001cc4:	01bfe084 	movi	r6,-126
 4001cc8:	008000c4 	movi	r2,3
 4001ccc:	01100034 	movhi	r4,16384
 4001cd0:	213fffc4 	addi	r4,r4,-1
 4001cd4:	28800015 	stw	r2,0(r5)
 4001cd8:	29800215 	stw	r6,8(r5)
 4001cdc:	20c00536 	bltu	r4,r3,4001cf4 <__unpack_f+0x5c>
 4001ce0:	3005883a 	mov	r2,r6
 4001ce4:	18c7883a 	add	r3,r3,r3
 4001ce8:	10bfffc4 	addi	r2,r2,-1
 4001cec:	20fffd2e 	bgeu	r4,r3,4001ce4 <__unpack_f+0x4c>
 4001cf0:	28800215 	stw	r2,8(r5)
 4001cf4:	28c00315 	stw	r3,12(r5)
 4001cf8:	f800283a 	ret
 4001cfc:	00800084 	movi	r2,2
 4001d00:	28800015 	stw	r2,0(r5)
 4001d04:	f800283a 	ret
 4001d08:	00803fc4 	movi	r2,255
 4001d0c:	18800826 	beq	r3,r2,4001d30 <__unpack_f+0x98>
 4001d10:	380491fa 	slli	r2,r7,7
 4001d14:	18ffe044 	addi	r3,r3,-127
 4001d18:	28c00215 	stw	r3,8(r5)
 4001d1c:	10900034 	orhi	r2,r2,16384
 4001d20:	28800315 	stw	r2,12(r5)
 4001d24:	008000c4 	movi	r2,3
 4001d28:	28800015 	stw	r2,0(r5)
 4001d2c:	f800283a 	ret
 4001d30:	3800031e 	bne	r7,zero,4001d40 <__unpack_f+0xa8>
 4001d34:	00800104 	movi	r2,4
 4001d38:	28800015 	stw	r2,0(r5)
 4001d3c:	f800283a 	ret
 4001d40:	3080042c 	andhi	r2,r6,16
 4001d44:	10000426 	beq	r2,zero,4001d58 <__unpack_f+0xc0>
 4001d48:	00800044 	movi	r2,1
 4001d4c:	28800015 	stw	r2,0(r5)
 4001d50:	29c00315 	stw	r7,12(r5)
 4001d54:	f800283a 	ret
 4001d58:	28000015 	stw	zero,0(r5)
 4001d5c:	003ffc06 	br	4001d50 <__unpack_f+0xb8>

04001d60 <__fpcmp_parts_f>:
 4001d60:	21800017 	ldw	r6,0(r4)
 4001d64:	00c00044 	movi	r3,1
 4001d68:	19800a2e 	bgeu	r3,r6,4001d94 <__fpcmp_parts_f+0x34>
 4001d6c:	28800017 	ldw	r2,0(r5)
 4001d70:	1880082e 	bgeu	r3,r2,4001d94 <__fpcmp_parts_f+0x34>
 4001d74:	00c00104 	movi	r3,4
 4001d78:	30c01e26 	beq	r6,r3,4001df4 <__fpcmp_parts_f+0x94>
 4001d7c:	10c01a26 	beq	r2,r3,4001de8 <__fpcmp_parts_f+0x88>
 4001d80:	00c00084 	movi	r3,2
 4001d84:	30c00526 	beq	r6,r3,4001d9c <__fpcmp_parts_f+0x3c>
 4001d88:	10c0071e 	bne	r2,r3,4001da8 <__fpcmp_parts_f+0x48>
 4001d8c:	20800117 	ldw	r2,4(r4)
 4001d90:	1000091e 	bne	r2,zero,4001db8 <__fpcmp_parts_f+0x58>
 4001d94:	00800044 	movi	r2,1
 4001d98:	f800283a 	ret
 4001d9c:	10c0121e 	bne	r2,r3,4001de8 <__fpcmp_parts_f+0x88>
 4001da0:	0005883a 	mov	r2,zero
 4001da4:	f800283a 	ret
 4001da8:	20c00117 	ldw	r3,4(r4)
 4001dac:	28800117 	ldw	r2,4(r5)
 4001db0:	18800326 	beq	r3,r2,4001dc0 <__fpcmp_parts_f+0x60>
 4001db4:	183ff726 	beq	r3,zero,4001d94 <__fpcmp_parts_f+0x34>
 4001db8:	00bfffc4 	movi	r2,-1
 4001dbc:	f800283a 	ret
 4001dc0:	21800217 	ldw	r6,8(r4)
 4001dc4:	28800217 	ldw	r2,8(r5)
 4001dc8:	11bffa16 	blt	r2,r6,4001db4 <__fpcmp_parts_f+0x54>
 4001dcc:	30800416 	blt	r6,r2,4001de0 <__fpcmp_parts_f+0x80>
 4001dd0:	21000317 	ldw	r4,12(r4)
 4001dd4:	29400317 	ldw	r5,12(r5)
 4001dd8:	293ff636 	bltu	r5,r4,4001db4 <__fpcmp_parts_f+0x54>
 4001ddc:	217ff02e 	bgeu	r4,r5,4001da0 <__fpcmp_parts_f+0x40>
 4001de0:	183fec1e 	bne	r3,zero,4001d94 <__fpcmp_parts_f+0x34>
 4001de4:	003ff406 	br	4001db8 <__fpcmp_parts_f+0x58>
 4001de8:	28800117 	ldw	r2,4(r5)
 4001dec:	103fe91e 	bne	r2,zero,4001d94 <__fpcmp_parts_f+0x34>
 4001df0:	003ff106 	br	4001db8 <__fpcmp_parts_f+0x58>
 4001df4:	11bfe51e 	bne	r2,r6,4001d8c <__fpcmp_parts_f+0x2c>
 4001df8:	28c00117 	ldw	r3,4(r5)
 4001dfc:	20800117 	ldw	r2,4(r4)
 4001e00:	1885c83a 	sub	r2,r3,r2
 4001e04:	f800283a 	ret

04001e08 <__pack_d>:
 4001e08:	20c00017 	ldw	r3,0(r4)
 4001e0c:	defffd04 	addi	sp,sp,-12
 4001e10:	dc000015 	stw	r16,0(sp)
 4001e14:	dc800215 	stw	r18,8(sp)
 4001e18:	dc400115 	stw	r17,4(sp)
 4001e1c:	00800044 	movi	r2,1
 4001e20:	22000317 	ldw	r8,12(r4)
 4001e24:	001f883a 	mov	r15,zero
 4001e28:	22400417 	ldw	r9,16(r4)
 4001e2c:	24000117 	ldw	r16,4(r4)
 4001e30:	10c0552e 	bgeu	r2,r3,4001f88 <__pack_d+0x180>
 4001e34:	00800104 	movi	r2,4
 4001e38:	18804f26 	beq	r3,r2,4001f78 <__pack_d+0x170>
 4001e3c:	00800084 	movi	r2,2
 4001e40:	18800226 	beq	r3,r2,4001e4c <__pack_d+0x44>
 4001e44:	4244b03a 	or	r2,r8,r9
 4001e48:	10001a1e 	bne	r2,zero,4001eb4 <__pack_d+0xac>
 4001e4c:	000d883a 	mov	r6,zero
 4001e50:	000f883a 	mov	r7,zero
 4001e54:	0011883a 	mov	r8,zero
 4001e58:	00800434 	movhi	r2,16
 4001e5c:	10bfffc4 	addi	r2,r2,-1
 4001e60:	301d883a 	mov	r14,r6
 4001e64:	3884703a 	and	r2,r7,r2
 4001e68:	400a953a 	slli	r5,r8,20
 4001e6c:	79bffc2c 	andhi	r6,r15,65520
 4001e70:	308cb03a 	or	r6,r6,r2
 4001e74:	00e00434 	movhi	r3,32784
 4001e78:	18ffffc4 	addi	r3,r3,-1
 4001e7c:	800497fa 	slli	r2,r16,31
 4001e80:	30c6703a 	and	r3,r6,r3
 4001e84:	1946b03a 	or	r3,r3,r5
 4001e88:	01600034 	movhi	r5,32768
 4001e8c:	297fffc4 	addi	r5,r5,-1
 4001e90:	194a703a 	and	r5,r3,r5
 4001e94:	288ab03a 	or	r5,r5,r2
 4001e98:	2807883a 	mov	r3,r5
 4001e9c:	7005883a 	mov	r2,r14
 4001ea0:	dc800217 	ldw	r18,8(sp)
 4001ea4:	dc400117 	ldw	r17,4(sp)
 4001ea8:	dc000017 	ldw	r16,0(sp)
 4001eac:	dec00304 	addi	sp,sp,12
 4001eb0:	f800283a 	ret
 4001eb4:	21000217 	ldw	r4,8(r4)
 4001eb8:	00bf0084 	movi	r2,-1022
 4001ebc:	20803f16 	blt	r4,r2,4001fbc <__pack_d+0x1b4>
 4001ec0:	0080ffc4 	movi	r2,1023
 4001ec4:	11002c16 	blt	r2,r4,4001f78 <__pack_d+0x170>
 4001ec8:	00803fc4 	movi	r2,255
 4001ecc:	408c703a 	and	r6,r8,r2
 4001ed0:	00802004 	movi	r2,128
 4001ed4:	0007883a 	mov	r3,zero
 4001ed8:	000f883a 	mov	r7,zero
 4001edc:	2280ffc4 	addi	r10,r4,1023
 4001ee0:	30801e26 	beq	r6,r2,4001f5c <__pack_d+0x154>
 4001ee4:	00801fc4 	movi	r2,127
 4001ee8:	4089883a 	add	r4,r8,r2
 4001eec:	220d803a 	cmpltu	r6,r4,r8
 4001ef0:	324d883a 	add	r6,r6,r9
 4001ef4:	2011883a 	mov	r8,r4
 4001ef8:	3013883a 	mov	r9,r6
 4001efc:	00880034 	movhi	r2,8192
 4001f00:	10bfffc4 	addi	r2,r2,-1
 4001f04:	12400d36 	bltu	r2,r9,4001f3c <__pack_d+0x134>
 4001f08:	4804963a 	slli	r2,r9,24
 4001f0c:	400cd23a 	srli	r6,r8,8
 4001f10:	480ed23a 	srli	r7,r9,8
 4001f14:	013fffc4 	movi	r4,-1
 4001f18:	118cb03a 	or	r6,r2,r6
 4001f1c:	01400434 	movhi	r5,16
 4001f20:	297fffc4 	addi	r5,r5,-1
 4001f24:	3104703a 	and	r2,r6,r4
 4001f28:	3946703a 	and	r3,r7,r5
 4001f2c:	5201ffcc 	andi	r8,r10,2047
 4001f30:	100d883a 	mov	r6,r2
 4001f34:	180f883a 	mov	r7,r3
 4001f38:	003fc706 	br	4001e58 <__pack_d+0x50>
 4001f3c:	480897fa 	slli	r4,r9,31
 4001f40:	4004d07a 	srli	r2,r8,1
 4001f44:	4806d07a 	srli	r3,r9,1
 4001f48:	52800044 	addi	r10,r10,1
 4001f4c:	2084b03a 	or	r2,r4,r2
 4001f50:	1011883a 	mov	r8,r2
 4001f54:	1813883a 	mov	r9,r3
 4001f58:	003feb06 	br	4001f08 <__pack_d+0x100>
 4001f5c:	383fe11e 	bne	r7,zero,4001ee4 <__pack_d+0xdc>
 4001f60:	01004004 	movi	r4,256
 4001f64:	4104703a 	and	r2,r8,r4
 4001f68:	10c4b03a 	or	r2,r2,r3
 4001f6c:	103fe326 	beq	r2,zero,4001efc <__pack_d+0xf4>
 4001f70:	3005883a 	mov	r2,r6
 4001f74:	003fdc06 	br	4001ee8 <__pack_d+0xe0>
 4001f78:	000d883a 	mov	r6,zero
 4001f7c:	000f883a 	mov	r7,zero
 4001f80:	0201ffc4 	movi	r8,2047
 4001f84:	003fb406 	br	4001e58 <__pack_d+0x50>
 4001f88:	0005883a 	mov	r2,zero
 4001f8c:	00c00234 	movhi	r3,8
 4001f90:	408cb03a 	or	r6,r8,r2
 4001f94:	48ceb03a 	or	r7,r9,r3
 4001f98:	013fffc4 	movi	r4,-1
 4001f9c:	01400434 	movhi	r5,16
 4001fa0:	297fffc4 	addi	r5,r5,-1
 4001fa4:	3104703a 	and	r2,r6,r4
 4001fa8:	3946703a 	and	r3,r7,r5
 4001fac:	100d883a 	mov	r6,r2
 4001fb0:	180f883a 	mov	r7,r3
 4001fb4:	0201ffc4 	movi	r8,2047
 4001fb8:	003fa706 	br	4001e58 <__pack_d+0x50>
 4001fbc:	1109c83a 	sub	r4,r2,r4
 4001fc0:	00800e04 	movi	r2,56
 4001fc4:	11004316 	blt	r2,r4,40020d4 <__pack_d+0x2cc>
 4001fc8:	21fff804 	addi	r7,r4,-32
 4001fcc:	38004516 	blt	r7,zero,40020e4 <__pack_d+0x2dc>
 4001fd0:	49d8d83a 	srl	r12,r9,r7
 4001fd4:	001b883a 	mov	r13,zero
 4001fd8:	0023883a 	mov	r17,zero
 4001fdc:	01400044 	movi	r5,1
 4001fe0:	0025883a 	mov	r18,zero
 4001fe4:	38004716 	blt	r7,zero,4002104 <__pack_d+0x2fc>
 4001fe8:	29d6983a 	sll	r11,r5,r7
 4001fec:	0015883a 	mov	r10,zero
 4001ff0:	00bfffc4 	movi	r2,-1
 4001ff4:	5089883a 	add	r4,r10,r2
 4001ff8:	588b883a 	add	r5,r11,r2
 4001ffc:	228d803a 	cmpltu	r6,r4,r10
 4002000:	314b883a 	add	r5,r6,r5
 4002004:	4104703a 	and	r2,r8,r4
 4002008:	4946703a 	and	r3,r9,r5
 400200c:	10c4b03a 	or	r2,r2,r3
 4002010:	10000226 	beq	r2,zero,400201c <__pack_d+0x214>
 4002014:	04400044 	movi	r17,1
 4002018:	0025883a 	mov	r18,zero
 400201c:	00803fc4 	movi	r2,255
 4002020:	644eb03a 	or	r7,r12,r17
 4002024:	3892703a 	and	r9,r7,r2
 4002028:	00802004 	movi	r2,128
 400202c:	6c90b03a 	or	r8,r13,r18
 4002030:	0015883a 	mov	r10,zero
 4002034:	48801626 	beq	r9,r2,4002090 <__pack_d+0x288>
 4002038:	01001fc4 	movi	r4,127
 400203c:	3905883a 	add	r2,r7,r4
 4002040:	11cd803a 	cmpltu	r6,r2,r7
 4002044:	320d883a 	add	r6,r6,r8
 4002048:	100f883a 	mov	r7,r2
 400204c:	00840034 	movhi	r2,4096
 4002050:	10bfffc4 	addi	r2,r2,-1
 4002054:	3011883a 	mov	r8,r6
 4002058:	0007883a 	mov	r3,zero
 400205c:	11801b36 	bltu	r2,r6,40020cc <__pack_d+0x2c4>
 4002060:	4004963a 	slli	r2,r8,24
 4002064:	3808d23a 	srli	r4,r7,8
 4002068:	400ad23a 	srli	r5,r8,8
 400206c:	1813883a 	mov	r9,r3
 4002070:	1108b03a 	or	r4,r2,r4
 4002074:	00bfffc4 	movi	r2,-1
 4002078:	00c00434 	movhi	r3,16
 400207c:	18ffffc4 	addi	r3,r3,-1
 4002080:	208c703a 	and	r6,r4,r2
 4002084:	28ce703a 	and	r7,r5,r3
 4002088:	4a01ffcc 	andi	r8,r9,2047
 400208c:	003f7206 	br	4001e58 <__pack_d+0x50>
 4002090:	503fe91e 	bne	r10,zero,4002038 <__pack_d+0x230>
 4002094:	01004004 	movi	r4,256
 4002098:	3904703a 	and	r2,r7,r4
 400209c:	0007883a 	mov	r3,zero
 40020a0:	10c4b03a 	or	r2,r2,r3
 40020a4:	10000626 	beq	r2,zero,40020c0 <__pack_d+0x2b8>
 40020a8:	3a45883a 	add	r2,r7,r9
 40020ac:	11cd803a 	cmpltu	r6,r2,r7
 40020b0:	320d883a 	add	r6,r6,r8
 40020b4:	100f883a 	mov	r7,r2
 40020b8:	3011883a 	mov	r8,r6
 40020bc:	0007883a 	mov	r3,zero
 40020c0:	00840034 	movhi	r2,4096
 40020c4:	10bfffc4 	addi	r2,r2,-1
 40020c8:	123fe52e 	bgeu	r2,r8,4002060 <__pack_d+0x258>
 40020cc:	00c00044 	movi	r3,1
 40020d0:	003fe306 	br	4002060 <__pack_d+0x258>
 40020d4:	0009883a 	mov	r4,zero
 40020d8:	0013883a 	mov	r9,zero
 40020dc:	000b883a 	mov	r5,zero
 40020e0:	003fe406 	br	4002074 <__pack_d+0x26c>
 40020e4:	4a47883a 	add	r3,r9,r9
 40020e8:	008007c4 	movi	r2,31
 40020ec:	1105c83a 	sub	r2,r2,r4
 40020f0:	1886983a 	sll	r3,r3,r2
 40020f4:	4118d83a 	srl	r12,r8,r4
 40020f8:	491ad83a 	srl	r13,r9,r4
 40020fc:	1b18b03a 	or	r12,r3,r12
 4002100:	003fb506 	br	4001fd8 <__pack_d+0x1d0>
 4002104:	2806d07a 	srli	r3,r5,1
 4002108:	008007c4 	movi	r2,31
 400210c:	1105c83a 	sub	r2,r2,r4
 4002110:	1896d83a 	srl	r11,r3,r2
 4002114:	2914983a 	sll	r10,r5,r4
 4002118:	003fb506 	br	4001ff0 <__pack_d+0x1e8>

0400211c <__unpack_d>:
 400211c:	20c00117 	ldw	r3,4(r4)
 4002120:	22400017 	ldw	r9,0(r4)
 4002124:	00800434 	movhi	r2,16
 4002128:	10bfffc4 	addi	r2,r2,-1
 400212c:	1808d53a 	srli	r4,r3,20
 4002130:	180cd7fa 	srli	r6,r3,31
 4002134:	1894703a 	and	r10,r3,r2
 4002138:	2201ffcc 	andi	r8,r4,2047
 400213c:	281b883a 	mov	r13,r5
 4002140:	4817883a 	mov	r11,r9
 4002144:	29800115 	stw	r6,4(r5)
 4002148:	5019883a 	mov	r12,r10
 400214c:	40001e1e 	bne	r8,zero,40021c8 <__unpack_d+0xac>
 4002150:	4a84b03a 	or	r2,r9,r10
 4002154:	10001926 	beq	r2,zero,40021bc <__unpack_d+0xa0>
 4002158:	4804d63a 	srli	r2,r9,24
 400215c:	500c923a 	slli	r6,r10,8
 4002160:	013f0084 	movi	r4,-1022
 4002164:	00c40034 	movhi	r3,4096
 4002168:	18ffffc4 	addi	r3,r3,-1
 400216c:	118cb03a 	or	r6,r2,r6
 4002170:	008000c4 	movi	r2,3
 4002174:	480a923a 	slli	r5,r9,8
 4002178:	68800015 	stw	r2,0(r13)
 400217c:	69000215 	stw	r4,8(r13)
 4002180:	19800b36 	bltu	r3,r6,40021b0 <__unpack_d+0x94>
 4002184:	200f883a 	mov	r7,r4
 4002188:	1811883a 	mov	r8,r3
 400218c:	2945883a 	add	r2,r5,r5
 4002190:	1149803a 	cmpltu	r4,r2,r5
 4002194:	3187883a 	add	r3,r6,r6
 4002198:	20c9883a 	add	r4,r4,r3
 400219c:	100b883a 	mov	r5,r2
 40021a0:	200d883a 	mov	r6,r4
 40021a4:	39ffffc4 	addi	r7,r7,-1
 40021a8:	413ff82e 	bgeu	r8,r4,400218c <__unpack_d+0x70>
 40021ac:	69c00215 	stw	r7,8(r13)
 40021b0:	69800415 	stw	r6,16(r13)
 40021b4:	69400315 	stw	r5,12(r13)
 40021b8:	f800283a 	ret
 40021bc:	00800084 	movi	r2,2
 40021c0:	28800015 	stw	r2,0(r5)
 40021c4:	f800283a 	ret
 40021c8:	0081ffc4 	movi	r2,2047
 40021cc:	40800f26 	beq	r8,r2,400220c <__unpack_d+0xf0>
 40021d0:	480cd63a 	srli	r6,r9,24
 40021d4:	5006923a 	slli	r3,r10,8
 40021d8:	4804923a 	slli	r2,r9,8
 40021dc:	0009883a 	mov	r4,zero
 40021e0:	30c6b03a 	or	r3,r6,r3
 40021e4:	01440034 	movhi	r5,4096
 40021e8:	110cb03a 	or	r6,r2,r4
 40021ec:	423f0044 	addi	r8,r8,-1023
 40021f0:	194eb03a 	or	r7,r3,r5
 40021f4:	008000c4 	movi	r2,3
 40021f8:	69c00415 	stw	r7,16(r13)
 40021fc:	6a000215 	stw	r8,8(r13)
 4002200:	68800015 	stw	r2,0(r13)
 4002204:	69800315 	stw	r6,12(r13)
 4002208:	f800283a 	ret
 400220c:	4a84b03a 	or	r2,r9,r10
 4002210:	1000031e 	bne	r2,zero,4002220 <__unpack_d+0x104>
 4002214:	00800104 	movi	r2,4
 4002218:	28800015 	stw	r2,0(r5)
 400221c:	f800283a 	ret
 4002220:	0009883a 	mov	r4,zero
 4002224:	01400234 	movhi	r5,8
 4002228:	4904703a 	and	r2,r9,r4
 400222c:	5146703a 	and	r3,r10,r5
 4002230:	10c4b03a 	or	r2,r2,r3
 4002234:	10000526 	beq	r2,zero,400224c <__unpack_d+0x130>
 4002238:	00800044 	movi	r2,1
 400223c:	68800015 	stw	r2,0(r13)
 4002240:	6b000415 	stw	r12,16(r13)
 4002244:	6ac00315 	stw	r11,12(r13)
 4002248:	f800283a 	ret
 400224c:	68000015 	stw	zero,0(r13)
 4002250:	003ffb06 	br	4002240 <__unpack_d+0x124>

04002254 <gcvt>:
 4002254:	defff804 	addi	sp,sp,-32
 4002258:	0005883a 	mov	r2,zero
 400225c:	dcc00615 	stw	r19,24(sp)
 4002260:	dc800515 	stw	r18,20(sp)
 4002264:	3027883a 	mov	r19,r6
 4002268:	3825883a 	mov	r18,r7
 400226c:	100d883a 	mov	r6,r2
 4002270:	000f883a 	mov	r7,zero
 4002274:	dc400415 	stw	r17,16(sp)
 4002278:	dc000315 	stw	r16,12(sp)
 400227c:	dfc00715 	stw	ra,28(sp)
 4002280:	2021883a 	mov	r16,r4
 4002284:	2823883a 	mov	r17,r5
 4002288:	40074600 	call	4007460 <__ltdf2>
 400228c:	9007883a 	mov	r3,r18
 4002290:	10001516 	blt	r2,zero,40022e8 <gcvt+0x94>
 4002294:	00810074 	movhi	r2,1025
 4002298:	10a79404 	addi	r2,r2,-25008
 400229c:	11000017 	ldw	r4,0(r2)
 40022a0:	980f883a 	mov	r7,r19
 40022a4:	008019c4 	movi	r2,103
 40022a8:	880d883a 	mov	r6,r17
 40022ac:	800b883a 	mov	r5,r16
 40022b0:	d8c00015 	stw	r3,0(sp)
 40022b4:	d8800115 	stw	r2,4(sp)
 40022b8:	d8000215 	stw	zero,8(sp)
 40022bc:	4002f100 	call	4002f10 <_gcvt>
 40022c0:	900f883a 	mov	r7,r18
 40022c4:	10000d26 	beq	r2,zero,40022fc <gcvt+0xa8>
 40022c8:	3805883a 	mov	r2,r7
 40022cc:	dfc00717 	ldw	ra,28(sp)
 40022d0:	dcc00617 	ldw	r19,24(sp)
 40022d4:	dc800517 	ldw	r18,20(sp)
 40022d8:	dc400417 	ldw	r17,16(sp)
 40022dc:	dc000317 	ldw	r16,12(sp)
 40022e0:	dec00804 	addi	sp,sp,32
 40022e4:	f800283a 	ret
 40022e8:	00800b44 	movi	r2,45
 40022ec:	9cffffc4 	addi	r19,r19,-1
 40022f0:	90c00044 	addi	r3,r18,1
 40022f4:	90800005 	stb	r2,0(r18)
 40022f8:	003fe606 	br	4002294 <gcvt+0x40>
 40022fc:	000f883a 	mov	r7,zero
 4002300:	3805883a 	mov	r2,r7
 4002304:	dfc00717 	ldw	ra,28(sp)
 4002308:	dcc00617 	ldw	r19,24(sp)
 400230c:	dc800517 	ldw	r18,20(sp)
 4002310:	dc400417 	ldw	r17,16(sp)
 4002314:	dc000317 	ldw	r16,12(sp)
 4002318:	dec00804 	addi	sp,sp,32
 400231c:	f800283a 	ret

04002320 <gcvtf>:
 4002320:	defffd04 	addi	sp,sp,-12
 4002324:	dcc00115 	stw	r19,4(sp)
 4002328:	dc400015 	stw	r17,0(sp)
 400232c:	3027883a 	mov	r19,r6
 4002330:	2823883a 	mov	r17,r5
 4002334:	dfc00215 	stw	ra,8(sp)
 4002338:	4006e280 	call	4006e28 <__extendsfdf2>
 400233c:	180b883a 	mov	r5,r3
 4002340:	880d883a 	mov	r6,r17
 4002344:	980f883a 	mov	r7,r19
 4002348:	1009883a 	mov	r4,r2
 400234c:	dfc00217 	ldw	ra,8(sp)
 4002350:	dcc00117 	ldw	r19,4(sp)
 4002354:	dc400017 	ldw	r17,0(sp)
 4002358:	dec00304 	addi	sp,sp,12
 400235c:	40022541 	jmpi	4002254 <gcvt>

04002360 <ecvt>:
 4002360:	defffd04 	addi	sp,sp,-12
 4002364:	da000317 	ldw	r8,12(sp)
 4002368:	dfc00215 	stw	ra,8(sp)
 400236c:	d8000115 	stw	zero,4(sp)
 4002370:	da000015 	stw	r8,0(sp)
 4002374:	40034e80 	call	40034e8 <ecvtbuf>
 4002378:	dfc00217 	ldw	ra,8(sp)
 400237c:	dec00304 	addi	sp,sp,12
 4002380:	f800283a 	ret

04002384 <ecvtf>:
 4002384:	defffb04 	addi	sp,sp,-20
 4002388:	dfc00415 	stw	ra,16(sp)
 400238c:	dd400315 	stw	r21,12(sp)
 4002390:	dcc00215 	stw	r19,8(sp)
 4002394:	382b883a 	mov	r21,r7
 4002398:	3027883a 	mov	r19,r6
 400239c:	dc400115 	stw	r17,4(sp)
 40023a0:	2823883a 	mov	r17,r5
 40023a4:	4006e280 	call	4006e28 <__extendsfdf2>
 40023a8:	180b883a 	mov	r5,r3
 40023ac:	880d883a 	mov	r6,r17
 40023b0:	980f883a 	mov	r7,r19
 40023b4:	1009883a 	mov	r4,r2
 40023b8:	dd400015 	stw	r21,0(sp)
 40023bc:	40023600 	call	4002360 <ecvt>
 40023c0:	dfc00417 	ldw	ra,16(sp)
 40023c4:	dd400317 	ldw	r21,12(sp)
 40023c8:	dcc00217 	ldw	r19,8(sp)
 40023cc:	dc400117 	ldw	r17,4(sp)
 40023d0:	dec00504 	addi	sp,sp,20
 40023d4:	f800283a 	ret

040023d8 <fcvt>:
 40023d8:	defffd04 	addi	sp,sp,-12
 40023dc:	da000317 	ldw	r8,12(sp)
 40023e0:	dfc00215 	stw	ra,8(sp)
 40023e4:	d8000115 	stw	zero,4(sp)
 40023e8:	da000015 	stw	r8,0(sp)
 40023ec:	40036300 	call	4003630 <fcvtbuf>
 40023f0:	dfc00217 	ldw	ra,8(sp)
 40023f4:	dec00304 	addi	sp,sp,12
 40023f8:	f800283a 	ret

040023fc <fcvtf>:
 40023fc:	defffb04 	addi	sp,sp,-20
 4002400:	dfc00415 	stw	ra,16(sp)
 4002404:	dd400315 	stw	r21,12(sp)
 4002408:	dcc00215 	stw	r19,8(sp)
 400240c:	382b883a 	mov	r21,r7
 4002410:	3027883a 	mov	r19,r6
 4002414:	dc400115 	stw	r17,4(sp)
 4002418:	2823883a 	mov	r17,r5
 400241c:	4006e280 	call	4006e28 <__extendsfdf2>
 4002420:	180b883a 	mov	r5,r3
 4002424:	880d883a 	mov	r6,r17
 4002428:	980f883a 	mov	r7,r19
 400242c:	1009883a 	mov	r4,r2
 4002430:	dd400015 	stw	r21,0(sp)
 4002434:	40023d80 	call	40023d8 <fcvt>
 4002438:	dfc00417 	ldw	ra,16(sp)
 400243c:	dd400317 	ldw	r21,12(sp)
 4002440:	dcc00217 	ldw	r19,8(sp)
 4002444:	dc400117 	ldw	r17,4(sp)
 4002448:	dec00504 	addi	sp,sp,20
 400244c:	f800283a 	ret

04002450 <free>:
 4002450:	00810074 	movhi	r2,1025
 4002454:	10a79404 	addi	r2,r2,-25008
 4002458:	200b883a 	mov	r5,r4
 400245c:	11000017 	ldw	r4,0(r2)
 4002460:	40039041 	jmpi	4003904 <_free_r>

04002464 <malloc>:
 4002464:	00810074 	movhi	r2,1025
 4002468:	10a79404 	addi	r2,r2,-25008
 400246c:	200b883a 	mov	r5,r4
 4002470:	11000017 	ldw	r4,0(r2)
 4002474:	40024781 	jmpi	4002478 <_malloc_r>

04002478 <_malloc_r>:
 4002478:	defff604 	addi	sp,sp,-40
 400247c:	28c002c4 	addi	r3,r5,11
 4002480:	00800584 	movi	r2,22
 4002484:	dc800215 	stw	r18,8(sp)
 4002488:	dfc00915 	stw	ra,36(sp)
 400248c:	df000815 	stw	fp,32(sp)
 4002490:	ddc00715 	stw	r23,28(sp)
 4002494:	dd800615 	stw	r22,24(sp)
 4002498:	dd400515 	stw	r21,20(sp)
 400249c:	dd000415 	stw	r20,16(sp)
 40024a0:	dcc00315 	stw	r19,12(sp)
 40024a4:	dc400115 	stw	r17,4(sp)
 40024a8:	dc000015 	stw	r16,0(sp)
 40024ac:	2025883a 	mov	r18,r4
 40024b0:	10c01236 	bltu	r2,r3,40024fc <_malloc_r+0x84>
 40024b4:	04400404 	movi	r17,16
 40024b8:	8940142e 	bgeu	r17,r5,400250c <_malloc_r+0x94>
 40024bc:	00800304 	movi	r2,12
 40024c0:	0007883a 	mov	r3,zero
 40024c4:	90800015 	stw	r2,0(r18)
 40024c8:	1805883a 	mov	r2,r3
 40024cc:	dfc00917 	ldw	ra,36(sp)
 40024d0:	df000817 	ldw	fp,32(sp)
 40024d4:	ddc00717 	ldw	r23,28(sp)
 40024d8:	dd800617 	ldw	r22,24(sp)
 40024dc:	dd400517 	ldw	r21,20(sp)
 40024e0:	dd000417 	ldw	r20,16(sp)
 40024e4:	dcc00317 	ldw	r19,12(sp)
 40024e8:	dc800217 	ldw	r18,8(sp)
 40024ec:	dc400117 	ldw	r17,4(sp)
 40024f0:	dc000017 	ldw	r16,0(sp)
 40024f4:	dec00a04 	addi	sp,sp,40
 40024f8:	f800283a 	ret
 40024fc:	00bffe04 	movi	r2,-8
 4002500:	18a2703a 	and	r17,r3,r2
 4002504:	883fed16 	blt	r17,zero,40024bc <_malloc_r+0x44>
 4002508:	897fec36 	bltu	r17,r5,40024bc <_malloc_r+0x44>
 400250c:	9009883a 	mov	r4,r18
 4002510:	4007ad40 	call	4007ad4 <__malloc_lock>
 4002514:	00807dc4 	movi	r2,503
 4002518:	14402b2e 	bgeu	r2,r17,40025c8 <_malloc_r+0x150>
 400251c:	8806d27a 	srli	r3,r17,9
 4002520:	18003f1e 	bne	r3,zero,4002620 <_malloc_r+0x1a8>
 4002524:	880cd0fa 	srli	r6,r17,3
 4002528:	300490fa 	slli	r2,r6,3
 400252c:	02c10074 	movhi	r11,1025
 4002530:	5ae61d04 	addi	r11,r11,-26508
 4002534:	12cb883a 	add	r5,r2,r11
 4002538:	2c000317 	ldw	r16,12(r5)
 400253c:	580f883a 	mov	r7,r11
 4002540:	2c00041e 	bne	r5,r16,4002554 <_malloc_r+0xdc>
 4002544:	00000a06 	br	4002570 <_malloc_r+0xf8>
 4002548:	1800860e 	bge	r3,zero,4002764 <_malloc_r+0x2ec>
 400254c:	84000317 	ldw	r16,12(r16)
 4002550:	2c000726 	beq	r5,r16,4002570 <_malloc_r+0xf8>
 4002554:	80800117 	ldw	r2,4(r16)
 4002558:	00ffff04 	movi	r3,-4
 400255c:	10c8703a 	and	r4,r2,r3
 4002560:	2447c83a 	sub	r3,r4,r17
 4002564:	008003c4 	movi	r2,15
 4002568:	10fff70e 	bge	r2,r3,4002548 <_malloc_r+0xd0>
 400256c:	31bfffc4 	addi	r6,r6,-1
 4002570:	32400044 	addi	r9,r6,1
 4002574:	02810074 	movhi	r10,1025
 4002578:	52a61f04 	addi	r10,r10,-26500
 400257c:	54000217 	ldw	r16,8(r10)
 4002580:	8280a026 	beq	r16,r10,4002804 <_malloc_r+0x38c>
 4002584:	80800117 	ldw	r2,4(r16)
 4002588:	00ffff04 	movi	r3,-4
 400258c:	10ca703a 	and	r5,r2,r3
 4002590:	2c4dc83a 	sub	r6,r5,r17
 4002594:	008003c4 	movi	r2,15
 4002598:	11808316 	blt	r2,r6,40027a8 <_malloc_r+0x330>
 400259c:	52800315 	stw	r10,12(r10)
 40025a0:	52800215 	stw	r10,8(r10)
 40025a4:	30002916 	blt	r6,zero,400264c <_malloc_r+0x1d4>
 40025a8:	8147883a 	add	r3,r16,r5
 40025ac:	18800117 	ldw	r2,4(r3)
 40025b0:	9009883a 	mov	r4,r18
 40025b4:	10800054 	ori	r2,r2,1
 40025b8:	18800115 	stw	r2,4(r3)
 40025bc:	4007af40 	call	4007af4 <__malloc_unlock>
 40025c0:	80c00204 	addi	r3,r16,8
 40025c4:	003fc006 	br	40024c8 <_malloc_r+0x50>
 40025c8:	02c10074 	movhi	r11,1025
 40025cc:	5ae61d04 	addi	r11,r11,-26508
 40025d0:	8ac5883a 	add	r2,r17,r11
 40025d4:	14000317 	ldw	r16,12(r2)
 40025d8:	580f883a 	mov	r7,r11
 40025dc:	8806d0fa 	srli	r3,r17,3
 40025e0:	14006c26 	beq	r2,r16,4002794 <_malloc_r+0x31c>
 40025e4:	80c00117 	ldw	r3,4(r16)
 40025e8:	00bfff04 	movi	r2,-4
 40025ec:	81800317 	ldw	r6,12(r16)
 40025f0:	1886703a 	and	r3,r3,r2
 40025f4:	80c7883a 	add	r3,r16,r3
 40025f8:	18800117 	ldw	r2,4(r3)
 40025fc:	81400217 	ldw	r5,8(r16)
 4002600:	9009883a 	mov	r4,r18
 4002604:	10800054 	ori	r2,r2,1
 4002608:	18800115 	stw	r2,4(r3)
 400260c:	31400215 	stw	r5,8(r6)
 4002610:	29800315 	stw	r6,12(r5)
 4002614:	4007af40 	call	4007af4 <__malloc_unlock>
 4002618:	80c00204 	addi	r3,r16,8
 400261c:	003faa06 	br	40024c8 <_malloc_r+0x50>
 4002620:	00800104 	movi	r2,4
 4002624:	10c0052e 	bgeu	r2,r3,400263c <_malloc_r+0x1c4>
 4002628:	00800504 	movi	r2,20
 400262c:	10c07836 	bltu	r2,r3,4002810 <_malloc_r+0x398>
 4002630:	198016c4 	addi	r6,r3,91
 4002634:	300490fa 	slli	r2,r6,3
 4002638:	003fbc06 	br	400252c <_malloc_r+0xb4>
 400263c:	8804d1ba 	srli	r2,r17,6
 4002640:	11800e04 	addi	r6,r2,56
 4002644:	300490fa 	slli	r2,r6,3
 4002648:	003fb806 	br	400252c <_malloc_r+0xb4>
 400264c:	00807fc4 	movi	r2,511
 4002650:	1140bb36 	bltu	r2,r5,4002940 <_malloc_r+0x4c8>
 4002654:	2806d0fa 	srli	r3,r5,3
 4002658:	573ffe04 	addi	fp,r10,-8
 400265c:	00800044 	movi	r2,1
 4002660:	180890fa 	slli	r4,r3,3
 4002664:	1807d0ba 	srai	r3,r3,2
 4002668:	e1c00117 	ldw	r7,4(fp)
 400266c:	5909883a 	add	r4,r11,r4
 4002670:	21400217 	ldw	r5,8(r4)
 4002674:	10c4983a 	sll	r2,r2,r3
 4002678:	81000315 	stw	r4,12(r16)
 400267c:	81400215 	stw	r5,8(r16)
 4002680:	388eb03a 	or	r7,r7,r2
 4002684:	2c000315 	stw	r16,12(r5)
 4002688:	24000215 	stw	r16,8(r4)
 400268c:	e1c00115 	stw	r7,4(fp)
 4002690:	4807883a 	mov	r3,r9
 4002694:	4800cd16 	blt	r9,zero,40029cc <_malloc_r+0x554>
 4002698:	1807d0ba 	srai	r3,r3,2
 400269c:	00800044 	movi	r2,1
 40026a0:	10c8983a 	sll	r4,r2,r3
 40026a4:	39004436 	bltu	r7,r4,40027b8 <_malloc_r+0x340>
 40026a8:	21c4703a 	and	r2,r4,r7
 40026ac:	10000a1e 	bne	r2,zero,40026d8 <_malloc_r+0x260>
 40026b0:	2109883a 	add	r4,r4,r4
 40026b4:	00bfff04 	movi	r2,-4
 40026b8:	4884703a 	and	r2,r9,r2
 40026bc:	3906703a 	and	r3,r7,r4
 40026c0:	12400104 	addi	r9,r2,4
 40026c4:	1800041e 	bne	r3,zero,40026d8 <_malloc_r+0x260>
 40026c8:	2109883a 	add	r4,r4,r4
 40026cc:	3904703a 	and	r2,r7,r4
 40026d0:	4a400104 	addi	r9,r9,4
 40026d4:	103ffc26 	beq	r2,zero,40026c8 <_malloc_r+0x250>
 40026d8:	480490fa 	slli	r2,r9,3
 40026dc:	4819883a 	mov	r12,r9
 40026e0:	023fff04 	movi	r8,-4
 40026e4:	589b883a 	add	r13,r11,r2
 40026e8:	6807883a 	mov	r3,r13
 40026ec:	014003c4 	movi	r5,15
 40026f0:	1c000317 	ldw	r16,12(r3)
 40026f4:	1c00041e 	bne	r3,r16,4002708 <_malloc_r+0x290>
 40026f8:	0000a706 	br	4002998 <_malloc_r+0x520>
 40026fc:	3000ab0e 	bge	r6,zero,40029ac <_malloc_r+0x534>
 4002700:	84000317 	ldw	r16,12(r16)
 4002704:	1c00a426 	beq	r3,r16,4002998 <_malloc_r+0x520>
 4002708:	80800117 	ldw	r2,4(r16)
 400270c:	1204703a 	and	r2,r2,r8
 4002710:	144dc83a 	sub	r6,r2,r17
 4002714:	29bff90e 	bge	r5,r6,40026fc <_malloc_r+0x284>
 4002718:	81000317 	ldw	r4,12(r16)
 400271c:	80c00217 	ldw	r3,8(r16)
 4002720:	89400054 	ori	r5,r17,1
 4002724:	8445883a 	add	r2,r16,r17
 4002728:	20c00215 	stw	r3,8(r4)
 400272c:	19000315 	stw	r4,12(r3)
 4002730:	81400115 	stw	r5,4(r16)
 4002734:	1187883a 	add	r3,r2,r6
 4002738:	31000054 	ori	r4,r6,1
 400273c:	50800315 	stw	r2,12(r10)
 4002740:	50800215 	stw	r2,8(r10)
 4002744:	19800015 	stw	r6,0(r3)
 4002748:	11000115 	stw	r4,4(r2)
 400274c:	12800215 	stw	r10,8(r2)
 4002750:	12800315 	stw	r10,12(r2)
 4002754:	9009883a 	mov	r4,r18
 4002758:	4007af40 	call	4007af4 <__malloc_unlock>
 400275c:	80c00204 	addi	r3,r16,8
 4002760:	003f5906 	br	40024c8 <_malloc_r+0x50>
 4002764:	8109883a 	add	r4,r16,r4
 4002768:	20800117 	ldw	r2,4(r4)
 400276c:	80c00217 	ldw	r3,8(r16)
 4002770:	81400317 	ldw	r5,12(r16)
 4002774:	10800054 	ori	r2,r2,1
 4002778:	20800115 	stw	r2,4(r4)
 400277c:	28c00215 	stw	r3,8(r5)
 4002780:	19400315 	stw	r5,12(r3)
 4002784:	9009883a 	mov	r4,r18
 4002788:	4007af40 	call	4007af4 <__malloc_unlock>
 400278c:	80c00204 	addi	r3,r16,8
 4002790:	003f4d06 	br	40024c8 <_malloc_r+0x50>
 4002794:	80800204 	addi	r2,r16,8
 4002798:	14000317 	ldw	r16,12(r2)
 400279c:	143f911e 	bne	r2,r16,40025e4 <_malloc_r+0x16c>
 40027a0:	1a400084 	addi	r9,r3,2
 40027a4:	003f7306 	br	4002574 <_malloc_r+0xfc>
 40027a8:	88c00054 	ori	r3,r17,1
 40027ac:	8445883a 	add	r2,r16,r17
 40027b0:	80c00115 	stw	r3,4(r16)
 40027b4:	003fdf06 	br	4002734 <_malloc_r+0x2bc>
 40027b8:	e4000217 	ldw	r16,8(fp)
 40027bc:	00bfff04 	movi	r2,-4
 40027c0:	80c00117 	ldw	r3,4(r16)
 40027c4:	802d883a 	mov	r22,r16
 40027c8:	18aa703a 	and	r21,r3,r2
 40027cc:	ac401636 	bltu	r21,r17,4002828 <_malloc_r+0x3b0>
 40027d0:	ac49c83a 	sub	r4,r21,r17
 40027d4:	008003c4 	movi	r2,15
 40027d8:	1100130e 	bge	r2,r4,4002828 <_malloc_r+0x3b0>
 40027dc:	88800054 	ori	r2,r17,1
 40027e0:	8447883a 	add	r3,r16,r17
 40027e4:	80800115 	stw	r2,4(r16)
 40027e8:	20800054 	ori	r2,r4,1
 40027ec:	18800115 	stw	r2,4(r3)
 40027f0:	e0c00215 	stw	r3,8(fp)
 40027f4:	9009883a 	mov	r4,r18
 40027f8:	4007af40 	call	4007af4 <__malloc_unlock>
 40027fc:	80c00204 	addi	r3,r16,8
 4002800:	003f3106 	br	40024c8 <_malloc_r+0x50>
 4002804:	39c00117 	ldw	r7,4(r7)
 4002808:	573ffe04 	addi	fp,r10,-8
 400280c:	003fa006 	br	4002690 <_malloc_r+0x218>
 4002810:	00801504 	movi	r2,84
 4002814:	10c06736 	bltu	r2,r3,40029b4 <_malloc_r+0x53c>
 4002818:	8804d33a 	srli	r2,r17,12
 400281c:	11801b84 	addi	r6,r2,110
 4002820:	300490fa 	slli	r2,r6,3
 4002824:	003f4106 	br	400252c <_malloc_r+0xb4>
 4002828:	d0a1cc17 	ldw	r2,-30928(gp)
 400282c:	d0e00317 	ldw	r3,-32756(gp)
 4002830:	053fffc4 	movi	r20,-1
 4002834:	10800404 	addi	r2,r2,16
 4002838:	88a7883a 	add	r19,r17,r2
 400283c:	1d000326 	beq	r3,r20,400284c <_malloc_r+0x3d4>
 4002840:	98c01fc4 	addi	r3,r19,127
 4002844:	00bfe004 	movi	r2,-128
 4002848:	18a6703a 	and	r19,r3,r2
 400284c:	9009883a 	mov	r4,r18
 4002850:	980b883a 	mov	r5,r19
 4002854:	4002c7c0 	call	4002c7c <_sbrk_r>
 4002858:	1009883a 	mov	r4,r2
 400285c:	15000426 	beq	r2,r20,4002870 <_malloc_r+0x3f8>
 4002860:	854b883a 	add	r5,r16,r21
 4002864:	1029883a 	mov	r20,r2
 4002868:	11405a2e 	bgeu	r2,r5,40029d4 <_malloc_r+0x55c>
 400286c:	87000c26 	beq	r16,fp,40028a0 <_malloc_r+0x428>
 4002870:	e4000217 	ldw	r16,8(fp)
 4002874:	80c00117 	ldw	r3,4(r16)
 4002878:	00bfff04 	movi	r2,-4
 400287c:	1884703a 	and	r2,r3,r2
 4002880:	14400336 	bltu	r2,r17,4002890 <_malloc_r+0x418>
 4002884:	1449c83a 	sub	r4,r2,r17
 4002888:	008003c4 	movi	r2,15
 400288c:	113fd316 	blt	r2,r4,40027dc <_malloc_r+0x364>
 4002890:	9009883a 	mov	r4,r18
 4002894:	4007af40 	call	4007af4 <__malloc_unlock>
 4002898:	0007883a 	mov	r3,zero
 400289c:	003f0a06 	br	40024c8 <_malloc_r+0x50>
 40028a0:	05c10074 	movhi	r23,1025
 40028a4:	bde96a04 	addi	r23,r23,-23128
 40028a8:	b8800017 	ldw	r2,0(r23)
 40028ac:	988d883a 	add	r6,r19,r2
 40028b0:	b9800015 	stw	r6,0(r23)
 40028b4:	d0e00317 	ldw	r3,-32756(gp)
 40028b8:	00bfffc4 	movi	r2,-1
 40028bc:	18808e26 	beq	r3,r2,4002af8 <_malloc_r+0x680>
 40028c0:	2145c83a 	sub	r2,r4,r5
 40028c4:	3085883a 	add	r2,r6,r2
 40028c8:	b8800015 	stw	r2,0(r23)
 40028cc:	20c001cc 	andi	r3,r4,7
 40028d0:	18005f1e 	bne	r3,zero,4002a50 <_malloc_r+0x5d8>
 40028d4:	000b883a 	mov	r5,zero
 40028d8:	a4c5883a 	add	r2,r20,r19
 40028dc:	10801fcc 	andi	r2,r2,127
 40028e0:	00c02004 	movi	r3,128
 40028e4:	1887c83a 	sub	r3,r3,r2
 40028e8:	28e7883a 	add	r19,r5,r3
 40028ec:	9009883a 	mov	r4,r18
 40028f0:	980b883a 	mov	r5,r19
 40028f4:	4002c7c0 	call	4002c7c <_sbrk_r>
 40028f8:	1007883a 	mov	r3,r2
 40028fc:	00bfffc4 	movi	r2,-1
 4002900:	18807a26 	beq	r3,r2,4002aec <_malloc_r+0x674>
 4002904:	1d05c83a 	sub	r2,r3,r20
 4002908:	9885883a 	add	r2,r19,r2
 400290c:	10c00054 	ori	r3,r2,1
 4002910:	b8800017 	ldw	r2,0(r23)
 4002914:	a021883a 	mov	r16,r20
 4002918:	a0c00115 	stw	r3,4(r20)
 400291c:	9885883a 	add	r2,r19,r2
 4002920:	b8800015 	stw	r2,0(r23)
 4002924:	e5000215 	stw	r20,8(fp)
 4002928:	b7003626 	beq	r22,fp,4002a04 <_malloc_r+0x58c>
 400292c:	018003c4 	movi	r6,15
 4002930:	35404b36 	bltu	r6,r21,4002a60 <_malloc_r+0x5e8>
 4002934:	00800044 	movi	r2,1
 4002938:	a0800115 	stw	r2,4(r20)
 400293c:	003fcd06 	br	4002874 <_malloc_r+0x3fc>
 4002940:	2808d27a 	srli	r4,r5,9
 4002944:	2000371e 	bne	r4,zero,4002a24 <_malloc_r+0x5ac>
 4002948:	2808d0fa 	srli	r4,r5,3
 400294c:	200690fa 	slli	r3,r4,3
 4002950:	58d1883a 	add	r8,r11,r3
 4002954:	41800217 	ldw	r6,8(r8)
 4002958:	41805b26 	beq	r8,r6,4002ac8 <_malloc_r+0x650>
 400295c:	30800117 	ldw	r2,4(r6)
 4002960:	00ffff04 	movi	r3,-4
 4002964:	10c4703a 	and	r2,r2,r3
 4002968:	2880022e 	bgeu	r5,r2,4002974 <_malloc_r+0x4fc>
 400296c:	31800217 	ldw	r6,8(r6)
 4002970:	41bffa1e 	bne	r8,r6,400295c <_malloc_r+0x4e4>
 4002974:	32000317 	ldw	r8,12(r6)
 4002978:	39c00117 	ldw	r7,4(r7)
 400297c:	82000315 	stw	r8,12(r16)
 4002980:	81800215 	stw	r6,8(r16)
 4002984:	07010074 	movhi	fp,1025
 4002988:	e7261d04 	addi	fp,fp,-26508
 400298c:	34000315 	stw	r16,12(r6)
 4002990:	44000215 	stw	r16,8(r8)
 4002994:	003f3e06 	br	4002690 <_malloc_r+0x218>
 4002998:	63000044 	addi	r12,r12,1
 400299c:	608000cc 	andi	r2,r12,3
 40029a0:	10005d26 	beq	r2,zero,4002b18 <_malloc_r+0x6a0>
 40029a4:	18c00204 	addi	r3,r3,8
 40029a8:	003f5106 	br	40026f0 <_malloc_r+0x278>
 40029ac:	8089883a 	add	r4,r16,r2
 40029b0:	003f6d06 	br	4002768 <_malloc_r+0x2f0>
 40029b4:	00805504 	movi	r2,340
 40029b8:	10c02036 	bltu	r2,r3,4002a3c <_malloc_r+0x5c4>
 40029bc:	8804d3fa 	srli	r2,r17,15
 40029c0:	11801dc4 	addi	r6,r2,119
 40029c4:	300490fa 	slli	r2,r6,3
 40029c8:	003ed806 	br	400252c <_malloc_r+0xb4>
 40029cc:	48c000c4 	addi	r3,r9,3
 40029d0:	003f3106 	br	4002698 <_malloc_r+0x220>
 40029d4:	05c10074 	movhi	r23,1025
 40029d8:	bde96a04 	addi	r23,r23,-23128
 40029dc:	b8800017 	ldw	r2,0(r23)
 40029e0:	988d883a 	add	r6,r19,r2
 40029e4:	b9800015 	stw	r6,0(r23)
 40029e8:	293fb21e 	bne	r5,r4,40028b4 <_malloc_r+0x43c>
 40029ec:	20801fcc 	andi	r2,r4,127
 40029f0:	103fb01e 	bne	r2,zero,40028b4 <_malloc_r+0x43c>
 40029f4:	e4000217 	ldw	r16,8(fp)
 40029f8:	9d45883a 	add	r2,r19,r21
 40029fc:	10800054 	ori	r2,r2,1
 4002a00:	80800115 	stw	r2,4(r16)
 4002a04:	b8c00017 	ldw	r3,0(r23)
 4002a08:	d0a1cd17 	ldw	r2,-30924(gp)
 4002a0c:	10c0012e 	bgeu	r2,r3,4002a14 <_malloc_r+0x59c>
 4002a10:	d0e1cd15 	stw	r3,-30924(gp)
 4002a14:	d0a1ce17 	ldw	r2,-30920(gp)
 4002a18:	10ff962e 	bgeu	r2,r3,4002874 <_malloc_r+0x3fc>
 4002a1c:	d0e1ce15 	stw	r3,-30920(gp)
 4002a20:	003f9406 	br	4002874 <_malloc_r+0x3fc>
 4002a24:	00800104 	movi	r2,4
 4002a28:	11001e36 	bltu	r2,r4,4002aa4 <_malloc_r+0x62c>
 4002a2c:	2804d1ba 	srli	r2,r5,6
 4002a30:	11000e04 	addi	r4,r2,56
 4002a34:	200690fa 	slli	r3,r4,3
 4002a38:	003fc506 	br	4002950 <_malloc_r+0x4d8>
 4002a3c:	00815504 	movi	r2,1364
 4002a40:	10c01d2e 	bgeu	r2,r3,4002ab8 <_malloc_r+0x640>
 4002a44:	01801f84 	movi	r6,126
 4002a48:	0080fc04 	movi	r2,1008
 4002a4c:	003eb706 	br	400252c <_malloc_r+0xb4>
 4002a50:	00800204 	movi	r2,8
 4002a54:	10cbc83a 	sub	r5,r2,r3
 4002a58:	2169883a 	add	r20,r4,r5
 4002a5c:	003f9e06 	br	40028d8 <_malloc_r+0x460>
 4002a60:	00bffe04 	movi	r2,-8
 4002a64:	a93ffd04 	addi	r4,r21,-12
 4002a68:	2088703a 	and	r4,r4,r2
 4002a6c:	b10b883a 	add	r5,r22,r4
 4002a70:	00c00144 	movi	r3,5
 4002a74:	28c00215 	stw	r3,8(r5)
 4002a78:	28c00115 	stw	r3,4(r5)
 4002a7c:	b0800117 	ldw	r2,4(r22)
 4002a80:	1080004c 	andi	r2,r2,1
 4002a84:	2084b03a 	or	r2,r4,r2
 4002a88:	b0800115 	stw	r2,4(r22)
 4002a8c:	313fdd2e 	bgeu	r6,r4,4002a04 <_malloc_r+0x58c>
 4002a90:	b1400204 	addi	r5,r22,8
 4002a94:	9009883a 	mov	r4,r18
 4002a98:	40039040 	call	4003904 <_free_r>
 4002a9c:	e4000217 	ldw	r16,8(fp)
 4002aa0:	003fd806 	br	4002a04 <_malloc_r+0x58c>
 4002aa4:	00800504 	movi	r2,20
 4002aa8:	11001536 	bltu	r2,r4,4002b00 <_malloc_r+0x688>
 4002aac:	210016c4 	addi	r4,r4,91
 4002ab0:	200690fa 	slli	r3,r4,3
 4002ab4:	003fa606 	br	4002950 <_malloc_r+0x4d8>
 4002ab8:	8804d4ba 	srli	r2,r17,18
 4002abc:	11801f04 	addi	r6,r2,124
 4002ac0:	300490fa 	slli	r2,r6,3
 4002ac4:	003e9906 	br	400252c <_malloc_r+0xb4>
 4002ac8:	2009d0ba 	srai	r4,r4,2
 4002acc:	01410074 	movhi	r5,1025
 4002ad0:	29661d04 	addi	r5,r5,-26508
 4002ad4:	00c00044 	movi	r3,1
 4002ad8:	28800117 	ldw	r2,4(r5)
 4002adc:	1906983a 	sll	r3,r3,r4
 4002ae0:	10c4b03a 	or	r2,r2,r3
 4002ae4:	28800115 	stw	r2,4(r5)
 4002ae8:	003fa306 	br	4002978 <_malloc_r+0x500>
 4002aec:	0027883a 	mov	r19,zero
 4002af0:	00c00044 	movi	r3,1
 4002af4:	003f8606 	br	4002910 <_malloc_r+0x498>
 4002af8:	d1200315 	stw	r4,-32756(gp)
 4002afc:	003f7306 	br	40028cc <_malloc_r+0x454>
 4002b00:	00801504 	movi	r2,84
 4002b04:	11001936 	bltu	r2,r4,4002b6c <_malloc_r+0x6f4>
 4002b08:	2804d33a 	srli	r2,r5,12
 4002b0c:	11001b84 	addi	r4,r2,110
 4002b10:	200690fa 	slli	r3,r4,3
 4002b14:	003f8e06 	br	4002950 <_malloc_r+0x4d8>
 4002b18:	480b883a 	mov	r5,r9
 4002b1c:	6807883a 	mov	r3,r13
 4002b20:	288000cc 	andi	r2,r5,3
 4002b24:	18fffe04 	addi	r3,r3,-8
 4002b28:	297fffc4 	addi	r5,r5,-1
 4002b2c:	10001526 	beq	r2,zero,4002b84 <_malloc_r+0x70c>
 4002b30:	18800217 	ldw	r2,8(r3)
 4002b34:	10fffa26 	beq	r2,r3,4002b20 <_malloc_r+0x6a8>
 4002b38:	2109883a 	add	r4,r4,r4
 4002b3c:	393f1e36 	bltu	r7,r4,40027b8 <_malloc_r+0x340>
 4002b40:	203f1d26 	beq	r4,zero,40027b8 <_malloc_r+0x340>
 4002b44:	21c4703a 	and	r2,r4,r7
 4002b48:	10000226 	beq	r2,zero,4002b54 <_malloc_r+0x6dc>
 4002b4c:	6013883a 	mov	r9,r12
 4002b50:	003ee106 	br	40026d8 <_malloc_r+0x260>
 4002b54:	2109883a 	add	r4,r4,r4
 4002b58:	3904703a 	and	r2,r7,r4
 4002b5c:	63000104 	addi	r12,r12,4
 4002b60:	103ffc26 	beq	r2,zero,4002b54 <_malloc_r+0x6dc>
 4002b64:	6013883a 	mov	r9,r12
 4002b68:	003edb06 	br	40026d8 <_malloc_r+0x260>
 4002b6c:	00805504 	movi	r2,340
 4002b70:	11000836 	bltu	r2,r4,4002b94 <_malloc_r+0x71c>
 4002b74:	2804d3fa 	srli	r2,r5,15
 4002b78:	11001dc4 	addi	r4,r2,119
 4002b7c:	200690fa 	slli	r3,r4,3
 4002b80:	003f7306 	br	4002950 <_malloc_r+0x4d8>
 4002b84:	0104303a 	nor	r2,zero,r4
 4002b88:	388e703a 	and	r7,r7,r2
 4002b8c:	e1c00115 	stw	r7,4(fp)
 4002b90:	003fe906 	br	4002b38 <_malloc_r+0x6c0>
 4002b94:	00815504 	movi	r2,1364
 4002b98:	1100032e 	bgeu	r2,r4,4002ba8 <_malloc_r+0x730>
 4002b9c:	01001f84 	movi	r4,126
 4002ba0:	00c0fc04 	movi	r3,1008
 4002ba4:	003f6a06 	br	4002950 <_malloc_r+0x4d8>
 4002ba8:	2804d4ba 	srli	r2,r5,18
 4002bac:	11001f04 	addi	r4,r2,124
 4002bb0:	200690fa 	slli	r3,r4,3
 4002bb4:	003f6606 	br	4002950 <_malloc_r+0x4d8>

04002bb8 <memset>:
 4002bb8:	30000526 	beq	r6,zero,4002bd0 <memset+0x18>
 4002bbc:	310d883a 	add	r6,r6,r4
 4002bc0:	2005883a 	mov	r2,r4
 4002bc4:	11400005 	stb	r5,0(r2)
 4002bc8:	10800044 	addi	r2,r2,1
 4002bcc:	11bffd1e 	bne	r2,r6,4002bc4 <memset+0xc>
 4002bd0:	2005883a 	mov	r2,r4
 4002bd4:	f800283a 	ret

04002bd8 <_puts_r>:
 4002bd8:	defffd04 	addi	sp,sp,-12
 4002bdc:	dc000015 	stw	r16,0(sp)
 4002be0:	2021883a 	mov	r16,r4
 4002be4:	2809883a 	mov	r4,r5
 4002be8:	dfc00215 	stw	ra,8(sp)
 4002bec:	dc400115 	stw	r17,4(sp)
 4002bf0:	2823883a 	mov	r17,r5
 4002bf4:	4002cec0 	call	4002cec <strlen>
 4002bf8:	80c00217 	ldw	r3,8(r16)
 4002bfc:	02010034 	movhi	r8,1024
 4002c00:	420f0604 	addi	r8,r8,15384
 4002c04:	880d883a 	mov	r6,r17
 4002c08:	100f883a 	mov	r7,r2
 4002c0c:	8009883a 	mov	r4,r16
 4002c10:	180b883a 	mov	r5,r3
 4002c14:	1a000115 	stw	r8,4(r3)
 4002c18:	403ee83a 	callr	r8
 4002c1c:	047fffc4 	movi	r17,-1
 4002c20:	8009883a 	mov	r4,r16
 4002c24:	01810074 	movhi	r6,1025
 4002c28:	31a58b04 	addi	r6,r6,-27092
 4002c2c:	01c00044 	movi	r7,1
 4002c30:	1440071e 	bne	r2,r17,4002c50 <_puts_r+0x78>
 4002c34:	00ffffc4 	movi	r3,-1
 4002c38:	1805883a 	mov	r2,r3
 4002c3c:	dfc00217 	ldw	ra,8(sp)
 4002c40:	dc400117 	ldw	r17,4(sp)
 4002c44:	dc000017 	ldw	r16,0(sp)
 4002c48:	dec00304 	addi	sp,sp,12
 4002c4c:	f800283a 	ret
 4002c50:	81400217 	ldw	r5,8(r16)
 4002c54:	28c00117 	ldw	r3,4(r5)
 4002c58:	183ee83a 	callr	r3
 4002c5c:	0007883a 	mov	r3,zero
 4002c60:	147ff51e 	bne	r2,r17,4002c38 <_puts_r+0x60>
 4002c64:	003ff306 	br	4002c34 <_puts_r+0x5c>

04002c68 <puts>:
 4002c68:	00810074 	movhi	r2,1025
 4002c6c:	10a79404 	addi	r2,r2,-25008
 4002c70:	200b883a 	mov	r5,r4
 4002c74:	11000017 	ldw	r4,0(r2)
 4002c78:	4002bd81 	jmpi	4002bd8 <_puts_r>

04002c7c <_sbrk_r>:
 4002c7c:	defffd04 	addi	sp,sp,-12
 4002c80:	dc000015 	stw	r16,0(sp)
 4002c84:	04010074 	movhi	r16,1025
 4002c88:	84296304 	addi	r16,r16,-23156
 4002c8c:	dc400115 	stw	r17,4(sp)
 4002c90:	80000015 	stw	zero,0(r16)
 4002c94:	2023883a 	mov	r17,r4
 4002c98:	2809883a 	mov	r4,r5
 4002c9c:	dfc00215 	stw	ra,8(sp)
 4002ca0:	4007b540 	call	4007b54 <sbrk>
 4002ca4:	1007883a 	mov	r3,r2
 4002ca8:	00bfffc4 	movi	r2,-1
 4002cac:	18800626 	beq	r3,r2,4002cc8 <_sbrk_r+0x4c>
 4002cb0:	1805883a 	mov	r2,r3
 4002cb4:	dfc00217 	ldw	ra,8(sp)
 4002cb8:	dc400117 	ldw	r17,4(sp)
 4002cbc:	dc000017 	ldw	r16,0(sp)
 4002cc0:	dec00304 	addi	sp,sp,12
 4002cc4:	f800283a 	ret
 4002cc8:	80800017 	ldw	r2,0(r16)
 4002ccc:	103ff826 	beq	r2,zero,4002cb0 <_sbrk_r+0x34>
 4002cd0:	88800015 	stw	r2,0(r17)
 4002cd4:	1805883a 	mov	r2,r3
 4002cd8:	dfc00217 	ldw	ra,8(sp)
 4002cdc:	dc400117 	ldw	r17,4(sp)
 4002ce0:	dc000017 	ldw	r16,0(sp)
 4002ce4:	dec00304 	addi	sp,sp,12
 4002ce8:	f800283a 	ret

04002cec <strlen>:
 4002cec:	20800007 	ldb	r2,0(r4)
 4002cf0:	10000526 	beq	r2,zero,4002d08 <strlen+0x1c>
 4002cf4:	2007883a 	mov	r3,r4
 4002cf8:	18c00044 	addi	r3,r3,1
 4002cfc:	18800007 	ldb	r2,0(r3)
 4002d00:	103ffd1e 	bne	r2,zero,4002cf8 <strlen+0xc>
 4002d04:	1905c83a 	sub	r2,r3,r4
 4002d08:	f800283a 	ret

04002d0c <print_e>:
 4002d0c:	defff404 	addi	sp,sp,-48
 4002d10:	dcc00a15 	stw	r19,40(sp)
 4002d14:	dcc00c17 	ldw	r19,48(sp)
 4002d18:	3005883a 	mov	r2,r6
 4002d1c:	dc400815 	stw	r17,32(sp)
 4002d20:	2823883a 	mov	r17,r5
 4002d24:	100b883a 	mov	r5,r2
 4002d28:	d8800604 	addi	r2,sp,24
 4002d2c:	380d883a 	mov	r6,r7
 4002d30:	9a000044 	addi	r8,r19,1
 4002d34:	d8800115 	stw	r2,4(sp)
 4002d38:	d8c00504 	addi	r3,sp,20
 4002d3c:	d8800404 	addi	r2,sp,16
 4002d40:	01c00084 	movi	r7,2
 4002d44:	dc800915 	stw	r18,36(sp)
 4002d48:	dc000715 	stw	r16,28(sp)
 4002d4c:	dfc00b15 	stw	ra,44(sp)
 4002d50:	da000015 	stw	r8,0(sp)
 4002d54:	d8c00315 	stw	r3,12(sp)
 4002d58:	d8800215 	stw	r2,8(sp)
 4002d5c:	dc800d03 	ldbu	r18,52(sp)
 4002d60:	40057a80 	call	40057a8 <_dtoa_r>
 4002d64:	dc000617 	ldw	r16,24(sp)
 4002d68:	100b883a 	mov	r5,r2
 4002d6c:	0089c3c4 	movi	r2,9999
 4002d70:	80805e26 	beq	r16,r2,4002eec <print_e+0x1e0>
 4002d74:	28c00003 	ldbu	r3,0(r5)
 4002d78:	89000044 	addi	r4,r17,1
 4002d7c:	29400044 	addi	r5,r5,1
 4002d80:	88c00005 	stb	r3,0(r17)
 4002d84:	d8800e17 	ldw	r2,56(sp)
 4002d88:	10004826 	beq	r2,zero,4002eac <print_e+0x1a0>
 4002d8c:	00800b84 	movi	r2,46
 4002d90:	20800005 	stb	r2,0(r4)
 4002d94:	9811883a 	mov	r8,r19
 4002d98:	21000044 	addi	r4,r4,1
 4002d9c:	28800003 	ldbu	r2,0(r5)
 4002da0:	10000926 	beq	r2,zero,4002dc8 <print_e+0xbc>
 4002da4:	02000216 	blt	zero,r8,4002db0 <print_e+0xa4>
 4002da8:	00000706 	br	4002dc8 <print_e+0xbc>
 4002dac:	40000626 	beq	r8,zero,4002dc8 <print_e+0xbc>
 4002db0:	20800005 	stb	r2,0(r4)
 4002db4:	29400044 	addi	r5,r5,1
 4002db8:	28800003 	ldbu	r2,0(r5)
 4002dbc:	423fffc4 	addi	r8,r8,-1
 4002dc0:	21000044 	addi	r4,r4,1
 4002dc4:	103ff91e 	bne	r2,zero,4002dac <print_e+0xa0>
 4002dc8:	90c03fcc 	andi	r3,r18,255
 4002dcc:	18c0201c 	xori	r3,r3,128
 4002dd0:	18ffe004 	addi	r3,r3,-128
 4002dd4:	008019c4 	movi	r2,103
 4002dd8:	18803726 	beq	r3,r2,4002eb8 <print_e+0x1ac>
 4002ddc:	008011c4 	movi	r2,71
 4002de0:	18804026 	beq	r3,r2,4002ee4 <print_e+0x1d8>
 4002de4:	0200080e 	bge	zero,r8,4002e08 <print_e+0xfc>
 4002de8:	4007883a 	mov	r3,r8
 4002dec:	2005883a 	mov	r2,r4
 4002df0:	01400c04 	movi	r5,48
 4002df4:	18ffffc4 	addi	r3,r3,-1
 4002df8:	11400005 	stb	r5,0(r2)
 4002dfc:	10800044 	addi	r2,r2,1
 4002e00:	183ffc1e 	bne	r3,zero,4002df4 <print_e+0xe8>
 4002e04:	2209883a 	add	r4,r4,r8
 4002e08:	843fffc4 	addi	r16,r16,-1
 4002e0c:	24800005 	stb	r18,0(r4)
 4002e10:	dc000615 	stw	r16,24(sp)
 4002e14:	80002d16 	blt	r16,zero,4002ecc <print_e+0x1c0>
 4002e18:	00800ac4 	movi	r2,43
 4002e1c:	20800045 	stb	r2,1(r4)
 4002e20:	24400084 	addi	r17,r4,2
 4002e24:	008018c4 	movi	r2,99
 4002e28:	14000b0e 	bge	r2,r16,4002e58 <print_e+0x14c>
 4002e2c:	8009883a 	mov	r4,r16
 4002e30:	01401904 	movi	r5,100
 4002e34:	40077f40 	call	40077f4 <__divsi3>
 4002e38:	1009883a 	mov	r4,r2
 4002e3c:	10800c04 	addi	r2,r2,48
 4002e40:	88800005 	stb	r2,0(r17)
 4002e44:	01401904 	movi	r5,100
 4002e48:	400195c0 	call	400195c <__mulsi3>
 4002e4c:	80a1c83a 	sub	r16,r16,r2
 4002e50:	8c400044 	addi	r17,r17,1
 4002e54:	dc000615 	stw	r16,24(sp)
 4002e58:	8009883a 	mov	r4,r16
 4002e5c:	01400284 	movi	r5,10
 4002e60:	40077f40 	call	40077f4 <__divsi3>
 4002e64:	1009883a 	mov	r4,r2
 4002e68:	10800c04 	addi	r2,r2,48
 4002e6c:	88800005 	stb	r2,0(r17)
 4002e70:	01400284 	movi	r5,10
 4002e74:	400195c0 	call	400195c <__mulsi3>
 4002e78:	8085c83a 	sub	r2,r16,r2
 4002e7c:	10c00c04 	addi	r3,r2,48
 4002e80:	88c00045 	stb	r3,1(r17)
 4002e84:	89000044 	addi	r4,r17,1
 4002e88:	20000045 	stb	zero,1(r4)
 4002e8c:	d8800615 	stw	r2,24(sp)
 4002e90:	dfc00b17 	ldw	ra,44(sp)
 4002e94:	dcc00a17 	ldw	r19,40(sp)
 4002e98:	dc800917 	ldw	r18,36(sp)
 4002e9c:	dc400817 	ldw	r17,32(sp)
 4002ea0:	dc000717 	ldw	r16,28(sp)
 4002ea4:	dec00c04 	addi	sp,sp,48
 4002ea8:	f800283a 	ret
 4002eac:	983fb71e 	bne	r19,zero,4002d8c <print_e+0x80>
 4002eb0:	0011883a 	mov	r8,zero
 4002eb4:	003fb906 	br	4002d9c <print_e+0x90>
 4002eb8:	04801944 	movi	r18,101
 4002ebc:	843fffc4 	addi	r16,r16,-1
 4002ec0:	24800005 	stb	r18,0(r4)
 4002ec4:	dc000615 	stw	r16,24(sp)
 4002ec8:	803fd30e 	bge	r16,zero,4002e18 <print_e+0x10c>
 4002ecc:	00800b44 	movi	r2,45
 4002ed0:	0421c83a 	sub	r16,zero,r16
 4002ed4:	20800045 	stb	r2,1(r4)
 4002ed8:	24400084 	addi	r17,r4,2
 4002edc:	dc000615 	stw	r16,24(sp)
 4002ee0:	003fd006 	br	4002e24 <print_e+0x118>
 4002ee4:	04801144 	movi	r18,69
 4002ee8:	003fc706 	br	4002e08 <print_e+0xfc>
 4002eec:	8809883a 	mov	r4,r17
 4002ef0:	40054040 	call	4005404 <strcpy>
 4002ef4:	dfc00b17 	ldw	ra,44(sp)
 4002ef8:	dcc00a17 	ldw	r19,40(sp)
 4002efc:	dc800917 	ldw	r18,36(sp)
 4002f00:	dc400817 	ldw	r17,32(sp)
 4002f04:	dc000717 	ldw	r16,28(sp)
 4002f08:	dec00c04 	addi	sp,sp,48
 4002f0c:	f800283a 	ret

04002f10 <_gcvt>:
 4002f10:	defff104 	addi	sp,sp,-60
 4002f14:	dc400815 	stw	r17,32(sp)
 4002f18:	0005883a 	mov	r2,zero
 4002f1c:	3023883a 	mov	r17,r6
 4002f20:	dcc00a15 	stw	r19,40(sp)
 4002f24:	dc800915 	stw	r18,36(sp)
 4002f28:	dc000715 	stw	r16,28(sp)
 4002f2c:	2027883a 	mov	r19,r4
 4002f30:	2821883a 	mov	r16,r5
 4002f34:	3825883a 	mov	r18,r7
 4002f38:	2809883a 	mov	r4,r5
 4002f3c:	100d883a 	mov	r6,r2
 4002f40:	880b883a 	mov	r5,r17
 4002f44:	000f883a 	mov	r7,zero
 4002f48:	dd800d15 	stw	r22,52(sp)
 4002f4c:	dd400c15 	stw	r21,48(sp)
 4002f50:	dd000b15 	stw	r20,44(sp)
 4002f54:	dfc00e15 	stw	ra,56(sp)
 4002f58:	dd400f17 	ldw	r21,60(sp)
 4002f5c:	dd801117 	ldw	r22,68(sp)
 4002f60:	dd001003 	ldbu	r20,64(sp)
 4002f64:	40074600 	call	4007460 <__ltdf2>
 4002f68:	10008e16 	blt	r2,zero,40031a4 <_gcvt+0x294>
 4002f6c:	000d883a 	mov	r6,zero
 4002f70:	000f883a 	mov	r7,zero
 4002f74:	8009883a 	mov	r4,r16
 4002f78:	880b883a 	mov	r5,r17
 4002f7c:	40072400 	call	4007240 <__eqdf2>
 4002f80:	10000e1e 	bne	r2,zero,4002fbc <_gcvt+0xac>
 4002f84:	00800c04 	movi	r2,48
 4002f88:	a8800005 	stb	r2,0(r21)
 4002f8c:	a8000045 	stb	zero,1(r21)
 4002f90:	a805883a 	mov	r2,r21
 4002f94:	dfc00e17 	ldw	ra,56(sp)
 4002f98:	dd800d17 	ldw	r22,52(sp)
 4002f9c:	dd400c17 	ldw	r21,48(sp)
 4002fa0:	dd000b17 	ldw	r20,44(sp)
 4002fa4:	dcc00a17 	ldw	r19,40(sp)
 4002fa8:	dc800917 	ldw	r18,36(sp)
 4002fac:	dc400817 	ldw	r17,32(sp)
 4002fb0:	dc000717 	ldw	r16,28(sp)
 4002fb4:	dec00f04 	addi	sp,sp,60
 4002fb8:	f800283a 	ret
 4002fbc:	00bac734 	movhi	r2,60188
 4002fc0:	1090cb44 	addi	r2,r2,17197
 4002fc4:	00cfc6b4 	movhi	r3,16154
 4002fc8:	18cdb884 	addi	r3,r3,14050
 4002fcc:	180f883a 	mov	r7,r3
 4002fd0:	8009883a 	mov	r4,r16
 4002fd4:	880b883a 	mov	r5,r17
 4002fd8:	100d883a 	mov	r6,r2
 4002fdc:	40074e80 	call	40074e8 <__ledf2>
 4002fe0:	00800d16 	blt	zero,r2,4003018 <_gcvt+0x108>
 4002fe4:	a0c03fcc 	andi	r3,r20,255
 4002fe8:	18c0201c 	xori	r3,r3,128
 4002fec:	90bfffc4 	addi	r2,r18,-1
 4002ff0:	18ffe004 	addi	r3,r3,-128
 4002ff4:	9809883a 	mov	r4,r19
 4002ff8:	880f883a 	mov	r7,r17
 4002ffc:	a80b883a 	mov	r5,r21
 4003000:	800d883a 	mov	r6,r16
 4003004:	d8800015 	stw	r2,0(sp)
 4003008:	d8c00115 	stw	r3,4(sp)
 400300c:	dd800215 	stw	r22,8(sp)
 4003010:	4002d0c0 	call	4002d0c <print_e>
 4003014:	003fde06 	br	4002f90 <_gcvt+0x80>
 4003018:	9009883a 	mov	r4,r18
 400301c:	40040b80 	call	40040b8 <_mprec_log10>
 4003020:	180f883a 	mov	r7,r3
 4003024:	8009883a 	mov	r4,r16
 4003028:	880b883a 	mov	r5,r17
 400302c:	100d883a 	mov	r6,r2
 4003030:	40073d80 	call	40073d8 <__gedf2>
 4003034:	103feb0e 	bge	r2,zero,4002fe4 <_gcvt+0xd4>
 4003038:	0005883a 	mov	r2,zero
 400303c:	00cffc34 	movhi	r3,16368
 4003040:	180f883a 	mov	r7,r3
 4003044:	8009883a 	mov	r4,r16
 4003048:	880b883a 	mov	r5,r17
 400304c:	100d883a 	mov	r6,r2
 4003050:	40074600 	call	4007460 <__ltdf2>
 4003054:	10005616 	blt	r2,zero,40031b0 <_gcvt+0x2a0>
 4003058:	9809883a 	mov	r4,r19
 400305c:	880d883a 	mov	r6,r17
 4003060:	800b883a 	mov	r5,r16
 4003064:	01c00084 	movi	r7,2
 4003068:	d8800504 	addi	r2,sp,20
 400306c:	d8800215 	stw	r2,8(sp)
 4003070:	d8c00604 	addi	r3,sp,24
 4003074:	d8800404 	addi	r2,sp,16
 4003078:	d8c00315 	stw	r3,12(sp)
 400307c:	dc800015 	stw	r18,0(sp)
 4003080:	d8800115 	stw	r2,4(sp)
 4003084:	40057a80 	call	40057a8 <_dtoa_r>
 4003088:	d9000417 	ldw	r4,16(sp)
 400308c:	100b883a 	mov	r5,r2
 4003090:	0089c3c4 	movi	r2,9999
 4003094:	20804b26 	beq	r4,r2,40031c4 <_gcvt+0x2b4>
 4003098:	28800003 	ldbu	r2,0(r5)
 400309c:	10005026 	beq	r2,zero,40031e0 <_gcvt+0x2d0>
 40030a0:	0100510e 	bge	zero,r4,40031e8 <_gcvt+0x2d8>
 40030a4:	a807883a 	mov	r3,r21
 40030a8:	00000106 	br	40030b0 <_gcvt+0x1a0>
 40030ac:	0100130e 	bge	zero,r4,40030fc <_gcvt+0x1ec>
 40030b0:	18800005 	stb	r2,0(r3)
 40030b4:	213fffc4 	addi	r4,r4,-1
 40030b8:	d9000415 	stw	r4,16(sp)
 40030bc:	29400044 	addi	r5,r5,1
 40030c0:	28800003 	ldbu	r2,0(r5)
 40030c4:	18c00044 	addi	r3,r3,1
 40030c8:	94bfffc4 	addi	r18,r18,-1
 40030cc:	103ff71e 	bne	r2,zero,40030ac <_gcvt+0x19c>
 40030d0:	01000a0e 	bge	zero,r4,40030fc <_gcvt+0x1ec>
 40030d4:	0480090e 	bge	zero,r18,40030fc <_gcvt+0x1ec>
 40030d8:	00800c04 	movi	r2,48
 40030dc:	00000106 	br	40030e4 <_gcvt+0x1d4>
 40030e0:	90000526 	beq	r18,zero,40030f8 <_gcvt+0x1e8>
 40030e4:	213fffc4 	addi	r4,r4,-1
 40030e8:	18800005 	stb	r2,0(r3)
 40030ec:	94bfffc4 	addi	r18,r18,-1
 40030f0:	18c00044 	addi	r3,r3,1
 40030f4:	013ffa16 	blt	zero,r4,40030e0 <_gcvt+0x1d0>
 40030f8:	d9000415 	stw	r4,16(sp)
 40030fc:	b000021e 	bne	r22,zero,4003108 <_gcvt+0x1f8>
 4003100:	28800007 	ldb	r2,0(r5)
 4003104:	10002526 	beq	r2,zero,400319c <_gcvt+0x28c>
 4003108:	a8c03126 	beq	r21,r3,40031d0 <_gcvt+0x2c0>
 400310c:	00800b84 	movi	r2,46
 4003110:	18800005 	stb	r2,0(r3)
 4003114:	18c00044 	addi	r3,r3,1
 4003118:	20000b0e 	bge	r4,zero,4003148 <_gcvt+0x238>
 400311c:	04800a0e 	bge	zero,r18,4003148 <_gcvt+0x238>
 4003120:	01800c04 	movi	r6,48
 4003124:	00000106 	br	400312c <_gcvt+0x21c>
 4003128:	90000626 	beq	r18,zero,4003144 <_gcvt+0x234>
 400312c:	20800044 	addi	r2,r4,1
 4003130:	19800005 	stb	r6,0(r3)
 4003134:	94bfffc4 	addi	r18,r18,-1
 4003138:	18c00044 	addi	r3,r3,1
 400313c:	1009883a 	mov	r4,r2
 4003140:	103ff916 	blt	r2,zero,4003128 <_gcvt+0x218>
 4003144:	d8800415 	stw	r2,16(sp)
 4003148:	28800003 	ldbu	r2,0(r5)
 400314c:	10000926 	beq	r2,zero,4003174 <_gcvt+0x264>
 4003150:	04800216 	blt	zero,r18,400315c <_gcvt+0x24c>
 4003154:	00000706 	br	4003174 <_gcvt+0x264>
 4003158:	90000626 	beq	r18,zero,4003174 <_gcvt+0x264>
 400315c:	18800005 	stb	r2,0(r3)
 4003160:	29400044 	addi	r5,r5,1
 4003164:	28800003 	ldbu	r2,0(r5)
 4003168:	94bfffc4 	addi	r18,r18,-1
 400316c:	18c00044 	addi	r3,r3,1
 4003170:	103ff91e 	bne	r2,zero,4003158 <_gcvt+0x248>
 4003174:	b0000926 	beq	r22,zero,400319c <_gcvt+0x28c>
 4003178:	0480080e 	bge	zero,r18,400319c <_gcvt+0x28c>
 400317c:	9009883a 	mov	r4,r18
 4003180:	1805883a 	mov	r2,r3
 4003184:	01400c04 	movi	r5,48
 4003188:	213fffc4 	addi	r4,r4,-1
 400318c:	11400005 	stb	r5,0(r2)
 4003190:	10800044 	addi	r2,r2,1
 4003194:	203ffc1e 	bne	r4,zero,4003188 <_gcvt+0x278>
 4003198:	1c87883a 	add	r3,r3,r18
 400319c:	18000005 	stb	zero,0(r3)
 40031a0:	003f7b06 	br	4002f90 <_gcvt+0x80>
 40031a4:	88e0003c 	xorhi	r3,r17,32768
 40031a8:	1823883a 	mov	r17,r3
 40031ac:	003f6f06 	br	4002f6c <_gcvt+0x5c>
 40031b0:	9809883a 	mov	r4,r19
 40031b4:	880d883a 	mov	r6,r17
 40031b8:	800b883a 	mov	r5,r16
 40031bc:	01c000c4 	movi	r7,3
 40031c0:	003fa906 	br	4003068 <_gcvt+0x158>
 40031c4:	a809883a 	mov	r4,r21
 40031c8:	40054040 	call	4005404 <strcpy>
 40031cc:	003f7006 	br	4002f90 <_gcvt+0x80>
 40031d0:	00800c04 	movi	r2,48
 40031d4:	a8c00044 	addi	r3,r21,1
 40031d8:	a8800005 	stb	r2,0(r21)
 40031dc:	003fcb06 	br	400310c <_gcvt+0x1fc>
 40031e0:	a807883a 	mov	r3,r21
 40031e4:	003fba06 	br	40030d0 <_gcvt+0x1c0>
 40031e8:	a807883a 	mov	r3,r21
 40031ec:	003fc306 	br	40030fc <_gcvt+0x1ec>

040031f0 <_dcvt>:
 40031f0:	defff504 	addi	sp,sp,-44
 40031f4:	d8800d17 	ldw	r2,52(sp)
 40031f8:	3011883a 	mov	r8,r6
 40031fc:	dc800915 	stw	r18,36(sp)
 4003200:	10ffeec4 	addi	r3,r2,-69
 4003204:	12c03fcc 	andi	r11,r2,255
 4003208:	19803fcc 	andi	r6,r3,255
 400320c:	5ac0201c 	xori	r11,r11,128
 4003210:	00c00884 	movi	r3,34
 4003214:	dc400815 	stw	r17,32(sp)
 4003218:	dc000715 	stw	r16,28(sp)
 400321c:	dfc00a15 	stw	ra,40(sp)
 4003220:	2015883a 	mov	r10,r4
 4003224:	2823883a 	mov	r17,r5
 4003228:	3813883a 	mov	r9,r7
 400322c:	dc000b17 	ldw	r16,44(sp)
 4003230:	dc800e17 	ldw	r18,56(sp)
 4003234:	5affe004 	addi	r11,r11,-128
 4003238:	19803436 	bltu	r3,r6,400330c <_dcvt+0x11c>
 400323c:	3185883a 	add	r2,r6,r6
 4003240:	1085883a 	add	r2,r2,r2
 4003244:	00c10034 	movhi	r3,1024
 4003248:	18cc9604 	addi	r3,r3,12888
 400324c:	10c5883a 	add	r2,r2,r3
 4003250:	11000017 	ldw	r4,0(r2)
 4003254:	2000683a 	jmp	r4
 4003258:	04003328 	cmpgeui	r16,zero,204
 400325c:	0400335c 	xori	r16,zero,205
 4003260:	040032e4 	muli	r16,zero,203
 4003264:	0400330c 	andi	r16,zero,204
 4003268:	0400330c 	andi	r16,zero,204
 400326c:	0400330c 	andi	r16,zero,204
 4003270:	0400330c 	andi	r16,zero,204
 4003274:	0400330c 	andi	r16,zero,204
 4003278:	0400330c 	andi	r16,zero,204
 400327c:	0400330c 	andi	r16,zero,204
 4003280:	0400330c 	andi	r16,zero,204
 4003284:	0400330c 	andi	r16,zero,204
 4003288:	0400330c 	andi	r16,zero,204
 400328c:	0400330c 	andi	r16,zero,204
 4003290:	0400330c 	andi	r16,zero,204
 4003294:	0400330c 	andi	r16,zero,204
 4003298:	0400330c 	andi	r16,zero,204
 400329c:	0400330c 	andi	r16,zero,204
 40032a0:	0400330c 	andi	r16,zero,204
 40032a4:	0400330c 	andi	r16,zero,204
 40032a8:	0400330c 	andi	r16,zero,204
 40032ac:	0400330c 	andi	r16,zero,204
 40032b0:	0400330c 	andi	r16,zero,204
 40032b4:	0400330c 	andi	r16,zero,204
 40032b8:	0400330c 	andi	r16,zero,204
 40032bc:	0400330c 	andi	r16,zero,204
 40032c0:	0400330c 	andi	r16,zero,204
 40032c4:	0400330c 	andi	r16,zero,204
 40032c8:	0400330c 	andi	r16,zero,204
 40032cc:	0400330c 	andi	r16,zero,204
 40032d0:	0400330c 	andi	r16,zero,204
 40032d4:	0400330c 	andi	r16,zero,204
 40032d8:	04003328 	cmpgeui	r16,zero,204
 40032dc:	0400335c 	xori	r16,zero,205
 40032e0:	040032e4 	muli	r16,zero,203
 40032e4:	8000011e 	bne	r16,zero,40032ec <_dcvt+0xfc>
 40032e8:	04000044 	movi	r16,1
 40032ec:	5009883a 	mov	r4,r10
 40032f0:	480d883a 	mov	r6,r9
 40032f4:	800f883a 	mov	r7,r16
 40032f8:	400b883a 	mov	r5,r8
 40032fc:	dac00115 	stw	r11,4(sp)
 4003300:	dc800215 	stw	r18,8(sp)
 4003304:	dc400015 	stw	r17,0(sp)
 4003308:	4002f100 	call	4002f10 <_gcvt>
 400330c:	8805883a 	mov	r2,r17
 4003310:	dfc00a17 	ldw	ra,40(sp)
 4003314:	dc800917 	ldw	r18,36(sp)
 4003318:	dc400817 	ldw	r17,32(sp)
 400331c:	dc000717 	ldw	r16,28(sp)
 4003320:	dec00b04 	addi	sp,sp,44
 4003324:	f800283a 	ret
 4003328:	5009883a 	mov	r4,r10
 400332c:	400d883a 	mov	r6,r8
 4003330:	dc000015 	stw	r16,0(sp)
 4003334:	dac00115 	stw	r11,4(sp)
 4003338:	dc800215 	stw	r18,8(sp)
 400333c:	4002d0c0 	call	4002d0c <print_e>
 4003340:	8805883a 	mov	r2,r17
 4003344:	dfc00a17 	ldw	ra,40(sp)
 4003348:	dc800917 	ldw	r18,36(sp)
 400334c:	dc400817 	ldw	r17,32(sp)
 4003350:	dc000717 	ldw	r16,28(sp)
 4003354:	dec00b04 	addi	sp,sp,44
 4003358:	f800283a 	ret
 400335c:	80000126 	beq	r16,zero,4003364 <_dcvt+0x174>
 4003360:	04800044 	movi	r18,1
 4003364:	d8800504 	addi	r2,sp,20
 4003368:	d8c00604 	addi	r3,sp,24
 400336c:	400b883a 	mov	r5,r8
 4003370:	d8800215 	stw	r2,8(sp)
 4003374:	5009883a 	mov	r4,r10
 4003378:	d8800404 	addi	r2,sp,16
 400337c:	480d883a 	mov	r6,r9
 4003380:	01c000c4 	movi	r7,3
 4003384:	d8c00315 	stw	r3,12(sp)
 4003388:	dc000015 	stw	r16,0(sp)
 400338c:	d8800115 	stw	r2,4(sp)
 4003390:	40057a80 	call	40057a8 <_dtoa_r>
 4003394:	d9400417 	ldw	r5,16(sp)
 4003398:	1007883a 	mov	r3,r2
 400339c:	0089c3c4 	movi	r2,9999
 40033a0:	28804626 	beq	r5,r2,40034bc <_dcvt+0x2cc>
 40033a4:	18800003 	ldbu	r2,0(r3)
 40033a8:	10004c26 	beq	r2,zero,40034dc <_dcvt+0x2ec>
 40033ac:	0140120e 	bge	zero,r5,40033f8 <_dcvt+0x208>
 40033b0:	8809883a 	mov	r4,r17
 40033b4:	180d883a 	mov	r6,r3
 40033b8:	00000106 	br	40033c0 <_dcvt+0x1d0>
 40033bc:	0140100e 	bge	zero,r5,4003400 <_dcvt+0x210>
 40033c0:	20800005 	stb	r2,0(r4)
 40033c4:	297fffc4 	addi	r5,r5,-1
 40033c8:	31800044 	addi	r6,r6,1
 40033cc:	d9400415 	stw	r5,16(sp)
 40033d0:	30800003 	ldbu	r2,0(r6)
 40033d4:	21000044 	addi	r4,r4,1
 40033d8:	103ff81e 	bne	r2,zero,40033bc <_dcvt+0x1cc>
 40033dc:	0140080e 	bge	zero,r5,4003400 <_dcvt+0x210>
 40033e0:	00800c04 	movi	r2,48
 40033e4:	20800005 	stb	r2,0(r4)
 40033e8:	297fffc4 	addi	r5,r5,-1
 40033ec:	21000044 	addi	r4,r4,1
 40033f0:	d9400415 	stw	r5,16(sp)
 40033f4:	003ff906 	br	40033dc <_dcvt+0x1ec>
 40033f8:	8809883a 	mov	r4,r17
 40033fc:	180d883a 	mov	r6,r3
 4003400:	9000021e 	bne	r18,zero,400340c <_dcvt+0x21c>
 4003404:	30800007 	ldb	r2,0(r6)
 4003408:	10002426 	beq	r2,zero,400349c <_dcvt+0x2ac>
 400340c:	19802f26 	beq	r3,r6,40034cc <_dcvt+0x2dc>
 4003410:	00800b84 	movi	r2,46
 4003414:	20800005 	stb	r2,0(r4)
 4003418:	21000044 	addi	r4,r4,1
 400341c:	28000b0e 	bge	r5,zero,400344c <_dcvt+0x25c>
 4003420:	04000216 	blt	zero,r16,400342c <_dcvt+0x23c>
 4003424:	00000906 	br	400344c <_dcvt+0x25c>
 4003428:	80000826 	beq	r16,zero,400344c <_dcvt+0x25c>
 400342c:	00800c04 	movi	r2,48
 4003430:	28c00044 	addi	r3,r5,1
 4003434:	20800005 	stb	r2,0(r4)
 4003438:	d8c00415 	stw	r3,16(sp)
 400343c:	21000044 	addi	r4,r4,1
 4003440:	843fffc4 	addi	r16,r16,-1
 4003444:	180b883a 	mov	r5,r3
 4003448:	183ff716 	blt	r3,zero,4003428 <_dcvt+0x238>
 400344c:	30800003 	ldbu	r2,0(r6)
 4003450:	10000926 	beq	r2,zero,4003478 <_dcvt+0x288>
 4003454:	04000216 	blt	zero,r16,4003460 <_dcvt+0x270>
 4003458:	00001006 	br	400349c <_dcvt+0x2ac>
 400345c:	80000f26 	beq	r16,zero,400349c <_dcvt+0x2ac>
 4003460:	20800005 	stb	r2,0(r4)
 4003464:	31800044 	addi	r6,r6,1
 4003468:	30800003 	ldbu	r2,0(r6)
 400346c:	21000044 	addi	r4,r4,1
 4003470:	843fffc4 	addi	r16,r16,-1
 4003474:	103ff91e 	bne	r2,zero,400345c <_dcvt+0x26c>
 4003478:	0400080e 	bge	zero,r16,400349c <_dcvt+0x2ac>
 400347c:	2007883a 	mov	r3,r4
 4003480:	8005883a 	mov	r2,r16
 4003484:	01400c04 	movi	r5,48
 4003488:	10bfffc4 	addi	r2,r2,-1
 400348c:	19400005 	stb	r5,0(r3)
 4003490:	18c00044 	addi	r3,r3,1
 4003494:	103ffc1e 	bne	r2,zero,4003488 <_dcvt+0x298>
 4003498:	2409883a 	add	r4,r4,r16
 400349c:	8805883a 	mov	r2,r17
 40034a0:	20000005 	stb	zero,0(r4)
 40034a4:	dfc00a17 	ldw	ra,40(sp)
 40034a8:	dc800917 	ldw	r18,36(sp)
 40034ac:	dc400817 	ldw	r17,32(sp)
 40034b0:	dc000717 	ldw	r16,28(sp)
 40034b4:	dec00b04 	addi	sp,sp,44
 40034b8:	f800283a 	ret
 40034bc:	180b883a 	mov	r5,r3
 40034c0:	8809883a 	mov	r4,r17
 40034c4:	40054040 	call	4005404 <strcpy>
 40034c8:	003f9006 	br	400330c <_dcvt+0x11c>
 40034cc:	00800c04 	movi	r2,48
 40034d0:	20800005 	stb	r2,0(r4)
 40034d4:	21000044 	addi	r4,r4,1
 40034d8:	003fcd06 	br	4003410 <_dcvt+0x220>
 40034dc:	8809883a 	mov	r4,r17
 40034e0:	180d883a 	mov	r6,r3
 40034e4:	003fbd06 	br	40033dc <_dcvt+0x1ec>

040034e8 <ecvtbuf>:
 40034e8:	defff404 	addi	sp,sp,-48
 40034ec:	dc800715 	stw	r18,28(sp)
 40034f0:	dc800d17 	ldw	r18,52(sp)
 40034f4:	dd000915 	stw	r20,36(sp)
 40034f8:	dcc00815 	stw	r19,32(sp)
 40034fc:	dc400615 	stw	r17,24(sp)
 4003500:	dc000515 	stw	r16,20(sp)
 4003504:	dfc00b15 	stw	ra,44(sp)
 4003508:	dd400a15 	stw	r21,40(sp)
 400350c:	2021883a 	mov	r16,r4
 4003510:	2823883a 	mov	r17,r5
 4003514:	3027883a 	mov	r19,r6
 4003518:	3829883a 	mov	r20,r7
 400351c:	90002d26 	beq	r18,zero,40035d4 <ecvtbuf+0xec>
 4003520:	05410074 	movhi	r21,1025
 4003524:	ad679404 	addi	r21,r21,-25008
 4003528:	d8800c17 	ldw	r2,48(sp)
 400352c:	a9000017 	ldw	r4,0(r21)
 4003530:	880d883a 	mov	r6,r17
 4003534:	d8800215 	stw	r2,8(sp)
 4003538:	800b883a 	mov	r5,r16
 400353c:	d8800404 	addi	r2,sp,16
 4003540:	01c00084 	movi	r7,2
 4003544:	dd000115 	stw	r20,4(sp)
 4003548:	dcc00015 	stw	r19,0(sp)
 400354c:	d8800315 	stw	r2,12(sp)
 4003550:	40057a80 	call	40057a8 <_dtoa_r>
 4003554:	1007883a 	mov	r3,r2
 4003558:	d8800417 	ldw	r2,16(sp)
 400355c:	1880252e 	bgeu	r3,r2,40035f4 <ecvtbuf+0x10c>
 4003560:	9009883a 	mov	r4,r18
 4003564:	000d883a 	mov	r6,zero
 4003568:	18800003 	ldbu	r2,0(r3)
 400356c:	18c00044 	addi	r3,r3,1
 4003570:	31800044 	addi	r6,r6,1
 4003574:	20800005 	stb	r2,0(r4)
 4003578:	d8800417 	ldw	r2,16(sp)
 400357c:	21000044 	addi	r4,r4,1
 4003580:	18bff936 	bltu	r3,r2,4003568 <ecvtbuf+0x80>
 4003584:	34c0080e 	bge	r6,r19,40035a8 <ecvtbuf+0xc0>
 4003588:	9985c83a 	sub	r2,r19,r6
 400358c:	2007883a 	mov	r3,r4
 4003590:	1105883a 	add	r2,r2,r4
 4003594:	01000c04 	movi	r4,48
 4003598:	19000005 	stb	r4,0(r3)
 400359c:	18c00044 	addi	r3,r3,1
 40035a0:	18bffd1e 	bne	r3,r2,4003598 <ecvtbuf+0xb0>
 40035a4:	1809883a 	mov	r4,r3
 40035a8:	20000005 	stb	zero,0(r4)
 40035ac:	9005883a 	mov	r2,r18
 40035b0:	dfc00b17 	ldw	ra,44(sp)
 40035b4:	dd400a17 	ldw	r21,40(sp)
 40035b8:	dd000917 	ldw	r20,36(sp)
 40035bc:	dcc00817 	ldw	r19,32(sp)
 40035c0:	dc800717 	ldw	r18,28(sp)
 40035c4:	dc400617 	ldw	r17,24(sp)
 40035c8:	dc000517 	ldw	r16,20(sp)
 40035cc:	dec00c04 	addi	sp,sp,48
 40035d0:	f800283a 	ret
 40035d4:	05410074 	movhi	r21,1025
 40035d8:	ad679404 	addi	r21,r21,-25008
 40035dc:	a9000017 	ldw	r4,0(r21)
 40035e0:	20800617 	ldw	r2,24(r4)
 40035e4:	3080060e 	bge	r6,r2,4003600 <ecvtbuf+0x118>
 40035e8:	a8800017 	ldw	r2,0(r21)
 40035ec:	14800717 	ldw	r18,28(r2)
 40035f0:	003fcd06 	br	4003528 <ecvtbuf+0x40>
 40035f4:	9009883a 	mov	r4,r18
 40035f8:	000d883a 	mov	r6,zero
 40035fc:	003fe106 	br	4003584 <ecvtbuf+0x9c>
 4003600:	21400717 	ldw	r5,28(r4)
 4003604:	34800044 	addi	r18,r6,1
 4003608:	900d883a 	mov	r6,r18
 400360c:	4004e100 	call	4004e10 <_realloc_r>
 4003610:	1007883a 	mov	r3,r2
 4003614:	10000426 	beq	r2,zero,4003628 <ecvtbuf+0x140>
 4003618:	a8800017 	ldw	r2,0(r21)
 400361c:	10c00715 	stw	r3,28(r2)
 4003620:	14800615 	stw	r18,24(r2)
 4003624:	003ff006 	br	40035e8 <ecvtbuf+0x100>
 4003628:	0005883a 	mov	r2,zero
 400362c:	003fe006 	br	40035b0 <ecvtbuf+0xc8>

04003630 <fcvtbuf>:
 4003630:	defff304 	addi	sp,sp,-52
 4003634:	dc800715 	stw	r18,28(sp)
 4003638:	dc800e17 	ldw	r18,56(sp)
 400363c:	dd800b15 	stw	r22,44(sp)
 4003640:	dd000915 	stw	r20,36(sp)
 4003644:	dcc00815 	stw	r19,32(sp)
 4003648:	dc400615 	stw	r17,24(sp)
 400364c:	dc000515 	stw	r16,20(sp)
 4003650:	dfc00c15 	stw	ra,48(sp)
 4003654:	dd400a15 	stw	r21,40(sp)
 4003658:	2021883a 	mov	r16,r4
 400365c:	2823883a 	mov	r17,r5
 4003660:	3027883a 	mov	r19,r6
 4003664:	3829883a 	mov	r20,r7
 4003668:	dd800d17 	ldw	r22,52(sp)
 400366c:	90004326 	beq	r18,zero,400377c <fcvtbuf+0x14c>
 4003670:	05410074 	movhi	r21,1025
 4003674:	ad679404 	addi	r21,r21,-25008
 4003678:	0005883a 	mov	r2,zero
 400367c:	00cffc34 	movhi	r3,16368
 4003680:	180f883a 	mov	r7,r3
 4003684:	8009883a 	mov	r4,r16
 4003688:	880b883a 	mov	r5,r17
 400368c:	100d883a 	mov	r6,r2
 4003690:	40074600 	call	4007460 <__ltdf2>
 4003694:	1000080e 	bge	r2,zero,40036b8 <fcvtbuf+0x88>
 4003698:	0005883a 	mov	r2,zero
 400369c:	00effc34 	movhi	r3,49136
 40036a0:	180f883a 	mov	r7,r3
 40036a4:	8009883a 	mov	r4,r16
 40036a8:	880b883a 	mov	r5,r17
 40036ac:	100d883a 	mov	r6,r2
 40036b0:	40073500 	call	4007350 <__gtdf2>
 40036b4:	00802c16 	blt	zero,r2,4003768 <fcvtbuf+0x138>
 40036b8:	a9000017 	ldw	r4,0(r21)
 40036bc:	880d883a 	mov	r6,r17
 40036c0:	800b883a 	mov	r5,r16
 40036c4:	01c000c4 	movi	r7,3
 40036c8:	d8800404 	addi	r2,sp,16
 40036cc:	dd800215 	stw	r22,8(sp)
 40036d0:	dcc00015 	stw	r19,0(sp)
 40036d4:	dd000115 	stw	r20,4(sp)
 40036d8:	d8800315 	stw	r2,12(sp)
 40036dc:	40057a80 	call	40057a8 <_dtoa_r>
 40036e0:	1009883a 	mov	r4,r2
 40036e4:	d8c00417 	ldw	r3,16(sp)
 40036e8:	a0800017 	ldw	r2,0(r20)
 40036ec:	008dc83a 	sub	r6,zero,r2
 40036f0:	20c02b2e 	bgeu	r4,r3,40037a0 <fcvtbuf+0x170>
 40036f4:	9007883a 	mov	r3,r18
 40036f8:	20800003 	ldbu	r2,0(r4)
 40036fc:	21000044 	addi	r4,r4,1
 4003700:	31800044 	addi	r6,r6,1
 4003704:	18800005 	stb	r2,0(r3)
 4003708:	d8800417 	ldw	r2,16(sp)
 400370c:	18c00044 	addi	r3,r3,1
 4003710:	20bff936 	bltu	r4,r2,40036f8 <fcvtbuf+0xc8>
 4003714:	34c0080e 	bge	r6,r19,4003738 <fcvtbuf+0x108>
 4003718:	9985c83a 	sub	r2,r19,r6
 400371c:	1809883a 	mov	r4,r3
 4003720:	10c5883a 	add	r2,r2,r3
 4003724:	00c00c04 	movi	r3,48
 4003728:	20c00005 	stb	r3,0(r4)
 400372c:	21000044 	addi	r4,r4,1
 4003730:	113ffd1e 	bne	r2,r4,4003728 <fcvtbuf+0xf8>
 4003734:	1007883a 	mov	r3,r2
 4003738:	18000005 	stb	zero,0(r3)
 400373c:	9005883a 	mov	r2,r18
 4003740:	dfc00c17 	ldw	ra,48(sp)
 4003744:	dd800b17 	ldw	r22,44(sp)
 4003748:	dd400a17 	ldw	r21,40(sp)
 400374c:	dd000917 	ldw	r20,36(sp)
 4003750:	dcc00817 	ldw	r19,32(sp)
 4003754:	dc800717 	ldw	r18,28(sp)
 4003758:	dc400617 	ldw	r17,24(sp)
 400375c:	dc000517 	ldw	r16,20(sp)
 4003760:	dec00d04 	addi	sp,sp,52
 4003764:	f800283a 	ret
 4003768:	a9000017 	ldw	r4,0(r21)
 400376c:	880d883a 	mov	r6,r17
 4003770:	800b883a 	mov	r5,r16
 4003774:	01c00084 	movi	r7,2
 4003778:	003fd306 	br	40036c8 <fcvtbuf+0x98>
 400377c:	05410074 	movhi	r21,1025
 4003780:	ad679404 	addi	r21,r21,-25008
 4003784:	a9000017 	ldw	r4,0(r21)
 4003788:	30c008c4 	addi	r3,r6,35
 400378c:	20800617 	ldw	r2,24(r4)
 4003790:	1880050e 	bge	r3,r2,40037a8 <fcvtbuf+0x178>
 4003794:	a8800017 	ldw	r2,0(r21)
 4003798:	14800717 	ldw	r18,28(r2)
 400379c:	003fb606 	br	4003678 <fcvtbuf+0x48>
 40037a0:	9007883a 	mov	r3,r18
 40037a4:	003fdb06 	br	4003714 <fcvtbuf+0xe4>
 40037a8:	21400717 	ldw	r5,28(r4)
 40037ac:	34800904 	addi	r18,r6,36
 40037b0:	900d883a 	mov	r6,r18
 40037b4:	4004e100 	call	4004e10 <_realloc_r>
 40037b8:	1007883a 	mov	r3,r2
 40037bc:	10000426 	beq	r2,zero,40037d0 <fcvtbuf+0x1a0>
 40037c0:	a8800017 	ldw	r2,0(r21)
 40037c4:	10c00715 	stw	r3,28(r2)
 40037c8:	14800615 	stw	r18,24(r2)
 40037cc:	003ff106 	br	4003794 <fcvtbuf+0x164>
 40037d0:	0005883a 	mov	r2,zero
 40037d4:	003fda06 	br	4003740 <fcvtbuf+0x110>

040037d8 <_malloc_trim_r>:
 40037d8:	defffb04 	addi	sp,sp,-20
 40037dc:	dcc00315 	stw	r19,12(sp)
 40037e0:	04c10074 	movhi	r19,1025
 40037e4:	9ce61d04 	addi	r19,r19,-26508
 40037e8:	dc800215 	stw	r18,8(sp)
 40037ec:	dc400115 	stw	r17,4(sp)
 40037f0:	dc000015 	stw	r16,0(sp)
 40037f4:	2823883a 	mov	r17,r5
 40037f8:	2025883a 	mov	r18,r4
 40037fc:	dfc00415 	stw	ra,16(sp)
 4003800:	4007ad40 	call	4007ad4 <__malloc_lock>
 4003804:	98800217 	ldw	r2,8(r19)
 4003808:	9009883a 	mov	r4,r18
 400380c:	000b883a 	mov	r5,zero
 4003810:	10c00117 	ldw	r3,4(r2)
 4003814:	00bfff04 	movi	r2,-4
 4003818:	18a0703a 	and	r16,r3,r2
 400381c:	8463c83a 	sub	r17,r16,r17
 4003820:	8c401bc4 	addi	r17,r17,111
 4003824:	8822d1fa 	srli	r17,r17,7
 4003828:	00801fc4 	movi	r2,127
 400382c:	8c7fffc4 	addi	r17,r17,-1
 4003830:	882291fa 	slli	r17,r17,7
 4003834:	1440060e 	bge	r2,r17,4003850 <_malloc_trim_r+0x78>
 4003838:	4002c7c0 	call	4002c7c <_sbrk_r>
 400383c:	98c00217 	ldw	r3,8(r19)
 4003840:	9009883a 	mov	r4,r18
 4003844:	044bc83a 	sub	r5,zero,r17
 4003848:	80c7883a 	add	r3,r16,r3
 400384c:	10c00926 	beq	r2,r3,4003874 <_malloc_trim_r+0x9c>
 4003850:	4007af40 	call	4007af4 <__malloc_unlock>
 4003854:	0005883a 	mov	r2,zero
 4003858:	dfc00417 	ldw	ra,16(sp)
 400385c:	dcc00317 	ldw	r19,12(sp)
 4003860:	dc800217 	ldw	r18,8(sp)
 4003864:	dc400117 	ldw	r17,4(sp)
 4003868:	dc000017 	ldw	r16,0(sp)
 400386c:	dec00504 	addi	sp,sp,20
 4003870:	f800283a 	ret
 4003874:	9009883a 	mov	r4,r18
 4003878:	4002c7c0 	call	4002c7c <_sbrk_r>
 400387c:	844dc83a 	sub	r6,r16,r17
 4003880:	00ffffc4 	movi	r3,-1
 4003884:	9009883a 	mov	r4,r18
 4003888:	000b883a 	mov	r5,zero
 400388c:	01c10074 	movhi	r7,1025
 4003890:	39e96a04 	addi	r7,r7,-23128
 4003894:	31800054 	ori	r6,r6,1
 4003898:	10c00926 	beq	r2,r3,40038c0 <_malloc_trim_r+0xe8>
 400389c:	38800017 	ldw	r2,0(r7)
 40038a0:	98c00217 	ldw	r3,8(r19)
 40038a4:	9009883a 	mov	r4,r18
 40038a8:	1445c83a 	sub	r2,r2,r17
 40038ac:	38800015 	stw	r2,0(r7)
 40038b0:	19800115 	stw	r6,4(r3)
 40038b4:	4007af40 	call	4007af4 <__malloc_unlock>
 40038b8:	00800044 	movi	r2,1
 40038bc:	003fe606 	br	4003858 <_malloc_trim_r+0x80>
 40038c0:	4002c7c0 	call	4002c7c <_sbrk_r>
 40038c4:	99800217 	ldw	r6,8(r19)
 40038c8:	100f883a 	mov	r7,r2
 40038cc:	9009883a 	mov	r4,r18
 40038d0:	1187c83a 	sub	r3,r2,r6
 40038d4:	008003c4 	movi	r2,15
 40038d8:	19400054 	ori	r5,r3,1
 40038dc:	10ffdc0e 	bge	r2,r3,4003850 <_malloc_trim_r+0x78>
 40038e0:	00810074 	movhi	r2,1025
 40038e4:	10a79704 	addi	r2,r2,-24996
 40038e8:	10c00017 	ldw	r3,0(r2)
 40038ec:	00810074 	movhi	r2,1025
 40038f0:	10a96a04 	addi	r2,r2,-23128
 40038f4:	31400115 	stw	r5,4(r6)
 40038f8:	38c7c83a 	sub	r3,r7,r3
 40038fc:	10c00015 	stw	r3,0(r2)
 4003900:	003fd306 	br	4003850 <_malloc_trim_r+0x78>

04003904 <_free_r>:
 4003904:	defffd04 	addi	sp,sp,-12
 4003908:	dc400115 	stw	r17,4(sp)
 400390c:	dc000015 	stw	r16,0(sp)
 4003910:	dfc00215 	stw	ra,8(sp)
 4003914:	2821883a 	mov	r16,r5
 4003918:	2023883a 	mov	r17,r4
 400391c:	28005a26 	beq	r5,zero,4003a88 <_free_r+0x184>
 4003920:	4007ad40 	call	4007ad4 <__malloc_lock>
 4003924:	823ffe04 	addi	r8,r16,-8
 4003928:	41400117 	ldw	r5,4(r8)
 400392c:	00bfff84 	movi	r2,-2
 4003930:	02810074 	movhi	r10,1025
 4003934:	52a61d04 	addi	r10,r10,-26508
 4003938:	288e703a 	and	r7,r5,r2
 400393c:	41cd883a 	add	r6,r8,r7
 4003940:	30c00117 	ldw	r3,4(r6)
 4003944:	51000217 	ldw	r4,8(r10)
 4003948:	00bfff04 	movi	r2,-4
 400394c:	1892703a 	and	r9,r3,r2
 4003950:	5017883a 	mov	r11,r10
 4003954:	31006726 	beq	r6,r4,4003af4 <_free_r+0x1f0>
 4003958:	2880004c 	andi	r2,r5,1
 400395c:	1005003a 	cmpeq	r2,r2,zero
 4003960:	32400115 	stw	r9,4(r6)
 4003964:	10001a1e 	bne	r2,zero,40039d0 <_free_r+0xcc>
 4003968:	000b883a 	mov	r5,zero
 400396c:	3247883a 	add	r3,r6,r9
 4003970:	18800117 	ldw	r2,4(r3)
 4003974:	1080004c 	andi	r2,r2,1
 4003978:	1000231e 	bne	r2,zero,4003a08 <_free_r+0x104>
 400397c:	280ac03a 	cmpne	r5,r5,zero
 4003980:	3a4f883a 	add	r7,r7,r9
 4003984:	2800451e 	bne	r5,zero,4003a9c <_free_r+0x198>
 4003988:	31000217 	ldw	r4,8(r6)
 400398c:	00810074 	movhi	r2,1025
 4003990:	10a61f04 	addi	r2,r2,-26500
 4003994:	20807b26 	beq	r4,r2,4003b84 <_free_r+0x280>
 4003998:	30800317 	ldw	r2,12(r6)
 400399c:	3a07883a 	add	r3,r7,r8
 40039a0:	19c00015 	stw	r7,0(r3)
 40039a4:	11000215 	stw	r4,8(r2)
 40039a8:	20800315 	stw	r2,12(r4)
 40039ac:	38800054 	ori	r2,r7,1
 40039b0:	40800115 	stw	r2,4(r8)
 40039b4:	28001a26 	beq	r5,zero,4003a20 <_free_r+0x11c>
 40039b8:	8809883a 	mov	r4,r17
 40039bc:	dfc00217 	ldw	ra,8(sp)
 40039c0:	dc400117 	ldw	r17,4(sp)
 40039c4:	dc000017 	ldw	r16,0(sp)
 40039c8:	dec00304 	addi	sp,sp,12
 40039cc:	4007af41 	jmpi	4007af4 <__malloc_unlock>
 40039d0:	80bffe17 	ldw	r2,-8(r16)
 40039d4:	50c00204 	addi	r3,r10,8
 40039d8:	4091c83a 	sub	r8,r8,r2
 40039dc:	41000217 	ldw	r4,8(r8)
 40039e0:	388f883a 	add	r7,r7,r2
 40039e4:	20c06126 	beq	r4,r3,4003b6c <_free_r+0x268>
 40039e8:	40800317 	ldw	r2,12(r8)
 40039ec:	3247883a 	add	r3,r6,r9
 40039f0:	000b883a 	mov	r5,zero
 40039f4:	11000215 	stw	r4,8(r2)
 40039f8:	20800315 	stw	r2,12(r4)
 40039fc:	18800117 	ldw	r2,4(r3)
 4003a00:	1080004c 	andi	r2,r2,1
 4003a04:	103fdd26 	beq	r2,zero,400397c <_free_r+0x78>
 4003a08:	38800054 	ori	r2,r7,1
 4003a0c:	3a07883a 	add	r3,r7,r8
 4003a10:	280ac03a 	cmpne	r5,r5,zero
 4003a14:	40800115 	stw	r2,4(r8)
 4003a18:	19c00015 	stw	r7,0(r3)
 4003a1c:	283fe61e 	bne	r5,zero,40039b8 <_free_r+0xb4>
 4003a20:	00807fc4 	movi	r2,511
 4003a24:	11c01f2e 	bgeu	r2,r7,4003aa4 <_free_r+0x1a0>
 4003a28:	3806d27a 	srli	r3,r7,9
 4003a2c:	1800481e 	bne	r3,zero,4003b50 <_free_r+0x24c>
 4003a30:	3804d0fa 	srli	r2,r7,3
 4003a34:	100690fa 	slli	r3,r2,3
 4003a38:	1acd883a 	add	r6,r3,r11
 4003a3c:	31400217 	ldw	r5,8(r6)
 4003a40:	31405926 	beq	r6,r5,4003ba8 <_free_r+0x2a4>
 4003a44:	28800117 	ldw	r2,4(r5)
 4003a48:	00ffff04 	movi	r3,-4
 4003a4c:	10c4703a 	and	r2,r2,r3
 4003a50:	3880022e 	bgeu	r7,r2,4003a5c <_free_r+0x158>
 4003a54:	29400217 	ldw	r5,8(r5)
 4003a58:	317ffa1e 	bne	r6,r5,4003a44 <_free_r+0x140>
 4003a5c:	29800317 	ldw	r6,12(r5)
 4003a60:	41800315 	stw	r6,12(r8)
 4003a64:	41400215 	stw	r5,8(r8)
 4003a68:	8809883a 	mov	r4,r17
 4003a6c:	2a000315 	stw	r8,12(r5)
 4003a70:	32000215 	stw	r8,8(r6)
 4003a74:	dfc00217 	ldw	ra,8(sp)
 4003a78:	dc400117 	ldw	r17,4(sp)
 4003a7c:	dc000017 	ldw	r16,0(sp)
 4003a80:	dec00304 	addi	sp,sp,12
 4003a84:	4007af41 	jmpi	4007af4 <__malloc_unlock>
 4003a88:	dfc00217 	ldw	ra,8(sp)
 4003a8c:	dc400117 	ldw	r17,4(sp)
 4003a90:	dc000017 	ldw	r16,0(sp)
 4003a94:	dec00304 	addi	sp,sp,12
 4003a98:	f800283a 	ret
 4003a9c:	31000217 	ldw	r4,8(r6)
 4003aa0:	003fbd06 	br	4003998 <_free_r+0x94>
 4003aa4:	3806d0fa 	srli	r3,r7,3
 4003aa8:	00800044 	movi	r2,1
 4003aac:	51400117 	ldw	r5,4(r10)
 4003ab0:	180890fa 	slli	r4,r3,3
 4003ab4:	1807d0ba 	srai	r3,r3,2
 4003ab8:	22c9883a 	add	r4,r4,r11
 4003abc:	21800217 	ldw	r6,8(r4)
 4003ac0:	10c4983a 	sll	r2,r2,r3
 4003ac4:	41000315 	stw	r4,12(r8)
 4003ac8:	41800215 	stw	r6,8(r8)
 4003acc:	288ab03a 	or	r5,r5,r2
 4003ad0:	22000215 	stw	r8,8(r4)
 4003ad4:	8809883a 	mov	r4,r17
 4003ad8:	51400115 	stw	r5,4(r10)
 4003adc:	32000315 	stw	r8,12(r6)
 4003ae0:	dfc00217 	ldw	ra,8(sp)
 4003ae4:	dc400117 	ldw	r17,4(sp)
 4003ae8:	dc000017 	ldw	r16,0(sp)
 4003aec:	dec00304 	addi	sp,sp,12
 4003af0:	4007af41 	jmpi	4007af4 <__malloc_unlock>
 4003af4:	2880004c 	andi	r2,r5,1
 4003af8:	3a4d883a 	add	r6,r7,r9
 4003afc:	1000071e 	bne	r2,zero,4003b1c <_free_r+0x218>
 4003b00:	80bffe17 	ldw	r2,-8(r16)
 4003b04:	4091c83a 	sub	r8,r8,r2
 4003b08:	41000317 	ldw	r4,12(r8)
 4003b0c:	40c00217 	ldw	r3,8(r8)
 4003b10:	308d883a 	add	r6,r6,r2
 4003b14:	20c00215 	stw	r3,8(r4)
 4003b18:	19000315 	stw	r4,12(r3)
 4003b1c:	00810074 	movhi	r2,1025
 4003b20:	10a79604 	addi	r2,r2,-25000
 4003b24:	11000017 	ldw	r4,0(r2)
 4003b28:	30c00054 	ori	r3,r6,1
 4003b2c:	52000215 	stw	r8,8(r10)
 4003b30:	40c00115 	stw	r3,4(r8)
 4003b34:	313fa036 	bltu	r6,r4,40039b8 <_free_r+0xb4>
 4003b38:	00810074 	movhi	r2,1025
 4003b3c:	10a96004 	addi	r2,r2,-23168
 4003b40:	11400017 	ldw	r5,0(r2)
 4003b44:	8809883a 	mov	r4,r17
 4003b48:	40037d80 	call	40037d8 <_malloc_trim_r>
 4003b4c:	003f9a06 	br	40039b8 <_free_r+0xb4>
 4003b50:	00800104 	movi	r2,4
 4003b54:	10c0072e 	bgeu	r2,r3,4003b74 <_free_r+0x270>
 4003b58:	00800504 	movi	r2,20
 4003b5c:	10c01936 	bltu	r2,r3,4003bc4 <_free_r+0x2c0>
 4003b60:	188016c4 	addi	r2,r3,91
 4003b64:	100690fa 	slli	r3,r2,3
 4003b68:	003fb306 	br	4003a38 <_free_r+0x134>
 4003b6c:	01400044 	movi	r5,1
 4003b70:	003f7e06 	br	400396c <_free_r+0x68>
 4003b74:	3804d1ba 	srli	r2,r7,6
 4003b78:	10800e04 	addi	r2,r2,56
 4003b7c:	100690fa 	slli	r3,r2,3
 4003b80:	003fad06 	br	4003a38 <_free_r+0x134>
 4003b84:	22000315 	stw	r8,12(r4)
 4003b88:	22000215 	stw	r8,8(r4)
 4003b8c:	3a05883a 	add	r2,r7,r8
 4003b90:	38c00054 	ori	r3,r7,1
 4003b94:	11c00015 	stw	r7,0(r2)
 4003b98:	41000215 	stw	r4,8(r8)
 4003b9c:	40c00115 	stw	r3,4(r8)
 4003ba0:	41000315 	stw	r4,12(r8)
 4003ba4:	003f8406 	br	40039b8 <_free_r+0xb4>
 4003ba8:	1005d0ba 	srai	r2,r2,2
 4003bac:	00c00044 	movi	r3,1
 4003bb0:	51000117 	ldw	r4,4(r10)
 4003bb4:	1886983a 	sll	r3,r3,r2
 4003bb8:	20c8b03a 	or	r4,r4,r3
 4003bbc:	51000115 	stw	r4,4(r10)
 4003bc0:	003fa706 	br	4003a60 <_free_r+0x15c>
 4003bc4:	00801504 	movi	r2,84
 4003bc8:	10c00436 	bltu	r2,r3,4003bdc <_free_r+0x2d8>
 4003bcc:	3804d33a 	srli	r2,r7,12
 4003bd0:	10801b84 	addi	r2,r2,110
 4003bd4:	100690fa 	slli	r3,r2,3
 4003bd8:	003f9706 	br	4003a38 <_free_r+0x134>
 4003bdc:	00805504 	movi	r2,340
 4003be0:	10c00436 	bltu	r2,r3,4003bf4 <_free_r+0x2f0>
 4003be4:	3804d3fa 	srli	r2,r7,15
 4003be8:	10801dc4 	addi	r2,r2,119
 4003bec:	100690fa 	slli	r3,r2,3
 4003bf0:	003f9106 	br	4003a38 <_free_r+0x134>
 4003bf4:	00815504 	movi	r2,1364
 4003bf8:	10c0032e 	bgeu	r2,r3,4003c08 <_free_r+0x304>
 4003bfc:	00801f84 	movi	r2,126
 4003c00:	00c0fc04 	movi	r3,1008
 4003c04:	003f8c06 	br	4003a38 <_free_r+0x134>
 4003c08:	3804d4ba 	srli	r2,r7,18
 4003c0c:	10801f04 	addi	r2,r2,124
 4003c10:	100690fa 	slli	r3,r2,3
 4003c14:	003f8806 	br	4003a38 <_free_r+0x134>

04003c18 <__sfvwrite_small_dev>:
 4003c18:	2880000b 	ldhu	r2,0(r5)
 4003c1c:	defffa04 	addi	sp,sp,-24
 4003c20:	dcc00315 	stw	r19,12(sp)
 4003c24:	1080020c 	andi	r2,r2,8
 4003c28:	dc800215 	stw	r18,8(sp)
 4003c2c:	dc400115 	stw	r17,4(sp)
 4003c30:	dfc00515 	stw	ra,20(sp)
 4003c34:	dd000415 	stw	r20,16(sp)
 4003c38:	dc000015 	stw	r16,0(sp)
 4003c3c:	2825883a 	mov	r18,r5
 4003c40:	2027883a 	mov	r19,r4
 4003c44:	3023883a 	mov	r17,r6
 4003c48:	10002026 	beq	r2,zero,4003ccc <__sfvwrite_small_dev+0xb4>
 4003c4c:	2940008f 	ldh	r5,2(r5)
 4003c50:	28000f16 	blt	r5,zero,4003c90 <__sfvwrite_small_dev+0x78>
 4003c54:	01c01b0e 	bge	zero,r7,4003cc4 <__sfvwrite_small_dev+0xac>
 4003c58:	3821883a 	mov	r16,r7
 4003c5c:	05010004 	movi	r20,1024
 4003c60:	00000206 	br	4003c6c <__sfvwrite_small_dev+0x54>
 4003c64:	0400170e 	bge	zero,r16,4003cc4 <__sfvwrite_small_dev+0xac>
 4003c68:	9140008f 	ldh	r5,2(r18)
 4003c6c:	880d883a 	mov	r6,r17
 4003c70:	9809883a 	mov	r4,r19
 4003c74:	800f883a 	mov	r7,r16
 4003c78:	a400010e 	bge	r20,r16,4003c80 <__sfvwrite_small_dev+0x68>
 4003c7c:	01c10004 	movi	r7,1024
 4003c80:	40054240 	call	4005424 <_write_r>
 4003c84:	88a3883a 	add	r17,r17,r2
 4003c88:	80a1c83a 	sub	r16,r16,r2
 4003c8c:	00bff516 	blt	zero,r2,4003c64 <__sfvwrite_small_dev+0x4c>
 4003c90:	9080000b 	ldhu	r2,0(r18)
 4003c94:	00ffffc4 	movi	r3,-1
 4003c98:	10801014 	ori	r2,r2,64
 4003c9c:	9080000d 	sth	r2,0(r18)
 4003ca0:	1805883a 	mov	r2,r3
 4003ca4:	dfc00517 	ldw	ra,20(sp)
 4003ca8:	dd000417 	ldw	r20,16(sp)
 4003cac:	dcc00317 	ldw	r19,12(sp)
 4003cb0:	dc800217 	ldw	r18,8(sp)
 4003cb4:	dc400117 	ldw	r17,4(sp)
 4003cb8:	dc000017 	ldw	r16,0(sp)
 4003cbc:	dec00604 	addi	sp,sp,24
 4003cc0:	f800283a 	ret
 4003cc4:	0007883a 	mov	r3,zero
 4003cc8:	003ff506 	br	4003ca0 <__sfvwrite_small_dev+0x88>
 4003ccc:	00ffffc4 	movi	r3,-1
 4003cd0:	003ff306 	br	4003ca0 <__sfvwrite_small_dev+0x88>

04003cd4 <__hi0bits>:
 4003cd4:	20bfffec 	andhi	r2,r4,65535
 4003cd8:	10001426 	beq	r2,zero,4003d2c <__hi0bits+0x58>
 4003cdc:	0007883a 	mov	r3,zero
 4003ce0:	20bfc02c 	andhi	r2,r4,65280
 4003ce4:	1000021e 	bne	r2,zero,4003cf0 <__hi0bits+0x1c>
 4003ce8:	2008923a 	slli	r4,r4,8
 4003cec:	18c00204 	addi	r3,r3,8
 4003cf0:	20bc002c 	andhi	r2,r4,61440
 4003cf4:	1000021e 	bne	r2,zero,4003d00 <__hi0bits+0x2c>
 4003cf8:	2008913a 	slli	r4,r4,4
 4003cfc:	18c00104 	addi	r3,r3,4
 4003d00:	20b0002c 	andhi	r2,r4,49152
 4003d04:	1000031e 	bne	r2,zero,4003d14 <__hi0bits+0x40>
 4003d08:	2105883a 	add	r2,r4,r4
 4003d0c:	18c00084 	addi	r3,r3,2
 4003d10:	1089883a 	add	r4,r2,r2
 4003d14:	20000316 	blt	r4,zero,4003d24 <__hi0bits+0x50>
 4003d18:	2090002c 	andhi	r2,r4,16384
 4003d1c:	10000626 	beq	r2,zero,4003d38 <__hi0bits+0x64>
 4003d20:	18c00044 	addi	r3,r3,1
 4003d24:	1805883a 	mov	r2,r3
 4003d28:	f800283a 	ret
 4003d2c:	2008943a 	slli	r4,r4,16
 4003d30:	00c00404 	movi	r3,16
 4003d34:	003fea06 	br	4003ce0 <__hi0bits+0xc>
 4003d38:	00c00804 	movi	r3,32
 4003d3c:	1805883a 	mov	r2,r3
 4003d40:	f800283a 	ret

04003d44 <__lo0bits>:
 4003d44:	20c00017 	ldw	r3,0(r4)
 4003d48:	188001cc 	andi	r2,r3,7
 4003d4c:	10000a26 	beq	r2,zero,4003d78 <__lo0bits+0x34>
 4003d50:	1880004c 	andi	r2,r3,1
 4003d54:	1005003a 	cmpeq	r2,r2,zero
 4003d58:	10002126 	beq	r2,zero,4003de0 <__lo0bits+0x9c>
 4003d5c:	1880008c 	andi	r2,r3,2
 4003d60:	1000251e 	bne	r2,zero,4003df8 <__lo0bits+0xb4>
 4003d64:	1804d0ba 	srli	r2,r3,2
 4003d68:	01400084 	movi	r5,2
 4003d6c:	20800015 	stw	r2,0(r4)
 4003d70:	2805883a 	mov	r2,r5
 4003d74:	f800283a 	ret
 4003d78:	18bfffcc 	andi	r2,r3,65535
 4003d7c:	10001526 	beq	r2,zero,4003dd4 <__lo0bits+0x90>
 4003d80:	000b883a 	mov	r5,zero
 4003d84:	18803fcc 	andi	r2,r3,255
 4003d88:	1000021e 	bne	r2,zero,4003d94 <__lo0bits+0x50>
 4003d8c:	1806d23a 	srli	r3,r3,8
 4003d90:	29400204 	addi	r5,r5,8
 4003d94:	188003cc 	andi	r2,r3,15
 4003d98:	1000021e 	bne	r2,zero,4003da4 <__lo0bits+0x60>
 4003d9c:	1806d13a 	srli	r3,r3,4
 4003da0:	29400104 	addi	r5,r5,4
 4003da4:	188000cc 	andi	r2,r3,3
 4003da8:	1000021e 	bne	r2,zero,4003db4 <__lo0bits+0x70>
 4003dac:	1806d0ba 	srli	r3,r3,2
 4003db0:	29400084 	addi	r5,r5,2
 4003db4:	1880004c 	andi	r2,r3,1
 4003db8:	1000031e 	bne	r2,zero,4003dc8 <__lo0bits+0x84>
 4003dbc:	1806d07a 	srli	r3,r3,1
 4003dc0:	18000a26 	beq	r3,zero,4003dec <__lo0bits+0xa8>
 4003dc4:	29400044 	addi	r5,r5,1
 4003dc8:	2805883a 	mov	r2,r5
 4003dcc:	20c00015 	stw	r3,0(r4)
 4003dd0:	f800283a 	ret
 4003dd4:	1806d43a 	srli	r3,r3,16
 4003dd8:	01400404 	movi	r5,16
 4003ddc:	003fe906 	br	4003d84 <__lo0bits+0x40>
 4003de0:	000b883a 	mov	r5,zero
 4003de4:	2805883a 	mov	r2,r5
 4003de8:	f800283a 	ret
 4003dec:	01400804 	movi	r5,32
 4003df0:	2805883a 	mov	r2,r5
 4003df4:	f800283a 	ret
 4003df8:	1804d07a 	srli	r2,r3,1
 4003dfc:	01400044 	movi	r5,1
 4003e00:	20800015 	stw	r2,0(r4)
 4003e04:	003fda06 	br	4003d70 <__lo0bits+0x2c>

04003e08 <__mcmp>:
 4003e08:	20800417 	ldw	r2,16(r4)
 4003e0c:	28c00417 	ldw	r3,16(r5)
 4003e10:	10cfc83a 	sub	r7,r2,r3
 4003e14:	38000c1e 	bne	r7,zero,4003e48 <__mcmp+0x40>
 4003e18:	18c5883a 	add	r2,r3,r3
 4003e1c:	1085883a 	add	r2,r2,r2
 4003e20:	10c00504 	addi	r3,r2,20
 4003e24:	21000504 	addi	r4,r4,20
 4003e28:	28cb883a 	add	r5,r5,r3
 4003e2c:	2085883a 	add	r2,r4,r2
 4003e30:	10bfff04 	addi	r2,r2,-4
 4003e34:	297fff04 	addi	r5,r5,-4
 4003e38:	11800017 	ldw	r6,0(r2)
 4003e3c:	28c00017 	ldw	r3,0(r5)
 4003e40:	30c0031e 	bne	r6,r3,4003e50 <__mcmp+0x48>
 4003e44:	20bffa36 	bltu	r4,r2,4003e30 <__mcmp+0x28>
 4003e48:	3805883a 	mov	r2,r7
 4003e4c:	f800283a 	ret
 4003e50:	30c00336 	bltu	r6,r3,4003e60 <__mcmp+0x58>
 4003e54:	01c00044 	movi	r7,1
 4003e58:	3805883a 	mov	r2,r7
 4003e5c:	f800283a 	ret
 4003e60:	01ffffc4 	movi	r7,-1
 4003e64:	003ff806 	br	4003e48 <__mcmp+0x40>

04003e68 <__ulp>:
 4003e68:	295ffc2c 	andhi	r5,r5,32752
 4003e6c:	013f3034 	movhi	r4,64704
 4003e70:	290b883a 	add	r5,r5,r4
 4003e74:	0145c83a 	sub	r2,zero,r5
 4003e78:	1007d53a 	srai	r3,r2,20
 4003e7c:	000d883a 	mov	r6,zero
 4003e80:	0140040e 	bge	zero,r5,4003e94 <__ulp+0x2c>
 4003e84:	280f883a 	mov	r7,r5
 4003e88:	3807883a 	mov	r3,r7
 4003e8c:	3005883a 	mov	r2,r6
 4003e90:	f800283a 	ret
 4003e94:	008004c4 	movi	r2,19
 4003e98:	193ffb04 	addi	r4,r3,-20
 4003e9c:	10c00c0e 	bge	r2,r3,4003ed0 <__ulp+0x68>
 4003ea0:	008007c4 	movi	r2,31
 4003ea4:	1107c83a 	sub	r3,r2,r4
 4003ea8:	00800784 	movi	r2,30
 4003eac:	01400044 	movi	r5,1
 4003eb0:	11000216 	blt	r2,r4,4003ebc <__ulp+0x54>
 4003eb4:	00800044 	movi	r2,1
 4003eb8:	10ca983a 	sll	r5,r2,r3
 4003ebc:	000f883a 	mov	r7,zero
 4003ec0:	280d883a 	mov	r6,r5
 4003ec4:	3807883a 	mov	r3,r7
 4003ec8:	3005883a 	mov	r2,r6
 4003ecc:	f800283a 	ret
 4003ed0:	00800234 	movhi	r2,8
 4003ed4:	10cfd83a 	sra	r7,r2,r3
 4003ed8:	000d883a 	mov	r6,zero
 4003edc:	3005883a 	mov	r2,r6
 4003ee0:	3807883a 	mov	r3,r7
 4003ee4:	f800283a 	ret

04003ee8 <__b2d>:
 4003ee8:	20800417 	ldw	r2,16(r4)
 4003eec:	defff904 	addi	sp,sp,-28
 4003ef0:	dd000415 	stw	r20,16(sp)
 4003ef4:	1085883a 	add	r2,r2,r2
 4003ef8:	25000504 	addi	r20,r4,20
 4003efc:	1085883a 	add	r2,r2,r2
 4003f00:	dc000015 	stw	r16,0(sp)
 4003f04:	a0a1883a 	add	r16,r20,r2
 4003f08:	dd400515 	stw	r21,20(sp)
 4003f0c:	857fff17 	ldw	r21,-4(r16)
 4003f10:	dc400115 	stw	r17,4(sp)
 4003f14:	dfc00615 	stw	ra,24(sp)
 4003f18:	a809883a 	mov	r4,r21
 4003f1c:	2823883a 	mov	r17,r5
 4003f20:	dcc00315 	stw	r19,12(sp)
 4003f24:	dc800215 	stw	r18,8(sp)
 4003f28:	4003cd40 	call	4003cd4 <__hi0bits>
 4003f2c:	100b883a 	mov	r5,r2
 4003f30:	00800804 	movi	r2,32
 4003f34:	1145c83a 	sub	r2,r2,r5
 4003f38:	88800015 	stw	r2,0(r17)
 4003f3c:	00800284 	movi	r2,10
 4003f40:	80ffff04 	addi	r3,r16,-4
 4003f44:	11401416 	blt	r2,r5,4003f98 <__b2d+0xb0>
 4003f48:	008002c4 	movi	r2,11
 4003f4c:	1149c83a 	sub	r4,r2,r5
 4003f50:	a0c02736 	bltu	r20,r3,4003ff0 <__b2d+0x108>
 4003f54:	000d883a 	mov	r6,zero
 4003f58:	28800544 	addi	r2,r5,21
 4003f5c:	a906d83a 	srl	r3,r21,r4
 4003f60:	a884983a 	sll	r2,r21,r2
 4003f64:	1ccffc34 	orhi	r19,r3,16368
 4003f68:	11a4b03a 	or	r18,r2,r6
 4003f6c:	9005883a 	mov	r2,r18
 4003f70:	9807883a 	mov	r3,r19
 4003f74:	dfc00617 	ldw	ra,24(sp)
 4003f78:	dd400517 	ldw	r21,20(sp)
 4003f7c:	dd000417 	ldw	r20,16(sp)
 4003f80:	dcc00317 	ldw	r19,12(sp)
 4003f84:	dc800217 	ldw	r18,8(sp)
 4003f88:	dc400117 	ldw	r17,4(sp)
 4003f8c:	dc000017 	ldw	r16,0(sp)
 4003f90:	dec00704 	addi	sp,sp,28
 4003f94:	f800283a 	ret
 4003f98:	a0c00e36 	bltu	r20,r3,4003fd4 <__b2d+0xec>
 4003f9c:	293ffd44 	addi	r4,r5,-11
 4003fa0:	000d883a 	mov	r6,zero
 4003fa4:	20000f26 	beq	r4,zero,4003fe4 <__b2d+0xfc>
 4003fa8:	00800804 	movi	r2,32
 4003fac:	110bc83a 	sub	r5,r2,r4
 4003fb0:	a0c01236 	bltu	r20,r3,4003ffc <__b2d+0x114>
 4003fb4:	000f883a 	mov	r7,zero
 4003fb8:	a904983a 	sll	r2,r21,r4
 4003fbc:	3146d83a 	srl	r3,r6,r5
 4003fc0:	3108983a 	sll	r4,r6,r4
 4003fc4:	108ffc34 	orhi	r2,r2,16368
 4003fc8:	18a6b03a 	or	r19,r3,r2
 4003fcc:	3924b03a 	or	r18,r7,r4
 4003fd0:	003fe606 	br	4003f6c <__b2d+0x84>
 4003fd4:	293ffd44 	addi	r4,r5,-11
 4003fd8:	81bffe17 	ldw	r6,-8(r16)
 4003fdc:	80fffe04 	addi	r3,r16,-8
 4003fe0:	203ff11e 	bne	r4,zero,4003fa8 <__b2d+0xc0>
 4003fe4:	accffc34 	orhi	r19,r21,16368
 4003fe8:	3025883a 	mov	r18,r6
 4003fec:	003fdf06 	br	4003f6c <__b2d+0x84>
 4003ff0:	18bfff17 	ldw	r2,-4(r3)
 4003ff4:	110cd83a 	srl	r6,r2,r4
 4003ff8:	003fd706 	br	4003f58 <__b2d+0x70>
 4003ffc:	18bfff17 	ldw	r2,-4(r3)
 4004000:	114ed83a 	srl	r7,r2,r5
 4004004:	003fec06 	br	4003fb8 <__b2d+0xd0>

04004008 <__ratio>:
 4004008:	defff904 	addi	sp,sp,-28
 400400c:	dc400215 	stw	r17,8(sp)
 4004010:	2823883a 	mov	r17,r5
 4004014:	d80b883a 	mov	r5,sp
 4004018:	dfc00615 	stw	ra,24(sp)
 400401c:	dd000515 	stw	r20,20(sp)
 4004020:	dcc00415 	stw	r19,16(sp)
 4004024:	dc800315 	stw	r18,12(sp)
 4004028:	2025883a 	mov	r18,r4
 400402c:	4003ee80 	call	4003ee8 <__b2d>
 4004030:	8809883a 	mov	r4,r17
 4004034:	d9400104 	addi	r5,sp,4
 4004038:	1027883a 	mov	r19,r2
 400403c:	1829883a 	mov	r20,r3
 4004040:	4003ee80 	call	4003ee8 <__b2d>
 4004044:	89000417 	ldw	r4,16(r17)
 4004048:	91c00417 	ldw	r7,16(r18)
 400404c:	d9800117 	ldw	r6,4(sp)
 4004050:	180b883a 	mov	r5,r3
 4004054:	390fc83a 	sub	r7,r7,r4
 4004058:	1009883a 	mov	r4,r2
 400405c:	d8800017 	ldw	r2,0(sp)
 4004060:	380e917a 	slli	r7,r7,5
 4004064:	2011883a 	mov	r8,r4
 4004068:	1185c83a 	sub	r2,r2,r6
 400406c:	11c5883a 	add	r2,r2,r7
 4004070:	1006953a 	slli	r3,r2,20
 4004074:	2813883a 	mov	r9,r5
 4004078:	00800d0e 	bge	zero,r2,40040b0 <__ratio+0xa8>
 400407c:	1d29883a 	add	r20,r3,r20
 4004080:	a00b883a 	mov	r5,r20
 4004084:	480f883a 	mov	r7,r9
 4004088:	9809883a 	mov	r4,r19
 400408c:	400d883a 	mov	r6,r8
 4004090:	40015700 	call	4001570 <__divdf3>
 4004094:	dfc00617 	ldw	ra,24(sp)
 4004098:	dd000517 	ldw	r20,20(sp)
 400409c:	dcc00417 	ldw	r19,16(sp)
 40040a0:	dc800317 	ldw	r18,12(sp)
 40040a4:	dc400217 	ldw	r17,8(sp)
 40040a8:	dec00704 	addi	sp,sp,28
 40040ac:	f800283a 	ret
 40040b0:	28d3c83a 	sub	r9,r5,r3
 40040b4:	003ff206 	br	4004080 <__ratio+0x78>

040040b8 <_mprec_log10>:
 40040b8:	defffe04 	addi	sp,sp,-8
 40040bc:	008005c4 	movi	r2,23
 40040c0:	dc000015 	stw	r16,0(sp)
 40040c4:	dfc00115 	stw	ra,4(sp)
 40040c8:	2021883a 	mov	r16,r4
 40040cc:	11000c16 	blt	r2,r4,4004100 <_mprec_log10+0x48>
 40040d0:	200490fa 	slli	r2,r4,3
 40040d4:	00c10074 	movhi	r3,1025
 40040d8:	18e58c04 	addi	r3,r3,-27088
 40040dc:	10c5883a 	add	r2,r2,r3
 40040e0:	12400117 	ldw	r9,4(r2)
 40040e4:	12000017 	ldw	r8,0(r2)
 40040e8:	4807883a 	mov	r3,r9
 40040ec:	4005883a 	mov	r2,r8
 40040f0:	dfc00117 	ldw	ra,4(sp)
 40040f4:	dc000017 	ldw	r16,0(sp)
 40040f8:	dec00204 	addi	sp,sp,8
 40040fc:	f800283a 	ret
 4004100:	0011883a 	mov	r8,zero
 4004104:	024ffc34 	movhi	r9,16368
 4004108:	0005883a 	mov	r2,zero
 400410c:	00d00934 	movhi	r3,16420
 4004110:	480b883a 	mov	r5,r9
 4004114:	4009883a 	mov	r4,r8
 4004118:	180f883a 	mov	r7,r3
 400411c:	100d883a 	mov	r6,r2
 4004120:	4006e7c0 	call	4006e7c <__muldf3>
 4004124:	843fffc4 	addi	r16,r16,-1
 4004128:	1011883a 	mov	r8,r2
 400412c:	1813883a 	mov	r9,r3
 4004130:	803ff51e 	bne	r16,zero,4004108 <_mprec_log10+0x50>
 4004134:	4005883a 	mov	r2,r8
 4004138:	4807883a 	mov	r3,r9
 400413c:	dfc00117 	ldw	ra,4(sp)
 4004140:	dc000017 	ldw	r16,0(sp)
 4004144:	dec00204 	addi	sp,sp,8
 4004148:	f800283a 	ret

0400414c <__copybits>:
 400414c:	297fffc4 	addi	r5,r5,-1
 4004150:	30800417 	ldw	r2,16(r6)
 4004154:	280bd17a 	srai	r5,r5,5
 4004158:	31800504 	addi	r6,r6,20
 400415c:	1085883a 	add	r2,r2,r2
 4004160:	294b883a 	add	r5,r5,r5
 4004164:	294b883a 	add	r5,r5,r5
 4004168:	1085883a 	add	r2,r2,r2
 400416c:	290b883a 	add	r5,r5,r4
 4004170:	3087883a 	add	r3,r6,r2
 4004174:	29400104 	addi	r5,r5,4
 4004178:	30c0052e 	bgeu	r6,r3,4004190 <__copybits+0x44>
 400417c:	30800017 	ldw	r2,0(r6)
 4004180:	31800104 	addi	r6,r6,4
 4004184:	20800015 	stw	r2,0(r4)
 4004188:	21000104 	addi	r4,r4,4
 400418c:	30fffb36 	bltu	r6,r3,400417c <__copybits+0x30>
 4004190:	2140032e 	bgeu	r4,r5,40041a0 <__copybits+0x54>
 4004194:	20000015 	stw	zero,0(r4)
 4004198:	21000104 	addi	r4,r4,4
 400419c:	217ffd36 	bltu	r4,r5,4004194 <__copybits+0x48>
 40041a0:	f800283a 	ret

040041a4 <__any_on>:
 40041a4:	20800417 	ldw	r2,16(r4)
 40041a8:	2807d17a 	srai	r3,r5,5
 40041ac:	21000504 	addi	r4,r4,20
 40041b0:	10c00d0e 	bge	r2,r3,40041e8 <__any_on+0x44>
 40041b4:	1085883a 	add	r2,r2,r2
 40041b8:	1085883a 	add	r2,r2,r2
 40041bc:	208d883a 	add	r6,r4,r2
 40041c0:	2180182e 	bgeu	r4,r6,4004224 <__any_on+0x80>
 40041c4:	30bfff17 	ldw	r2,-4(r6)
 40041c8:	30ffff04 	addi	r3,r6,-4
 40041cc:	1000041e 	bne	r2,zero,40041e0 <__any_on+0x3c>
 40041d0:	20c0142e 	bgeu	r4,r3,4004224 <__any_on+0x80>
 40041d4:	18ffff04 	addi	r3,r3,-4
 40041d8:	18800017 	ldw	r2,0(r3)
 40041dc:	103ffc26 	beq	r2,zero,40041d0 <__any_on+0x2c>
 40041e0:	00800044 	movi	r2,1
 40041e4:	f800283a 	ret
 40041e8:	18800a0e 	bge	r3,r2,4004214 <__any_on+0x70>
 40041ec:	294007cc 	andi	r5,r5,31
 40041f0:	28000826 	beq	r5,zero,4004214 <__any_on+0x70>
 40041f4:	18c5883a 	add	r2,r3,r3
 40041f8:	1085883a 	add	r2,r2,r2
 40041fc:	208d883a 	add	r6,r4,r2
 4004200:	30c00017 	ldw	r3,0(r6)
 4004204:	1944d83a 	srl	r2,r3,r5
 4004208:	1144983a 	sll	r2,r2,r5
 400420c:	18bff41e 	bne	r3,r2,40041e0 <__any_on+0x3c>
 4004210:	003feb06 	br	40041c0 <__any_on+0x1c>
 4004214:	18c5883a 	add	r2,r3,r3
 4004218:	1085883a 	add	r2,r2,r2
 400421c:	208d883a 	add	r6,r4,r2
 4004220:	003fe706 	br	40041c0 <__any_on+0x1c>
 4004224:	0005883a 	mov	r2,zero
 4004228:	f800283a 	ret

0400422c <_Bfree>:
 400422c:	20800417 	ldw	r2,16(r4)
 4004230:	defffd04 	addi	sp,sp,-12
 4004234:	dc000115 	stw	r16,4(sp)
 4004238:	dfc00215 	stw	ra,8(sp)
 400423c:	2021883a 	mov	r16,r4
 4004240:	01000404 	movi	r4,16
 4004244:	10000e26 	beq	r2,zero,4004280 <_Bfree+0x54>
 4004248:	28000926 	beq	r5,zero,4004270 <_Bfree+0x44>
 400424c:	80c00417 	ldw	r3,16(r16)
 4004250:	28800117 	ldw	r2,4(r5)
 4004254:	19000317 	ldw	r4,12(r3)
 4004258:	1085883a 	add	r2,r2,r2
 400425c:	1085883a 	add	r2,r2,r2
 4004260:	1105883a 	add	r2,r2,r4
 4004264:	10c00017 	ldw	r3,0(r2)
 4004268:	28c00015 	stw	r3,0(r5)
 400426c:	11400015 	stw	r5,0(r2)
 4004270:	dfc00217 	ldw	ra,8(sp)
 4004274:	dc000117 	ldw	r16,4(sp)
 4004278:	dec00304 	addi	sp,sp,12
 400427c:	f800283a 	ret
 4004280:	d9400015 	stw	r5,0(sp)
 4004284:	40024640 	call	4002464 <malloc>
 4004288:	d9400017 	ldw	r5,0(sp)
 400428c:	10000315 	stw	zero,12(r2)
 4004290:	10000215 	stw	zero,8(r2)
 4004294:	10000015 	stw	zero,0(r2)
 4004298:	80800415 	stw	r2,16(r16)
 400429c:	10000115 	stw	zero,4(r2)
 40042a0:	003fe906 	br	4004248 <_Bfree+0x1c>

040042a4 <_Balloc>:
 40042a4:	defffb04 	addi	sp,sp,-20
 40042a8:	dc000015 	stw	r16,0(sp)
 40042ac:	24000417 	ldw	r16,16(r4)
 40042b0:	dc800215 	stw	r18,8(sp)
 40042b4:	dc400115 	stw	r17,4(sp)
 40042b8:	dfc00415 	stw	ra,16(sp)
 40042bc:	dcc00315 	stw	r19,12(sp)
 40042c0:	2025883a 	mov	r18,r4
 40042c4:	2823883a 	mov	r17,r5
 40042c8:	80001426 	beq	r16,zero,400431c <_Balloc+0x78>
 40042cc:	80800317 	ldw	r2,12(r16)
 40042d0:	10001a26 	beq	r2,zero,400433c <_Balloc+0x98>
 40042d4:	80c00317 	ldw	r3,12(r16)
 40042d8:	8c45883a 	add	r2,r17,r17
 40042dc:	1085883a 	add	r2,r2,r2
 40042e0:	10c7883a 	add	r3,r2,r3
 40042e4:	1c000017 	ldw	r16,0(r3)
 40042e8:	80001e26 	beq	r16,zero,4004364 <_Balloc+0xc0>
 40042ec:	80800017 	ldw	r2,0(r16)
 40042f0:	18800015 	stw	r2,0(r3)
 40042f4:	80000415 	stw	zero,16(r16)
 40042f8:	80000315 	stw	zero,12(r16)
 40042fc:	8005883a 	mov	r2,r16
 4004300:	dfc00417 	ldw	ra,16(sp)
 4004304:	dcc00317 	ldw	r19,12(sp)
 4004308:	dc800217 	ldw	r18,8(sp)
 400430c:	dc400117 	ldw	r17,4(sp)
 4004310:	dc000017 	ldw	r16,0(sp)
 4004314:	dec00504 	addi	sp,sp,20
 4004318:	f800283a 	ret
 400431c:	01000404 	movi	r4,16
 4004320:	40024640 	call	4002464 <malloc>
 4004324:	1021883a 	mov	r16,r2
 4004328:	90800415 	stw	r2,16(r18)
 400432c:	10000115 	stw	zero,4(r2)
 4004330:	10000215 	stw	zero,8(r2)
 4004334:	10000015 	stw	zero,0(r2)
 4004338:	10000315 	stw	zero,12(r2)
 400433c:	9009883a 	mov	r4,r18
 4004340:	01400104 	movi	r5,4
 4004344:	01800404 	movi	r6,16
 4004348:	400549c0 	call	400549c <_calloc_r>
 400434c:	80800315 	stw	r2,12(r16)
 4004350:	94000417 	ldw	r16,16(r18)
 4004354:	80800317 	ldw	r2,12(r16)
 4004358:	103fde1e 	bne	r2,zero,40042d4 <_Balloc+0x30>
 400435c:	0021883a 	mov	r16,zero
 4004360:	003fe606 	br	40042fc <_Balloc+0x58>
 4004364:	01400044 	movi	r5,1
 4004368:	2c66983a 	sll	r19,r5,r17
 400436c:	9009883a 	mov	r4,r18
 4004370:	9ccd883a 	add	r6,r19,r19
 4004374:	318d883a 	add	r6,r6,r6
 4004378:	31800504 	addi	r6,r6,20
 400437c:	400549c0 	call	400549c <_calloc_r>
 4004380:	103fde26 	beq	r2,zero,40042fc <_Balloc+0x58>
 4004384:	1021883a 	mov	r16,r2
 4004388:	14400115 	stw	r17,4(r2)
 400438c:	14c00215 	stw	r19,8(r2)
 4004390:	003fd806 	br	40042f4 <_Balloc+0x50>

04004394 <__d2b>:
 4004394:	defff504 	addi	sp,sp,-44
 4004398:	dcc00515 	stw	r19,20(sp)
 400439c:	04c00044 	movi	r19,1
 40043a0:	dc000215 	stw	r16,8(sp)
 40043a4:	2821883a 	mov	r16,r5
 40043a8:	980b883a 	mov	r5,r19
 40043ac:	ddc00915 	stw	r23,36(sp)
 40043b0:	dd800815 	stw	r22,32(sp)
 40043b4:	dd400715 	stw	r21,28(sp)
 40043b8:	dd000615 	stw	r20,24(sp)
 40043bc:	dc800415 	stw	r18,16(sp)
 40043c0:	dc400315 	stw	r17,12(sp)
 40043c4:	dfc00a15 	stw	ra,40(sp)
 40043c8:	3023883a 	mov	r17,r6
 40043cc:	382d883a 	mov	r22,r7
 40043d0:	ddc00b17 	ldw	r23,44(sp)
 40043d4:	40042a40 	call	40042a4 <_Balloc>
 40043d8:	1025883a 	mov	r18,r2
 40043dc:	00a00034 	movhi	r2,32768
 40043e0:	10bfffc4 	addi	r2,r2,-1
 40043e4:	8888703a 	and	r4,r17,r2
 40043e8:	202ad53a 	srli	r21,r4,20
 40043ec:	00800434 	movhi	r2,16
 40043f0:	10bfffc4 	addi	r2,r2,-1
 40043f4:	8886703a 	and	r3,r17,r2
 40043f8:	a829003a 	cmpeq	r20,r21,zero
 40043fc:	800b883a 	mov	r5,r16
 4004400:	d8c00115 	stw	r3,4(sp)
 4004404:	94000504 	addi	r16,r18,20
 4004408:	a000021e 	bne	r20,zero,4004414 <__d2b+0x80>
 400440c:	18c00434 	orhi	r3,r3,16
 4004410:	d8c00115 	stw	r3,4(sp)
 4004414:	28002726 	beq	r5,zero,40044b4 <__d2b+0x120>
 4004418:	d809883a 	mov	r4,sp
 400441c:	d9400015 	stw	r5,0(sp)
 4004420:	4003d440 	call	4003d44 <__lo0bits>
 4004424:	100d883a 	mov	r6,r2
 4004428:	10003526 	beq	r2,zero,4004500 <__d2b+0x16c>
 400442c:	d8c00117 	ldw	r3,4(sp)
 4004430:	00800804 	movi	r2,32
 4004434:	1185c83a 	sub	r2,r2,r6
 4004438:	d9000017 	ldw	r4,0(sp)
 400443c:	1886983a 	sll	r3,r3,r2
 4004440:	1906b03a 	or	r3,r3,r4
 4004444:	90c00515 	stw	r3,20(r18)
 4004448:	d8c00117 	ldw	r3,4(sp)
 400444c:	1986d83a 	srl	r3,r3,r6
 4004450:	d8c00115 	stw	r3,4(sp)
 4004454:	180b003a 	cmpeq	r5,r3,zero
 4004458:	00800084 	movi	r2,2
 400445c:	114bc83a 	sub	r5,r2,r5
 4004460:	80c00115 	stw	r3,4(r16)
 4004464:	91400415 	stw	r5,16(r18)
 4004468:	a0001a1e 	bne	r20,zero,40044d4 <__d2b+0x140>
 400446c:	3545883a 	add	r2,r6,r21
 4004470:	10bef344 	addi	r2,r2,-1075
 4004474:	00c00d44 	movi	r3,53
 4004478:	b0800015 	stw	r2,0(r22)
 400447c:	1987c83a 	sub	r3,r3,r6
 4004480:	b8c00015 	stw	r3,0(r23)
 4004484:	9005883a 	mov	r2,r18
 4004488:	dfc00a17 	ldw	ra,40(sp)
 400448c:	ddc00917 	ldw	r23,36(sp)
 4004490:	dd800817 	ldw	r22,32(sp)
 4004494:	dd400717 	ldw	r21,28(sp)
 4004498:	dd000617 	ldw	r20,24(sp)
 400449c:	dcc00517 	ldw	r19,20(sp)
 40044a0:	dc800417 	ldw	r18,16(sp)
 40044a4:	dc400317 	ldw	r17,12(sp)
 40044a8:	dc000217 	ldw	r16,8(sp)
 40044ac:	dec00b04 	addi	sp,sp,44
 40044b0:	f800283a 	ret
 40044b4:	d9000104 	addi	r4,sp,4
 40044b8:	4003d440 	call	4003d44 <__lo0bits>
 40044bc:	11800804 	addi	r6,r2,32
 40044c0:	d8800117 	ldw	r2,4(sp)
 40044c4:	94c00415 	stw	r19,16(r18)
 40044c8:	980b883a 	mov	r5,r19
 40044cc:	90800515 	stw	r2,20(r18)
 40044d0:	a03fe626 	beq	r20,zero,400446c <__d2b+0xd8>
 40044d4:	2945883a 	add	r2,r5,r5
 40044d8:	1085883a 	add	r2,r2,r2
 40044dc:	1405883a 	add	r2,r2,r16
 40044e0:	113fff17 	ldw	r4,-4(r2)
 40044e4:	30fef384 	addi	r3,r6,-1074
 40044e8:	2820917a 	slli	r16,r5,5
 40044ec:	b0c00015 	stw	r3,0(r22)
 40044f0:	4003cd40 	call	4003cd4 <__hi0bits>
 40044f4:	80a1c83a 	sub	r16,r16,r2
 40044f8:	bc000015 	stw	r16,0(r23)
 40044fc:	003fe106 	br	4004484 <__d2b+0xf0>
 4004500:	d8800017 	ldw	r2,0(sp)
 4004504:	90800515 	stw	r2,20(r18)
 4004508:	d8c00117 	ldw	r3,4(sp)
 400450c:	003fd106 	br	4004454 <__d2b+0xc0>

04004510 <__mdiff>:
 4004510:	defffb04 	addi	sp,sp,-20
 4004514:	dc000015 	stw	r16,0(sp)
 4004518:	2821883a 	mov	r16,r5
 400451c:	dc800215 	stw	r18,8(sp)
 4004520:	300b883a 	mov	r5,r6
 4004524:	2025883a 	mov	r18,r4
 4004528:	8009883a 	mov	r4,r16
 400452c:	dc400115 	stw	r17,4(sp)
 4004530:	dfc00415 	stw	ra,16(sp)
 4004534:	dcc00315 	stw	r19,12(sp)
 4004538:	3023883a 	mov	r17,r6
 400453c:	4003e080 	call	4003e08 <__mcmp>
 4004540:	10004226 	beq	r2,zero,400464c <__mdiff+0x13c>
 4004544:	10005016 	blt	r2,zero,4004688 <__mdiff+0x178>
 4004548:	0027883a 	mov	r19,zero
 400454c:	81400117 	ldw	r5,4(r16)
 4004550:	9009883a 	mov	r4,r18
 4004554:	40042a40 	call	40042a4 <_Balloc>
 4004558:	1019883a 	mov	r12,r2
 400455c:	82800417 	ldw	r10,16(r16)
 4004560:	88800417 	ldw	r2,16(r17)
 4004564:	81800504 	addi	r6,r16,20
 4004568:	5287883a 	add	r3,r10,r10
 400456c:	1085883a 	add	r2,r2,r2
 4004570:	18c7883a 	add	r3,r3,r3
 4004574:	1085883a 	add	r2,r2,r2
 4004578:	8a000504 	addi	r8,r17,20
 400457c:	64c00315 	stw	r19,12(r12)
 4004580:	30db883a 	add	r13,r6,r3
 4004584:	4097883a 	add	r11,r8,r2
 4004588:	61c00504 	addi	r7,r12,20
 400458c:	0013883a 	mov	r9,zero
 4004590:	31000017 	ldw	r4,0(r6)
 4004594:	41400017 	ldw	r5,0(r8)
 4004598:	42000104 	addi	r8,r8,4
 400459c:	20bfffcc 	andi	r2,r4,65535
 40045a0:	28ffffcc 	andi	r3,r5,65535
 40045a4:	10c5c83a 	sub	r2,r2,r3
 40045a8:	1245883a 	add	r2,r2,r9
 40045ac:	2008d43a 	srli	r4,r4,16
 40045b0:	280ad43a 	srli	r5,r5,16
 40045b4:	1007d43a 	srai	r3,r2,16
 40045b8:	3880000d 	sth	r2,0(r7)
 40045bc:	2149c83a 	sub	r4,r4,r5
 40045c0:	20c9883a 	add	r4,r4,r3
 40045c4:	3900008d 	sth	r4,2(r7)
 40045c8:	31800104 	addi	r6,r6,4
 40045cc:	39c00104 	addi	r7,r7,4
 40045d0:	2013d43a 	srai	r9,r4,16
 40045d4:	42ffee36 	bltu	r8,r11,4004590 <__mdiff+0x80>
 40045d8:	33400c2e 	bgeu	r6,r13,400460c <__mdiff+0xfc>
 40045dc:	30800017 	ldw	r2,0(r6)
 40045e0:	31800104 	addi	r6,r6,4
 40045e4:	10ffffcc 	andi	r3,r2,65535
 40045e8:	1a47883a 	add	r3,r3,r9
 40045ec:	1004d43a 	srli	r2,r2,16
 40045f0:	1809d43a 	srai	r4,r3,16
 40045f4:	38c0000d 	sth	r3,0(r7)
 40045f8:	1105883a 	add	r2,r2,r4
 40045fc:	3880008d 	sth	r2,2(r7)
 4004600:	1013d43a 	srai	r9,r2,16
 4004604:	39c00104 	addi	r7,r7,4
 4004608:	337ff436 	bltu	r6,r13,40045dc <__mdiff+0xcc>
 400460c:	38bfff17 	ldw	r2,-4(r7)
 4004610:	38ffff04 	addi	r3,r7,-4
 4004614:	1000041e 	bne	r2,zero,4004628 <__mdiff+0x118>
 4004618:	18ffff04 	addi	r3,r3,-4
 400461c:	18800017 	ldw	r2,0(r3)
 4004620:	52bfffc4 	addi	r10,r10,-1
 4004624:	103ffc26 	beq	r2,zero,4004618 <__mdiff+0x108>
 4004628:	6005883a 	mov	r2,r12
 400462c:	62800415 	stw	r10,16(r12)
 4004630:	dfc00417 	ldw	ra,16(sp)
 4004634:	dcc00317 	ldw	r19,12(sp)
 4004638:	dc800217 	ldw	r18,8(sp)
 400463c:	dc400117 	ldw	r17,4(sp)
 4004640:	dc000017 	ldw	r16,0(sp)
 4004644:	dec00504 	addi	sp,sp,20
 4004648:	f800283a 	ret
 400464c:	9009883a 	mov	r4,r18
 4004650:	000b883a 	mov	r5,zero
 4004654:	40042a40 	call	40042a4 <_Balloc>
 4004658:	1019883a 	mov	r12,r2
 400465c:	00800044 	movi	r2,1
 4004660:	60800415 	stw	r2,16(r12)
 4004664:	6005883a 	mov	r2,r12
 4004668:	60000515 	stw	zero,20(r12)
 400466c:	dfc00417 	ldw	ra,16(sp)
 4004670:	dcc00317 	ldw	r19,12(sp)
 4004674:	dc800217 	ldw	r18,8(sp)
 4004678:	dc400117 	ldw	r17,4(sp)
 400467c:	dc000017 	ldw	r16,0(sp)
 4004680:	dec00504 	addi	sp,sp,20
 4004684:	f800283a 	ret
 4004688:	880d883a 	mov	r6,r17
 400468c:	04c00044 	movi	r19,1
 4004690:	8023883a 	mov	r17,r16
 4004694:	3021883a 	mov	r16,r6
 4004698:	003fac06 	br	400454c <__mdiff+0x3c>

0400469c <__lshift>:
 400469c:	defff904 	addi	sp,sp,-28
 40046a0:	28800417 	ldw	r2,16(r5)
 40046a4:	dc000015 	stw	r16,0(sp)
 40046a8:	3021d17a 	srai	r16,r6,5
 40046ac:	28c00217 	ldw	r3,8(r5)
 40046b0:	10800044 	addi	r2,r2,1
 40046b4:	dc400115 	stw	r17,4(sp)
 40046b8:	80a3883a 	add	r17,r16,r2
 40046bc:	dd400515 	stw	r21,20(sp)
 40046c0:	dd000415 	stw	r20,16(sp)
 40046c4:	dc800215 	stw	r18,8(sp)
 40046c8:	dfc00615 	stw	ra,24(sp)
 40046cc:	2825883a 	mov	r18,r5
 40046d0:	dcc00315 	stw	r19,12(sp)
 40046d4:	3029883a 	mov	r20,r6
 40046d8:	202b883a 	mov	r21,r4
 40046dc:	29400117 	ldw	r5,4(r5)
 40046e0:	1c40030e 	bge	r3,r17,40046f0 <__lshift+0x54>
 40046e4:	18c7883a 	add	r3,r3,r3
 40046e8:	29400044 	addi	r5,r5,1
 40046ec:	1c7ffd16 	blt	r3,r17,40046e4 <__lshift+0x48>
 40046f0:	a809883a 	mov	r4,r21
 40046f4:	40042a40 	call	40042a4 <_Balloc>
 40046f8:	1027883a 	mov	r19,r2
 40046fc:	11400504 	addi	r5,r2,20
 4004700:	0400090e 	bge	zero,r16,4004728 <__lshift+0x8c>
 4004704:	2805883a 	mov	r2,r5
 4004708:	0007883a 	mov	r3,zero
 400470c:	18c00044 	addi	r3,r3,1
 4004710:	10000015 	stw	zero,0(r2)
 4004714:	10800104 	addi	r2,r2,4
 4004718:	80fffc1e 	bne	r16,r3,400470c <__lshift+0x70>
 400471c:	8405883a 	add	r2,r16,r16
 4004720:	1085883a 	add	r2,r2,r2
 4004724:	288b883a 	add	r5,r5,r2
 4004728:	90800417 	ldw	r2,16(r18)
 400472c:	91000504 	addi	r4,r18,20
 4004730:	a18007cc 	andi	r6,r20,31
 4004734:	1085883a 	add	r2,r2,r2
 4004738:	1085883a 	add	r2,r2,r2
 400473c:	208f883a 	add	r7,r4,r2
 4004740:	30001e26 	beq	r6,zero,40047bc <__lshift+0x120>
 4004744:	00800804 	movi	r2,32
 4004748:	1191c83a 	sub	r8,r2,r6
 400474c:	0007883a 	mov	r3,zero
 4004750:	20800017 	ldw	r2,0(r4)
 4004754:	1184983a 	sll	r2,r2,r6
 4004758:	1884b03a 	or	r2,r3,r2
 400475c:	28800015 	stw	r2,0(r5)
 4004760:	20c00017 	ldw	r3,0(r4)
 4004764:	21000104 	addi	r4,r4,4
 4004768:	29400104 	addi	r5,r5,4
 400476c:	1a06d83a 	srl	r3,r3,r8
 4004770:	21fff736 	bltu	r4,r7,4004750 <__lshift+0xb4>
 4004774:	28c00015 	stw	r3,0(r5)
 4004778:	18000126 	beq	r3,zero,4004780 <__lshift+0xe4>
 400477c:	8c400044 	addi	r17,r17,1
 4004780:	88bfffc4 	addi	r2,r17,-1
 4004784:	98800415 	stw	r2,16(r19)
 4004788:	a809883a 	mov	r4,r21
 400478c:	900b883a 	mov	r5,r18
 4004790:	400422c0 	call	400422c <_Bfree>
 4004794:	9805883a 	mov	r2,r19
 4004798:	dfc00617 	ldw	ra,24(sp)
 400479c:	dd400517 	ldw	r21,20(sp)
 40047a0:	dd000417 	ldw	r20,16(sp)
 40047a4:	dcc00317 	ldw	r19,12(sp)
 40047a8:	dc800217 	ldw	r18,8(sp)
 40047ac:	dc400117 	ldw	r17,4(sp)
 40047b0:	dc000017 	ldw	r16,0(sp)
 40047b4:	dec00704 	addi	sp,sp,28
 40047b8:	f800283a 	ret
 40047bc:	20800017 	ldw	r2,0(r4)
 40047c0:	21000104 	addi	r4,r4,4
 40047c4:	28800015 	stw	r2,0(r5)
 40047c8:	29400104 	addi	r5,r5,4
 40047cc:	21ffec2e 	bgeu	r4,r7,4004780 <__lshift+0xe4>
 40047d0:	20800017 	ldw	r2,0(r4)
 40047d4:	21000104 	addi	r4,r4,4
 40047d8:	28800015 	stw	r2,0(r5)
 40047dc:	29400104 	addi	r5,r5,4
 40047e0:	21fff636 	bltu	r4,r7,40047bc <__lshift+0x120>
 40047e4:	003fe606 	br	4004780 <__lshift+0xe4>

040047e8 <__multiply>:
 40047e8:	defff004 	addi	sp,sp,-64
 40047ec:	dc800815 	stw	r18,32(sp)
 40047f0:	dc400715 	stw	r17,28(sp)
 40047f4:	2c800417 	ldw	r18,16(r5)
 40047f8:	34400417 	ldw	r17,16(r6)
 40047fc:	dcc00915 	stw	r19,36(sp)
 4004800:	dc000615 	stw	r16,24(sp)
 4004804:	dfc00f15 	stw	ra,60(sp)
 4004808:	df000e15 	stw	fp,56(sp)
 400480c:	ddc00d15 	stw	r23,52(sp)
 4004810:	dd800c15 	stw	r22,48(sp)
 4004814:	dd400b15 	stw	r21,44(sp)
 4004818:	dd000a15 	stw	r20,40(sp)
 400481c:	2821883a 	mov	r16,r5
 4004820:	3027883a 	mov	r19,r6
 4004824:	9440040e 	bge	r18,r17,4004838 <__multiply+0x50>
 4004828:	8825883a 	mov	r18,r17
 400482c:	2c400417 	ldw	r17,16(r5)
 4004830:	2827883a 	mov	r19,r5
 4004834:	3021883a 	mov	r16,r6
 4004838:	80800217 	ldw	r2,8(r16)
 400483c:	9447883a 	add	r3,r18,r17
 4004840:	d8c00415 	stw	r3,16(sp)
 4004844:	81400117 	ldw	r5,4(r16)
 4004848:	10c0010e 	bge	r2,r3,4004850 <__multiply+0x68>
 400484c:	29400044 	addi	r5,r5,1
 4004850:	40042a40 	call	40042a4 <_Balloc>
 4004854:	d8800515 	stw	r2,20(sp)
 4004858:	d9000417 	ldw	r4,16(sp)
 400485c:	d8c00517 	ldw	r3,20(sp)
 4004860:	2105883a 	add	r2,r4,r4
 4004864:	1085883a 	add	r2,r2,r2
 4004868:	19000504 	addi	r4,r3,20
 400486c:	2085883a 	add	r2,r4,r2
 4004870:	d8800315 	stw	r2,12(sp)
 4004874:	2080052e 	bgeu	r4,r2,400488c <__multiply+0xa4>
 4004878:	2005883a 	mov	r2,r4
 400487c:	d8c00317 	ldw	r3,12(sp)
 4004880:	10000015 	stw	zero,0(r2)
 4004884:	10800104 	addi	r2,r2,4
 4004888:	10fffc36 	bltu	r2,r3,400487c <__multiply+0x94>
 400488c:	8c45883a 	add	r2,r17,r17
 4004890:	9487883a 	add	r3,r18,r18
 4004894:	9dc00504 	addi	r23,r19,20
 4004898:	1085883a 	add	r2,r2,r2
 400489c:	84000504 	addi	r16,r16,20
 40048a0:	18c7883a 	add	r3,r3,r3
 40048a4:	b885883a 	add	r2,r23,r2
 40048a8:	dc000015 	stw	r16,0(sp)
 40048ac:	d8800215 	stw	r2,8(sp)
 40048b0:	80f9883a 	add	fp,r16,r3
 40048b4:	b880432e 	bgeu	r23,r2,40049c4 <__multiply+0x1dc>
 40048b8:	d9000115 	stw	r4,4(sp)
 40048bc:	b9000017 	ldw	r4,0(r23)
 40048c0:	253fffcc 	andi	r20,r4,65535
 40048c4:	a0001a26 	beq	r20,zero,4004930 <__multiply+0x148>
 40048c8:	dcc00017 	ldw	r19,0(sp)
 40048cc:	dc800117 	ldw	r18,4(sp)
 40048d0:	002b883a 	mov	r21,zero
 40048d4:	9c400017 	ldw	r17,0(r19)
 40048d8:	94000017 	ldw	r16,0(r18)
 40048dc:	a009883a 	mov	r4,r20
 40048e0:	897fffcc 	andi	r5,r17,65535
 40048e4:	400195c0 	call	400195c <__mulsi3>
 40048e8:	880ad43a 	srli	r5,r17,16
 40048ec:	80ffffcc 	andi	r3,r16,65535
 40048f0:	a8c7883a 	add	r3,r21,r3
 40048f4:	a009883a 	mov	r4,r20
 40048f8:	10e3883a 	add	r17,r2,r3
 40048fc:	8020d43a 	srli	r16,r16,16
 4004900:	400195c0 	call	400195c <__mulsi3>
 4004904:	8806d43a 	srli	r3,r17,16
 4004908:	1405883a 	add	r2,r2,r16
 400490c:	9cc00104 	addi	r19,r19,4
 4004910:	1887883a 	add	r3,r3,r2
 4004914:	90c0008d 	sth	r3,2(r18)
 4004918:	9440000d 	sth	r17,0(r18)
 400491c:	182ad43a 	srli	r21,r3,16
 4004920:	94800104 	addi	r18,r18,4
 4004924:	9f3feb36 	bltu	r19,fp,40048d4 <__multiply+0xec>
 4004928:	95400015 	stw	r21,0(r18)
 400492c:	b9000017 	ldw	r4,0(r23)
 4004930:	202ad43a 	srli	r21,r4,16
 4004934:	a8001c26 	beq	r21,zero,40049a8 <__multiply+0x1c0>
 4004938:	d9000117 	ldw	r4,4(sp)
 400493c:	dd000017 	ldw	r20,0(sp)
 4004940:	002d883a 	mov	r22,zero
 4004944:	24c00017 	ldw	r19,0(r4)
 4004948:	2025883a 	mov	r18,r4
 400494c:	9823883a 	mov	r17,r19
 4004950:	a4000017 	ldw	r16,0(r20)
 4004954:	a809883a 	mov	r4,r21
 4004958:	a5000104 	addi	r20,r20,4
 400495c:	817fffcc 	andi	r5,r16,65535
 4004960:	400195c0 	call	400195c <__mulsi3>
 4004964:	8806d43a 	srli	r3,r17,16
 4004968:	800ad43a 	srli	r5,r16,16
 400496c:	94c0000d 	sth	r19,0(r18)
 4004970:	b0c7883a 	add	r3,r22,r3
 4004974:	10e1883a 	add	r16,r2,r3
 4004978:	9400008d 	sth	r16,2(r18)
 400497c:	a809883a 	mov	r4,r21
 4004980:	94800104 	addi	r18,r18,4
 4004984:	400195c0 	call	400195c <__mulsi3>
 4004988:	94400017 	ldw	r17,0(r18)
 400498c:	8020d43a 	srli	r16,r16,16
 4004990:	88ffffcc 	andi	r3,r17,65535
 4004994:	10c5883a 	add	r2,r2,r3
 4004998:	80a7883a 	add	r19,r16,r2
 400499c:	982cd43a 	srli	r22,r19,16
 40049a0:	a73feb36 	bltu	r20,fp,4004950 <__multiply+0x168>
 40049a4:	94c00015 	stw	r19,0(r18)
 40049a8:	d8800217 	ldw	r2,8(sp)
 40049ac:	bdc00104 	addi	r23,r23,4
 40049b0:	b880042e 	bgeu	r23,r2,40049c4 <__multiply+0x1dc>
 40049b4:	d8c00117 	ldw	r3,4(sp)
 40049b8:	18c00104 	addi	r3,r3,4
 40049bc:	d8c00115 	stw	r3,4(sp)
 40049c0:	003fbe06 	br	40048bc <__multiply+0xd4>
 40049c4:	d9000417 	ldw	r4,16(sp)
 40049c8:	01000c0e 	bge	zero,r4,40049fc <__multiply+0x214>
 40049cc:	d8c00317 	ldw	r3,12(sp)
 40049d0:	18bfff17 	ldw	r2,-4(r3)
 40049d4:	18ffff04 	addi	r3,r3,-4
 40049d8:	10000326 	beq	r2,zero,40049e8 <__multiply+0x200>
 40049dc:	00000706 	br	40049fc <__multiply+0x214>
 40049e0:	18800017 	ldw	r2,0(r3)
 40049e4:	1000051e 	bne	r2,zero,40049fc <__multiply+0x214>
 40049e8:	d9000417 	ldw	r4,16(sp)
 40049ec:	18ffff04 	addi	r3,r3,-4
 40049f0:	213fffc4 	addi	r4,r4,-1
 40049f4:	d9000415 	stw	r4,16(sp)
 40049f8:	203ff91e 	bne	r4,zero,40049e0 <__multiply+0x1f8>
 40049fc:	d8800417 	ldw	r2,16(sp)
 4004a00:	d8c00517 	ldw	r3,20(sp)
 4004a04:	18800415 	stw	r2,16(r3)
 4004a08:	1805883a 	mov	r2,r3
 4004a0c:	dfc00f17 	ldw	ra,60(sp)
 4004a10:	df000e17 	ldw	fp,56(sp)
 4004a14:	ddc00d17 	ldw	r23,52(sp)
 4004a18:	dd800c17 	ldw	r22,48(sp)
 4004a1c:	dd400b17 	ldw	r21,44(sp)
 4004a20:	dd000a17 	ldw	r20,40(sp)
 4004a24:	dcc00917 	ldw	r19,36(sp)
 4004a28:	dc800817 	ldw	r18,32(sp)
 4004a2c:	dc400717 	ldw	r17,28(sp)
 4004a30:	dc000617 	ldw	r16,24(sp)
 4004a34:	dec01004 	addi	sp,sp,64
 4004a38:	f800283a 	ret

04004a3c <__i2b>:
 4004a3c:	defffd04 	addi	sp,sp,-12
 4004a40:	dc000015 	stw	r16,0(sp)
 4004a44:	04000044 	movi	r16,1
 4004a48:	dc800115 	stw	r18,4(sp)
 4004a4c:	2825883a 	mov	r18,r5
 4004a50:	800b883a 	mov	r5,r16
 4004a54:	dfc00215 	stw	ra,8(sp)
 4004a58:	40042a40 	call	40042a4 <_Balloc>
 4004a5c:	14000415 	stw	r16,16(r2)
 4004a60:	14800515 	stw	r18,20(r2)
 4004a64:	dfc00217 	ldw	ra,8(sp)
 4004a68:	dc800117 	ldw	r18,4(sp)
 4004a6c:	dc000017 	ldw	r16,0(sp)
 4004a70:	dec00304 	addi	sp,sp,12
 4004a74:	f800283a 	ret

04004a78 <__multadd>:
 4004a78:	defff604 	addi	sp,sp,-40
 4004a7c:	dd800615 	stw	r22,24(sp)
 4004a80:	2d800417 	ldw	r22,16(r5)
 4004a84:	df000815 	stw	fp,32(sp)
 4004a88:	ddc00715 	stw	r23,28(sp)
 4004a8c:	dd400515 	stw	r21,20(sp)
 4004a90:	dd000415 	stw	r20,16(sp)
 4004a94:	dcc00315 	stw	r19,12(sp)
 4004a98:	dc800215 	stw	r18,8(sp)
 4004a9c:	dfc00915 	stw	ra,36(sp)
 4004aa0:	dc400115 	stw	r17,4(sp)
 4004aa4:	dc000015 	stw	r16,0(sp)
 4004aa8:	282f883a 	mov	r23,r5
 4004aac:	2039883a 	mov	fp,r4
 4004ab0:	302b883a 	mov	r21,r6
 4004ab4:	3829883a 	mov	r20,r7
 4004ab8:	2c800504 	addi	r18,r5,20
 4004abc:	0027883a 	mov	r19,zero
 4004ac0:	94400017 	ldw	r17,0(r18)
 4004ac4:	a80b883a 	mov	r5,r21
 4004ac8:	9cc00044 	addi	r19,r19,1
 4004acc:	893fffcc 	andi	r4,r17,65535
 4004ad0:	400195c0 	call	400195c <__mulsi3>
 4004ad4:	8808d43a 	srli	r4,r17,16
 4004ad8:	1521883a 	add	r16,r2,r20
 4004adc:	a80b883a 	mov	r5,r21
 4004ae0:	400195c0 	call	400195c <__mulsi3>
 4004ae4:	8008d43a 	srli	r4,r16,16
 4004ae8:	843fffcc 	andi	r16,r16,65535
 4004aec:	1105883a 	add	r2,r2,r4
 4004af0:	1006943a 	slli	r3,r2,16
 4004af4:	1028d43a 	srli	r20,r2,16
 4004af8:	1c07883a 	add	r3,r3,r16
 4004afc:	90c00015 	stw	r3,0(r18)
 4004b00:	94800104 	addi	r18,r18,4
 4004b04:	9dbfee16 	blt	r19,r22,4004ac0 <__multadd+0x48>
 4004b08:	a0000826 	beq	r20,zero,4004b2c <__multadd+0xb4>
 4004b0c:	b8800217 	ldw	r2,8(r23)
 4004b10:	b080130e 	bge	r22,r2,4004b60 <__multadd+0xe8>
 4004b14:	b585883a 	add	r2,r22,r22
 4004b18:	1085883a 	add	r2,r2,r2
 4004b1c:	15c5883a 	add	r2,r2,r23
 4004b20:	b0c00044 	addi	r3,r22,1
 4004b24:	15000515 	stw	r20,20(r2)
 4004b28:	b8c00415 	stw	r3,16(r23)
 4004b2c:	b805883a 	mov	r2,r23
 4004b30:	dfc00917 	ldw	ra,36(sp)
 4004b34:	df000817 	ldw	fp,32(sp)
 4004b38:	ddc00717 	ldw	r23,28(sp)
 4004b3c:	dd800617 	ldw	r22,24(sp)
 4004b40:	dd400517 	ldw	r21,20(sp)
 4004b44:	dd000417 	ldw	r20,16(sp)
 4004b48:	dcc00317 	ldw	r19,12(sp)
 4004b4c:	dc800217 	ldw	r18,8(sp)
 4004b50:	dc400117 	ldw	r17,4(sp)
 4004b54:	dc000017 	ldw	r16,0(sp)
 4004b58:	dec00a04 	addi	sp,sp,40
 4004b5c:	f800283a 	ret
 4004b60:	b9400117 	ldw	r5,4(r23)
 4004b64:	e009883a 	mov	r4,fp
 4004b68:	29400044 	addi	r5,r5,1
 4004b6c:	40042a40 	call	40042a4 <_Balloc>
 4004b70:	b9800417 	ldw	r6,16(r23)
 4004b74:	b9400304 	addi	r5,r23,12
 4004b78:	11000304 	addi	r4,r2,12
 4004b7c:	318d883a 	add	r6,r6,r6
 4004b80:	318d883a 	add	r6,r6,r6
 4004b84:	31800204 	addi	r6,r6,8
 4004b88:	1023883a 	mov	r17,r2
 4004b8c:	4006d9c0 	call	4006d9c <memcpy>
 4004b90:	b80b883a 	mov	r5,r23
 4004b94:	e009883a 	mov	r4,fp
 4004b98:	400422c0 	call	400422c <_Bfree>
 4004b9c:	882f883a 	mov	r23,r17
 4004ba0:	003fdc06 	br	4004b14 <__multadd+0x9c>

04004ba4 <__pow5mult>:
 4004ba4:	defffa04 	addi	sp,sp,-24
 4004ba8:	308000cc 	andi	r2,r6,3
 4004bac:	dd000415 	stw	r20,16(sp)
 4004bb0:	dcc00315 	stw	r19,12(sp)
 4004bb4:	dc000015 	stw	r16,0(sp)
 4004bb8:	dfc00515 	stw	ra,20(sp)
 4004bbc:	dc800215 	stw	r18,8(sp)
 4004bc0:	dc400115 	stw	r17,4(sp)
 4004bc4:	3021883a 	mov	r16,r6
 4004bc8:	2027883a 	mov	r19,r4
 4004bcc:	2829883a 	mov	r20,r5
 4004bd0:	10002d1e 	bne	r2,zero,4004c88 <__pow5mult+0xe4>
 4004bd4:	8025d0ba 	srai	r18,r16,2
 4004bd8:	90001d26 	beq	r18,zero,4004c50 <__pow5mult+0xac>
 4004bdc:	9c400417 	ldw	r17,16(r19)
 4004be0:	88003a26 	beq	r17,zero,4004ccc <__pow5mult+0x128>
 4004be4:	8c000217 	ldw	r16,8(r17)
 4004be8:	8000081e 	bne	r16,zero,4004c0c <__pow5mult+0x68>
 4004bec:	00003006 	br	4004cb0 <__pow5mult+0x10c>
 4004bf0:	800b883a 	mov	r5,r16
 4004bf4:	800d883a 	mov	r6,r16
 4004bf8:	9809883a 	mov	r4,r19
 4004bfc:	90001426 	beq	r18,zero,4004c50 <__pow5mult+0xac>
 4004c00:	80800017 	ldw	r2,0(r16)
 4004c04:	10001b26 	beq	r2,zero,4004c74 <__pow5mult+0xd0>
 4004c08:	1021883a 	mov	r16,r2
 4004c0c:	9080004c 	andi	r2,r18,1
 4004c10:	1005003a 	cmpeq	r2,r2,zero
 4004c14:	9025d07a 	srai	r18,r18,1
 4004c18:	800d883a 	mov	r6,r16
 4004c1c:	9809883a 	mov	r4,r19
 4004c20:	a00b883a 	mov	r5,r20
 4004c24:	103ff21e 	bne	r2,zero,4004bf0 <__pow5mult+0x4c>
 4004c28:	40047e80 	call	40047e8 <__multiply>
 4004c2c:	a00b883a 	mov	r5,r20
 4004c30:	9809883a 	mov	r4,r19
 4004c34:	1023883a 	mov	r17,r2
 4004c38:	400422c0 	call	400422c <_Bfree>
 4004c3c:	8829883a 	mov	r20,r17
 4004c40:	800b883a 	mov	r5,r16
 4004c44:	800d883a 	mov	r6,r16
 4004c48:	9809883a 	mov	r4,r19
 4004c4c:	903fec1e 	bne	r18,zero,4004c00 <__pow5mult+0x5c>
 4004c50:	a005883a 	mov	r2,r20
 4004c54:	dfc00517 	ldw	ra,20(sp)
 4004c58:	dd000417 	ldw	r20,16(sp)
 4004c5c:	dcc00317 	ldw	r19,12(sp)
 4004c60:	dc800217 	ldw	r18,8(sp)
 4004c64:	dc400117 	ldw	r17,4(sp)
 4004c68:	dc000017 	ldw	r16,0(sp)
 4004c6c:	dec00604 	addi	sp,sp,24
 4004c70:	f800283a 	ret
 4004c74:	40047e80 	call	40047e8 <__multiply>
 4004c78:	80800015 	stw	r2,0(r16)
 4004c7c:	1021883a 	mov	r16,r2
 4004c80:	10000015 	stw	zero,0(r2)
 4004c84:	003fe106 	br	4004c0c <__pow5mult+0x68>
 4004c88:	1085883a 	add	r2,r2,r2
 4004c8c:	00c10074 	movhi	r3,1025
 4004c90:	18e5d204 	addi	r3,r3,-26808
 4004c94:	1085883a 	add	r2,r2,r2
 4004c98:	10c5883a 	add	r2,r2,r3
 4004c9c:	11bfff17 	ldw	r6,-4(r2)
 4004ca0:	000f883a 	mov	r7,zero
 4004ca4:	4004a780 	call	4004a78 <__multadd>
 4004ca8:	1029883a 	mov	r20,r2
 4004cac:	003fc906 	br	4004bd4 <__pow5mult+0x30>
 4004cb0:	9809883a 	mov	r4,r19
 4004cb4:	01409c44 	movi	r5,625
 4004cb8:	4004a3c0 	call	4004a3c <__i2b>
 4004cbc:	88800215 	stw	r2,8(r17)
 4004cc0:	1021883a 	mov	r16,r2
 4004cc4:	10000015 	stw	zero,0(r2)
 4004cc8:	003fd006 	br	4004c0c <__pow5mult+0x68>
 4004ccc:	01000404 	movi	r4,16
 4004cd0:	40024640 	call	4002464 <malloc>
 4004cd4:	1023883a 	mov	r17,r2
 4004cd8:	98800415 	stw	r2,16(r19)
 4004cdc:	10000115 	stw	zero,4(r2)
 4004ce0:	10000215 	stw	zero,8(r2)
 4004ce4:	10000015 	stw	zero,0(r2)
 4004ce8:	10000315 	stw	zero,12(r2)
 4004cec:	003fbd06 	br	4004be4 <__pow5mult+0x40>

04004cf0 <__s2b>:
 4004cf0:	defff904 	addi	sp,sp,-28
 4004cf4:	dcc00315 	stw	r19,12(sp)
 4004cf8:	dc800215 	stw	r18,8(sp)
 4004cfc:	2827883a 	mov	r19,r5
 4004d00:	2025883a 	mov	r18,r4
 4004d04:	01400244 	movi	r5,9
 4004d08:	39000204 	addi	r4,r7,8
 4004d0c:	dd000415 	stw	r20,16(sp)
 4004d10:	dc400115 	stw	r17,4(sp)
 4004d14:	dfc00615 	stw	ra,24(sp)
 4004d18:	dd400515 	stw	r21,20(sp)
 4004d1c:	dc000015 	stw	r16,0(sp)
 4004d20:	3829883a 	mov	r20,r7
 4004d24:	3023883a 	mov	r17,r6
 4004d28:	40077f40 	call	40077f4 <__divsi3>
 4004d2c:	00c00044 	movi	r3,1
 4004d30:	1880350e 	bge	r3,r2,4004e08 <__s2b+0x118>
 4004d34:	000b883a 	mov	r5,zero
 4004d38:	18c7883a 	add	r3,r3,r3
 4004d3c:	29400044 	addi	r5,r5,1
 4004d40:	18bffd16 	blt	r3,r2,4004d38 <__s2b+0x48>
 4004d44:	9009883a 	mov	r4,r18
 4004d48:	40042a40 	call	40042a4 <_Balloc>
 4004d4c:	1011883a 	mov	r8,r2
 4004d50:	d8800717 	ldw	r2,28(sp)
 4004d54:	00c00044 	movi	r3,1
 4004d58:	01800244 	movi	r6,9
 4004d5c:	40800515 	stw	r2,20(r8)
 4004d60:	40c00415 	stw	r3,16(r8)
 4004d64:	3440260e 	bge	r6,r17,4004e00 <__s2b+0x110>
 4004d68:	3021883a 	mov	r16,r6
 4004d6c:	99ab883a 	add	r21,r19,r6
 4004d70:	9c05883a 	add	r2,r19,r16
 4004d74:	11c00007 	ldb	r7,0(r2)
 4004d78:	400b883a 	mov	r5,r8
 4004d7c:	9009883a 	mov	r4,r18
 4004d80:	39fff404 	addi	r7,r7,-48
 4004d84:	01800284 	movi	r6,10
 4004d88:	4004a780 	call	4004a78 <__multadd>
 4004d8c:	84000044 	addi	r16,r16,1
 4004d90:	1011883a 	mov	r8,r2
 4004d94:	8c3ff61e 	bne	r17,r16,4004d70 <__s2b+0x80>
 4004d98:	ac45883a 	add	r2,r21,r17
 4004d9c:	117ffe04 	addi	r5,r2,-8
 4004da0:	880d883a 	mov	r6,r17
 4004da4:	35000c0e 	bge	r6,r20,4004dd8 <__s2b+0xe8>
 4004da8:	a185c83a 	sub	r2,r20,r6
 4004dac:	2821883a 	mov	r16,r5
 4004db0:	28a3883a 	add	r17,r5,r2
 4004db4:	81c00007 	ldb	r7,0(r16)
 4004db8:	400b883a 	mov	r5,r8
 4004dbc:	9009883a 	mov	r4,r18
 4004dc0:	39fff404 	addi	r7,r7,-48
 4004dc4:	01800284 	movi	r6,10
 4004dc8:	4004a780 	call	4004a78 <__multadd>
 4004dcc:	84000044 	addi	r16,r16,1
 4004dd0:	1011883a 	mov	r8,r2
 4004dd4:	847ff71e 	bne	r16,r17,4004db4 <__s2b+0xc4>
 4004dd8:	4005883a 	mov	r2,r8
 4004ddc:	dfc00617 	ldw	ra,24(sp)
 4004de0:	dd400517 	ldw	r21,20(sp)
 4004de4:	dd000417 	ldw	r20,16(sp)
 4004de8:	dcc00317 	ldw	r19,12(sp)
 4004dec:	dc800217 	ldw	r18,8(sp)
 4004df0:	dc400117 	ldw	r17,4(sp)
 4004df4:	dc000017 	ldw	r16,0(sp)
 4004df8:	dec00704 	addi	sp,sp,28
 4004dfc:	f800283a 	ret
 4004e00:	99400284 	addi	r5,r19,10
 4004e04:	003fe706 	br	4004da4 <__s2b+0xb4>
 4004e08:	000b883a 	mov	r5,zero
 4004e0c:	003fcd06 	br	4004d44 <__s2b+0x54>

04004e10 <_realloc_r>:
 4004e10:	defff404 	addi	sp,sp,-48
 4004e14:	dd800815 	stw	r22,32(sp)
 4004e18:	dc800415 	stw	r18,16(sp)
 4004e1c:	dc400315 	stw	r17,12(sp)
 4004e20:	dfc00b15 	stw	ra,44(sp)
 4004e24:	df000a15 	stw	fp,40(sp)
 4004e28:	ddc00915 	stw	r23,36(sp)
 4004e2c:	dd400715 	stw	r21,28(sp)
 4004e30:	dd000615 	stw	r20,24(sp)
 4004e34:	dcc00515 	stw	r19,20(sp)
 4004e38:	dc000215 	stw	r16,8(sp)
 4004e3c:	2825883a 	mov	r18,r5
 4004e40:	3023883a 	mov	r17,r6
 4004e44:	202d883a 	mov	r22,r4
 4004e48:	2800c926 	beq	r5,zero,4005170 <_realloc_r+0x360>
 4004e4c:	4007ad40 	call	4007ad4 <__malloc_lock>
 4004e50:	943ffe04 	addi	r16,r18,-8
 4004e54:	88c002c4 	addi	r3,r17,11
 4004e58:	00800584 	movi	r2,22
 4004e5c:	82000117 	ldw	r8,4(r16)
 4004e60:	10c01b2e 	bgeu	r2,r3,4004ed0 <_realloc_r+0xc0>
 4004e64:	00bffe04 	movi	r2,-8
 4004e68:	188e703a 	and	r7,r3,r2
 4004e6c:	3839883a 	mov	fp,r7
 4004e70:	38001a16 	blt	r7,zero,4004edc <_realloc_r+0xcc>
 4004e74:	e4401936 	bltu	fp,r17,4004edc <_realloc_r+0xcc>
 4004e78:	013fff04 	movi	r4,-4
 4004e7c:	4126703a 	and	r19,r8,r4
 4004e80:	99c02616 	blt	r19,r7,4004f1c <_realloc_r+0x10c>
 4004e84:	802b883a 	mov	r21,r16
 4004e88:	9829883a 	mov	r20,r19
 4004e8c:	84000204 	addi	r16,r16,8
 4004e90:	a80f883a 	mov	r7,r21
 4004e94:	a70dc83a 	sub	r6,r20,fp
 4004e98:	008003c4 	movi	r2,15
 4004e9c:	1180c136 	bltu	r2,r6,40051a4 <_realloc_r+0x394>
 4004ea0:	38800117 	ldw	r2,4(r7)
 4004ea4:	a549883a 	add	r4,r20,r21
 4004ea8:	1080004c 	andi	r2,r2,1
 4004eac:	a084b03a 	or	r2,r20,r2
 4004eb0:	38800115 	stw	r2,4(r7)
 4004eb4:	20c00117 	ldw	r3,4(r4)
 4004eb8:	18c00054 	ori	r3,r3,1
 4004ebc:	20c00115 	stw	r3,4(r4)
 4004ec0:	b009883a 	mov	r4,r22
 4004ec4:	4007af40 	call	4007af4 <__malloc_unlock>
 4004ec8:	8023883a 	mov	r17,r16
 4004ecc:	00000606 	br	4004ee8 <_realloc_r+0xd8>
 4004ed0:	01c00404 	movi	r7,16
 4004ed4:	3839883a 	mov	fp,r7
 4004ed8:	e47fe72e 	bgeu	fp,r17,4004e78 <_realloc_r+0x68>
 4004edc:	00800304 	movi	r2,12
 4004ee0:	0023883a 	mov	r17,zero
 4004ee4:	b0800015 	stw	r2,0(r22)
 4004ee8:	8805883a 	mov	r2,r17
 4004eec:	dfc00b17 	ldw	ra,44(sp)
 4004ef0:	df000a17 	ldw	fp,40(sp)
 4004ef4:	ddc00917 	ldw	r23,36(sp)
 4004ef8:	dd800817 	ldw	r22,32(sp)
 4004efc:	dd400717 	ldw	r21,28(sp)
 4004f00:	dd000617 	ldw	r20,24(sp)
 4004f04:	dcc00517 	ldw	r19,20(sp)
 4004f08:	dc800417 	ldw	r18,16(sp)
 4004f0c:	dc400317 	ldw	r17,12(sp)
 4004f10:	dc000217 	ldw	r16,8(sp)
 4004f14:	dec00c04 	addi	sp,sp,48
 4004f18:	f800283a 	ret
 4004f1c:	00810074 	movhi	r2,1025
 4004f20:	10a61d04 	addi	r2,r2,-26508
 4004f24:	12400217 	ldw	r9,8(r2)
 4004f28:	84cd883a 	add	r6,r16,r19
 4004f2c:	802b883a 	mov	r21,r16
 4004f30:	3240b926 	beq	r6,r9,4005218 <_realloc_r+0x408>
 4004f34:	31400117 	ldw	r5,4(r6)
 4004f38:	00bfff84 	movi	r2,-2
 4004f3c:	2884703a 	and	r2,r5,r2
 4004f40:	1185883a 	add	r2,r2,r6
 4004f44:	10c00117 	ldw	r3,4(r2)
 4004f48:	18c0004c 	andi	r3,r3,1
 4004f4c:	1807003a 	cmpeq	r3,r3,zero
 4004f50:	1800a326 	beq	r3,zero,40051e0 <_realloc_r+0x3d0>
 4004f54:	2908703a 	and	r4,r5,r4
 4004f58:	9929883a 	add	r20,r19,r4
 4004f5c:	a1c0a30e 	bge	r20,r7,40051ec <_realloc_r+0x3dc>
 4004f60:	4080004c 	andi	r2,r8,1
 4004f64:	1000551e 	bne	r2,zero,40050bc <_realloc_r+0x2ac>
 4004f68:	80800017 	ldw	r2,0(r16)
 4004f6c:	80afc83a 	sub	r23,r16,r2
 4004f70:	b8c00117 	ldw	r3,4(r23)
 4004f74:	00bfff04 	movi	r2,-4
 4004f78:	1884703a 	and	r2,r3,r2
 4004f7c:	30002e26 	beq	r6,zero,4005038 <_realloc_r+0x228>
 4004f80:	3240b926 	beq	r6,r9,4005268 <_realloc_r+0x458>
 4004f84:	98a9883a 	add	r20,r19,r2
 4004f88:	2509883a 	add	r4,r4,r20
 4004f8c:	d9000015 	stw	r4,0(sp)
 4004f90:	21c02a16 	blt	r4,r7,400503c <_realloc_r+0x22c>
 4004f94:	30800317 	ldw	r2,12(r6)
 4004f98:	30c00217 	ldw	r3,8(r6)
 4004f9c:	01400904 	movi	r5,36
 4004fa0:	99bfff04 	addi	r6,r19,-4
 4004fa4:	18800315 	stw	r2,12(r3)
 4004fa8:	10c00215 	stw	r3,8(r2)
 4004fac:	b9000317 	ldw	r4,12(r23)
 4004fb0:	b8800217 	ldw	r2,8(r23)
 4004fb4:	b82b883a 	mov	r21,r23
 4004fb8:	bc000204 	addi	r16,r23,8
 4004fbc:	20800215 	stw	r2,8(r4)
 4004fc0:	11000315 	stw	r4,12(r2)
 4004fc4:	2980e436 	bltu	r5,r6,4005358 <_realloc_r+0x548>
 4004fc8:	008004c4 	movi	r2,19
 4004fcc:	9009883a 	mov	r4,r18
 4004fd0:	8011883a 	mov	r8,r16
 4004fd4:	11800f2e 	bgeu	r2,r6,4005014 <_realloc_r+0x204>
 4004fd8:	90800017 	ldw	r2,0(r18)
 4004fdc:	ba000404 	addi	r8,r23,16
 4004fe0:	91000204 	addi	r4,r18,8
 4004fe4:	b8800215 	stw	r2,8(r23)
 4004fe8:	90c00117 	ldw	r3,4(r18)
 4004fec:	008006c4 	movi	r2,27
 4004ff0:	b8c00315 	stw	r3,12(r23)
 4004ff4:	1180072e 	bgeu	r2,r6,4005014 <_realloc_r+0x204>
 4004ff8:	90c00217 	ldw	r3,8(r18)
 4004ffc:	ba000604 	addi	r8,r23,24
 4005000:	91000404 	addi	r4,r18,16
 4005004:	b8c00415 	stw	r3,16(r23)
 4005008:	90800317 	ldw	r2,12(r18)
 400500c:	b8800515 	stw	r2,20(r23)
 4005010:	3140e726 	beq	r6,r5,40053b0 <_realloc_r+0x5a0>
 4005014:	20800017 	ldw	r2,0(r4)
 4005018:	dd000017 	ldw	r20,0(sp)
 400501c:	b80f883a 	mov	r7,r23
 4005020:	40800015 	stw	r2,0(r8)
 4005024:	20c00117 	ldw	r3,4(r4)
 4005028:	40c00115 	stw	r3,4(r8)
 400502c:	20800217 	ldw	r2,8(r4)
 4005030:	40800215 	stw	r2,8(r8)
 4005034:	003f9706 	br	4004e94 <_realloc_r+0x84>
 4005038:	98a9883a 	add	r20,r19,r2
 400503c:	a1c01f16 	blt	r20,r7,40050bc <_realloc_r+0x2ac>
 4005040:	b8c00317 	ldw	r3,12(r23)
 4005044:	b8800217 	ldw	r2,8(r23)
 4005048:	99bfff04 	addi	r6,r19,-4
 400504c:	01400904 	movi	r5,36
 4005050:	b82b883a 	mov	r21,r23
 4005054:	18800215 	stw	r2,8(r3)
 4005058:	10c00315 	stw	r3,12(r2)
 400505c:	bc000204 	addi	r16,r23,8
 4005060:	2980c336 	bltu	r5,r6,4005370 <_realloc_r+0x560>
 4005064:	008004c4 	movi	r2,19
 4005068:	9009883a 	mov	r4,r18
 400506c:	8011883a 	mov	r8,r16
 4005070:	11800f2e 	bgeu	r2,r6,40050b0 <_realloc_r+0x2a0>
 4005074:	90800017 	ldw	r2,0(r18)
 4005078:	ba000404 	addi	r8,r23,16
 400507c:	91000204 	addi	r4,r18,8
 4005080:	b8800215 	stw	r2,8(r23)
 4005084:	90c00117 	ldw	r3,4(r18)
 4005088:	008006c4 	movi	r2,27
 400508c:	b8c00315 	stw	r3,12(r23)
 4005090:	1180072e 	bgeu	r2,r6,40050b0 <_realloc_r+0x2a0>
 4005094:	90c00217 	ldw	r3,8(r18)
 4005098:	ba000604 	addi	r8,r23,24
 400509c:	91000404 	addi	r4,r18,16
 40050a0:	b8c00415 	stw	r3,16(r23)
 40050a4:	90800317 	ldw	r2,12(r18)
 40050a8:	b8800515 	stw	r2,20(r23)
 40050ac:	3140c726 	beq	r6,r5,40053cc <_realloc_r+0x5bc>
 40050b0:	20800017 	ldw	r2,0(r4)
 40050b4:	b80f883a 	mov	r7,r23
 40050b8:	003fd906 	br	4005020 <_realloc_r+0x210>
 40050bc:	880b883a 	mov	r5,r17
 40050c0:	b009883a 	mov	r4,r22
 40050c4:	40024780 	call	4002478 <_malloc_r>
 40050c8:	1023883a 	mov	r17,r2
 40050cc:	10002526 	beq	r2,zero,4005164 <_realloc_r+0x354>
 40050d0:	80800117 	ldw	r2,4(r16)
 40050d4:	00ffff84 	movi	r3,-2
 40050d8:	893ffe04 	addi	r4,r17,-8
 40050dc:	10c4703a 	and	r2,r2,r3
 40050e0:	8085883a 	add	r2,r16,r2
 40050e4:	20809526 	beq	r4,r2,400533c <_realloc_r+0x52c>
 40050e8:	99bfff04 	addi	r6,r19,-4
 40050ec:	01c00904 	movi	r7,36
 40050f0:	39804536 	bltu	r7,r6,4005208 <_realloc_r+0x3f8>
 40050f4:	008004c4 	movi	r2,19
 40050f8:	9009883a 	mov	r4,r18
 40050fc:	880b883a 	mov	r5,r17
 4005100:	11800f2e 	bgeu	r2,r6,4005140 <_realloc_r+0x330>
 4005104:	90800017 	ldw	r2,0(r18)
 4005108:	89400204 	addi	r5,r17,8
 400510c:	91000204 	addi	r4,r18,8
 4005110:	88800015 	stw	r2,0(r17)
 4005114:	90c00117 	ldw	r3,4(r18)
 4005118:	008006c4 	movi	r2,27
 400511c:	88c00115 	stw	r3,4(r17)
 4005120:	1180072e 	bgeu	r2,r6,4005140 <_realloc_r+0x330>
 4005124:	90c00217 	ldw	r3,8(r18)
 4005128:	89400404 	addi	r5,r17,16
 400512c:	91000404 	addi	r4,r18,16
 4005130:	88c00215 	stw	r3,8(r17)
 4005134:	90800317 	ldw	r2,12(r18)
 4005138:	88800315 	stw	r2,12(r17)
 400513c:	31c09126 	beq	r6,r7,4005384 <_realloc_r+0x574>
 4005140:	20800017 	ldw	r2,0(r4)
 4005144:	28800015 	stw	r2,0(r5)
 4005148:	20c00117 	ldw	r3,4(r4)
 400514c:	28c00115 	stw	r3,4(r5)
 4005150:	20800217 	ldw	r2,8(r4)
 4005154:	28800215 	stw	r2,8(r5)
 4005158:	900b883a 	mov	r5,r18
 400515c:	b009883a 	mov	r4,r22
 4005160:	40039040 	call	4003904 <_free_r>
 4005164:	b009883a 	mov	r4,r22
 4005168:	4007af40 	call	4007af4 <__malloc_unlock>
 400516c:	003f5e06 	br	4004ee8 <_realloc_r+0xd8>
 4005170:	300b883a 	mov	r5,r6
 4005174:	dfc00b17 	ldw	ra,44(sp)
 4005178:	df000a17 	ldw	fp,40(sp)
 400517c:	ddc00917 	ldw	r23,36(sp)
 4005180:	dd800817 	ldw	r22,32(sp)
 4005184:	dd400717 	ldw	r21,28(sp)
 4005188:	dd000617 	ldw	r20,24(sp)
 400518c:	dcc00517 	ldw	r19,20(sp)
 4005190:	dc800417 	ldw	r18,16(sp)
 4005194:	dc400317 	ldw	r17,12(sp)
 4005198:	dc000217 	ldw	r16,8(sp)
 400519c:	dec00c04 	addi	sp,sp,48
 40051a0:	40024781 	jmpi	4002478 <_malloc_r>
 40051a4:	38800117 	ldw	r2,4(r7)
 40051a8:	e54b883a 	add	r5,fp,r21
 40051ac:	31000054 	ori	r4,r6,1
 40051b0:	1080004c 	andi	r2,r2,1
 40051b4:	1704b03a 	or	r2,r2,fp
 40051b8:	38800115 	stw	r2,4(r7)
 40051bc:	29000115 	stw	r4,4(r5)
 40051c0:	2987883a 	add	r3,r5,r6
 40051c4:	18800117 	ldw	r2,4(r3)
 40051c8:	29400204 	addi	r5,r5,8
 40051cc:	b009883a 	mov	r4,r22
 40051d0:	10800054 	ori	r2,r2,1
 40051d4:	18800115 	stw	r2,4(r3)
 40051d8:	40039040 	call	4003904 <_free_r>
 40051dc:	003f3806 	br	4004ec0 <_realloc_r+0xb0>
 40051e0:	000d883a 	mov	r6,zero
 40051e4:	0009883a 	mov	r4,zero
 40051e8:	003f5d06 	br	4004f60 <_realloc_r+0x150>
 40051ec:	30c00217 	ldw	r3,8(r6)
 40051f0:	30800317 	ldw	r2,12(r6)
 40051f4:	800f883a 	mov	r7,r16
 40051f8:	84000204 	addi	r16,r16,8
 40051fc:	10c00215 	stw	r3,8(r2)
 4005200:	18800315 	stw	r2,12(r3)
 4005204:	003f2306 	br	4004e94 <_realloc_r+0x84>
 4005208:	8809883a 	mov	r4,r17
 400520c:	900b883a 	mov	r5,r18
 4005210:	4006dc80 	call	4006dc8 <memmove>
 4005214:	003fd006 	br	4005158 <_realloc_r+0x348>
 4005218:	30800117 	ldw	r2,4(r6)
 400521c:	e0c00404 	addi	r3,fp,16
 4005220:	1108703a 	and	r4,r2,r4
 4005224:	9905883a 	add	r2,r19,r4
 4005228:	10ff4d16 	blt	r2,r3,4004f60 <_realloc_r+0x150>
 400522c:	1705c83a 	sub	r2,r2,fp
 4005230:	870b883a 	add	r5,r16,fp
 4005234:	10800054 	ori	r2,r2,1
 4005238:	28800115 	stw	r2,4(r5)
 400523c:	80c00117 	ldw	r3,4(r16)
 4005240:	00810074 	movhi	r2,1025
 4005244:	10a61d04 	addi	r2,r2,-26508
 4005248:	b009883a 	mov	r4,r22
 400524c:	18c0004c 	andi	r3,r3,1
 4005250:	e0c6b03a 	or	r3,fp,r3
 4005254:	11400215 	stw	r5,8(r2)
 4005258:	80c00115 	stw	r3,4(r16)
 400525c:	4007af40 	call	4007af4 <__malloc_unlock>
 4005260:	84400204 	addi	r17,r16,8
 4005264:	003f2006 	br	4004ee8 <_realloc_r+0xd8>
 4005268:	98a9883a 	add	r20,r19,r2
 400526c:	2509883a 	add	r4,r4,r20
 4005270:	e0800404 	addi	r2,fp,16
 4005274:	d9000115 	stw	r4,4(sp)
 4005278:	20bf7016 	blt	r4,r2,400503c <_realloc_r+0x22c>
 400527c:	b8c00317 	ldw	r3,12(r23)
 4005280:	b8800217 	ldw	r2,8(r23)
 4005284:	99bfff04 	addi	r6,r19,-4
 4005288:	01400904 	movi	r5,36
 400528c:	18800215 	stw	r2,8(r3)
 4005290:	10c00315 	stw	r3,12(r2)
 4005294:	bc400204 	addi	r17,r23,8
 4005298:	29804136 	bltu	r5,r6,40053a0 <_realloc_r+0x590>
 400529c:	008004c4 	movi	r2,19
 40052a0:	9009883a 	mov	r4,r18
 40052a4:	880f883a 	mov	r7,r17
 40052a8:	11800f2e 	bgeu	r2,r6,40052e8 <_realloc_r+0x4d8>
 40052ac:	90800017 	ldw	r2,0(r18)
 40052b0:	b9c00404 	addi	r7,r23,16
 40052b4:	91000204 	addi	r4,r18,8
 40052b8:	b8800215 	stw	r2,8(r23)
 40052bc:	90c00117 	ldw	r3,4(r18)
 40052c0:	008006c4 	movi	r2,27
 40052c4:	b8c00315 	stw	r3,12(r23)
 40052c8:	1180072e 	bgeu	r2,r6,40052e8 <_realloc_r+0x4d8>
 40052cc:	90c00217 	ldw	r3,8(r18)
 40052d0:	b9c00604 	addi	r7,r23,24
 40052d4:	91000404 	addi	r4,r18,16
 40052d8:	b8c00415 	stw	r3,16(r23)
 40052dc:	90800317 	ldw	r2,12(r18)
 40052e0:	b8800515 	stw	r2,20(r23)
 40052e4:	31404026 	beq	r6,r5,40053e8 <_realloc_r+0x5d8>
 40052e8:	20800017 	ldw	r2,0(r4)
 40052ec:	38800015 	stw	r2,0(r7)
 40052f0:	20c00117 	ldw	r3,4(r4)
 40052f4:	38c00115 	stw	r3,4(r7)
 40052f8:	20800217 	ldw	r2,8(r4)
 40052fc:	38800215 	stw	r2,8(r7)
 4005300:	d8c00117 	ldw	r3,4(sp)
 4005304:	bf0b883a 	add	r5,r23,fp
 4005308:	b009883a 	mov	r4,r22
 400530c:	1f05c83a 	sub	r2,r3,fp
 4005310:	10800054 	ori	r2,r2,1
 4005314:	28800115 	stw	r2,4(r5)
 4005318:	b8c00117 	ldw	r3,4(r23)
 400531c:	00810074 	movhi	r2,1025
 4005320:	10a61d04 	addi	r2,r2,-26508
 4005324:	11400215 	stw	r5,8(r2)
 4005328:	18c0004c 	andi	r3,r3,1
 400532c:	e0c6b03a 	or	r3,fp,r3
 4005330:	b8c00115 	stw	r3,4(r23)
 4005334:	4007af40 	call	4007af4 <__malloc_unlock>
 4005338:	003eeb06 	br	4004ee8 <_realloc_r+0xd8>
 400533c:	20800117 	ldw	r2,4(r4)
 4005340:	00ffff04 	movi	r3,-4
 4005344:	800f883a 	mov	r7,r16
 4005348:	10c4703a 	and	r2,r2,r3
 400534c:	98a9883a 	add	r20,r19,r2
 4005350:	84000204 	addi	r16,r16,8
 4005354:	003ecf06 	br	4004e94 <_realloc_r+0x84>
 4005358:	900b883a 	mov	r5,r18
 400535c:	8009883a 	mov	r4,r16
 4005360:	4006dc80 	call	4006dc8 <memmove>
 4005364:	dd000017 	ldw	r20,0(sp)
 4005368:	b80f883a 	mov	r7,r23
 400536c:	003ec906 	br	4004e94 <_realloc_r+0x84>
 4005370:	900b883a 	mov	r5,r18
 4005374:	8009883a 	mov	r4,r16
 4005378:	4006dc80 	call	4006dc8 <memmove>
 400537c:	b80f883a 	mov	r7,r23
 4005380:	003ec406 	br	4004e94 <_realloc_r+0x84>
 4005384:	90c00417 	ldw	r3,16(r18)
 4005388:	89400604 	addi	r5,r17,24
 400538c:	91000604 	addi	r4,r18,24
 4005390:	88c00415 	stw	r3,16(r17)
 4005394:	90800517 	ldw	r2,20(r18)
 4005398:	88800515 	stw	r2,20(r17)
 400539c:	003f6806 	br	4005140 <_realloc_r+0x330>
 40053a0:	900b883a 	mov	r5,r18
 40053a4:	8809883a 	mov	r4,r17
 40053a8:	4006dc80 	call	4006dc8 <memmove>
 40053ac:	003fd406 	br	4005300 <_realloc_r+0x4f0>
 40053b0:	90c00417 	ldw	r3,16(r18)
 40053b4:	91000604 	addi	r4,r18,24
 40053b8:	ba000804 	addi	r8,r23,32
 40053bc:	b8c00615 	stw	r3,24(r23)
 40053c0:	90800517 	ldw	r2,20(r18)
 40053c4:	b8800715 	stw	r2,28(r23)
 40053c8:	003f1206 	br	4005014 <_realloc_r+0x204>
 40053cc:	90c00417 	ldw	r3,16(r18)
 40053d0:	91000604 	addi	r4,r18,24
 40053d4:	ba000804 	addi	r8,r23,32
 40053d8:	b8c00615 	stw	r3,24(r23)
 40053dc:	90800517 	ldw	r2,20(r18)
 40053e0:	b8800715 	stw	r2,28(r23)
 40053e4:	003f3206 	br	40050b0 <_realloc_r+0x2a0>
 40053e8:	90c00417 	ldw	r3,16(r18)
 40053ec:	91000604 	addi	r4,r18,24
 40053f0:	b9c00804 	addi	r7,r23,32
 40053f4:	b8c00615 	stw	r3,24(r23)
 40053f8:	90800517 	ldw	r2,20(r18)
 40053fc:	b8800715 	stw	r2,28(r23)
 4005400:	003fb906 	br	40052e8 <_realloc_r+0x4d8>

04005404 <strcpy>:
 4005404:	2007883a 	mov	r3,r4
 4005408:	28800003 	ldbu	r2,0(r5)
 400540c:	29400044 	addi	r5,r5,1
 4005410:	18800005 	stb	r2,0(r3)
 4005414:	18c00044 	addi	r3,r3,1
 4005418:	103ffb1e 	bne	r2,zero,4005408 <strcpy+0x4>
 400541c:	2005883a 	mov	r2,r4
 4005420:	f800283a 	ret

04005424 <_write_r>:
 4005424:	defffd04 	addi	sp,sp,-12
 4005428:	dc000015 	stw	r16,0(sp)
 400542c:	04010074 	movhi	r16,1025
 4005430:	84296304 	addi	r16,r16,-23156
 4005434:	dc400115 	stw	r17,4(sp)
 4005438:	80000015 	stw	zero,0(r16)
 400543c:	2023883a 	mov	r17,r4
 4005440:	2809883a 	mov	r4,r5
 4005444:	300b883a 	mov	r5,r6
 4005448:	380d883a 	mov	r6,r7
 400544c:	dfc00215 	stw	ra,8(sp)
 4005450:	4007ea80 	call	4007ea8 <write>
 4005454:	1007883a 	mov	r3,r2
 4005458:	00bfffc4 	movi	r2,-1
 400545c:	18800626 	beq	r3,r2,4005478 <_write_r+0x54>
 4005460:	1805883a 	mov	r2,r3
 4005464:	dfc00217 	ldw	ra,8(sp)
 4005468:	dc400117 	ldw	r17,4(sp)
 400546c:	dc000017 	ldw	r16,0(sp)
 4005470:	dec00304 	addi	sp,sp,12
 4005474:	f800283a 	ret
 4005478:	80800017 	ldw	r2,0(r16)
 400547c:	103ff826 	beq	r2,zero,4005460 <_write_r+0x3c>
 4005480:	88800015 	stw	r2,0(r17)
 4005484:	1805883a 	mov	r2,r3
 4005488:	dfc00217 	ldw	ra,8(sp)
 400548c:	dc400117 	ldw	r17,4(sp)
 4005490:	dc000017 	ldw	r16,0(sp)
 4005494:	dec00304 	addi	sp,sp,12
 4005498:	f800283a 	ret

0400549c <_calloc_r>:
 400549c:	defffe04 	addi	sp,sp,-8
 40054a0:	dc400015 	stw	r17,0(sp)
 40054a4:	2023883a 	mov	r17,r4
 40054a8:	2809883a 	mov	r4,r5
 40054ac:	300b883a 	mov	r5,r6
 40054b0:	dfc00115 	stw	ra,4(sp)
 40054b4:	400195c0 	call	400195c <__mulsi3>
 40054b8:	100b883a 	mov	r5,r2
 40054bc:	8809883a 	mov	r4,r17
 40054c0:	40024780 	call	4002478 <_malloc_r>
 40054c4:	1023883a 	mov	r17,r2
 40054c8:	01c00904 	movi	r7,36
 40054cc:	10000d26 	beq	r2,zero,4005504 <_calloc_r+0x68>
 40054d0:	10ffff17 	ldw	r3,-4(r2)
 40054d4:	1009883a 	mov	r4,r2
 40054d8:	00bfff04 	movi	r2,-4
 40054dc:	1886703a 	and	r3,r3,r2
 40054e0:	1887883a 	add	r3,r3,r2
 40054e4:	180d883a 	mov	r6,r3
 40054e8:	000b883a 	mov	r5,zero
 40054ec:	38c01736 	bltu	r7,r3,400554c <_calloc_r+0xb0>
 40054f0:	008004c4 	movi	r2,19
 40054f4:	10c00836 	bltu	r2,r3,4005518 <_calloc_r+0x7c>
 40054f8:	20000215 	stw	zero,8(r4)
 40054fc:	20000015 	stw	zero,0(r4)
 4005500:	20000115 	stw	zero,4(r4)
 4005504:	8805883a 	mov	r2,r17
 4005508:	dfc00117 	ldw	ra,4(sp)
 400550c:	dc400017 	ldw	r17,0(sp)
 4005510:	dec00204 	addi	sp,sp,8
 4005514:	f800283a 	ret
 4005518:	008006c4 	movi	r2,27
 400551c:	88000015 	stw	zero,0(r17)
 4005520:	88000115 	stw	zero,4(r17)
 4005524:	89000204 	addi	r4,r17,8
 4005528:	10fff32e 	bgeu	r2,r3,40054f8 <_calloc_r+0x5c>
 400552c:	88000215 	stw	zero,8(r17)
 4005530:	88000315 	stw	zero,12(r17)
 4005534:	89000404 	addi	r4,r17,16
 4005538:	19ffef1e 	bne	r3,r7,40054f8 <_calloc_r+0x5c>
 400553c:	89000604 	addi	r4,r17,24
 4005540:	88000415 	stw	zero,16(r17)
 4005544:	88000515 	stw	zero,20(r17)
 4005548:	003feb06 	br	40054f8 <_calloc_r+0x5c>
 400554c:	4002bb80 	call	4002bb8 <memset>
 4005550:	8805883a 	mov	r2,r17
 4005554:	dfc00117 	ldw	ra,4(sp)
 4005558:	dc400017 	ldw	r17,0(sp)
 400555c:	dec00204 	addi	sp,sp,8
 4005560:	f800283a 	ret

04005564 <quorem>:
 4005564:	28c00417 	ldw	r3,16(r5)
 4005568:	20800417 	ldw	r2,16(r4)
 400556c:	defff104 	addi	sp,sp,-60
 4005570:	dfc00e15 	stw	ra,56(sp)
 4005574:	df000d15 	stw	fp,52(sp)
 4005578:	ddc00c15 	stw	r23,48(sp)
 400557c:	dd800b15 	stw	r22,44(sp)
 4005580:	dd400a15 	stw	r21,40(sp)
 4005584:	dd000915 	stw	r20,36(sp)
 4005588:	dcc00815 	stw	r19,32(sp)
 400558c:	dc800715 	stw	r18,28(sp)
 4005590:	dc400615 	stw	r17,24(sp)
 4005594:	dc000515 	stw	r16,20(sp)
 4005598:	d9000315 	stw	r4,12(sp)
 400559c:	d9400415 	stw	r5,16(sp)
 40055a0:	10c07f16 	blt	r2,r3,40057a0 <quorem+0x23c>
 40055a4:	1d3fffc4 	addi	r20,r3,-1
 40055a8:	d8c00417 	ldw	r3,16(sp)
 40055ac:	d9000317 	ldw	r4,12(sp)
 40055b0:	a505883a 	add	r2,r20,r20
 40055b4:	1085883a 	add	r2,r2,r2
 40055b8:	1cc00504 	addi	r19,r3,20
 40055bc:	25c00504 	addi	r23,r4,20
 40055c0:	98ad883a 	add	r22,r19,r2
 40055c4:	15c7883a 	add	r3,r2,r23
 40055c8:	b1400017 	ldw	r5,0(r22)
 40055cc:	19000017 	ldw	r4,0(r3)
 40055d0:	d8c00015 	stw	r3,0(sp)
 40055d4:	29400044 	addi	r5,r5,1
 40055d8:	d9000215 	stw	r4,8(sp)
 40055dc:	40078b40 	call	40078b4 <__udivsi3>
 40055e0:	1039883a 	mov	fp,r2
 40055e4:	10003d1e 	bne	r2,zero,40056dc <quorem+0x178>
 40055e8:	d9400417 	ldw	r5,16(sp)
 40055ec:	d9000317 	ldw	r4,12(sp)
 40055f0:	4003e080 	call	4003e08 <__mcmp>
 40055f4:	10002c16 	blt	r2,zero,40056a8 <quorem+0x144>
 40055f8:	e7000044 	addi	fp,fp,1
 40055fc:	b80f883a 	mov	r7,r23
 4005600:	0011883a 	mov	r8,zero
 4005604:	0009883a 	mov	r4,zero
 4005608:	99400017 	ldw	r5,0(r19)
 400560c:	38c00017 	ldw	r3,0(r7)
 4005610:	9cc00104 	addi	r19,r19,4
 4005614:	28bfffcc 	andi	r2,r5,65535
 4005618:	2085883a 	add	r2,r4,r2
 400561c:	11bfffcc 	andi	r6,r2,65535
 4005620:	193fffcc 	andi	r4,r3,65535
 4005624:	1004d43a 	srli	r2,r2,16
 4005628:	280ad43a 	srli	r5,r5,16
 400562c:	2189c83a 	sub	r4,r4,r6
 4005630:	2209883a 	add	r4,r4,r8
 4005634:	1806d43a 	srli	r3,r3,16
 4005638:	288b883a 	add	r5,r5,r2
 400563c:	200dd43a 	srai	r6,r4,16
 4005640:	28bfffcc 	andi	r2,r5,65535
 4005644:	1887c83a 	sub	r3,r3,r2
 4005648:	1987883a 	add	r3,r3,r6
 400564c:	3900000d 	sth	r4,0(r7)
 4005650:	38c0008d 	sth	r3,2(r7)
 4005654:	2808d43a 	srli	r4,r5,16
 4005658:	39c00104 	addi	r7,r7,4
 400565c:	1811d43a 	srai	r8,r3,16
 4005660:	b4ffe92e 	bgeu	r22,r19,4005608 <quorem+0xa4>
 4005664:	a505883a 	add	r2,r20,r20
 4005668:	1085883a 	add	r2,r2,r2
 400566c:	b885883a 	add	r2,r23,r2
 4005670:	10c00017 	ldw	r3,0(r2)
 4005674:	18000c1e 	bne	r3,zero,40056a8 <quorem+0x144>
 4005678:	113fff04 	addi	r4,r2,-4
 400567c:	b900082e 	bgeu	r23,r4,40056a0 <quorem+0x13c>
 4005680:	10bfff17 	ldw	r2,-4(r2)
 4005684:	10000326 	beq	r2,zero,4005694 <quorem+0x130>
 4005688:	00000506 	br	40056a0 <quorem+0x13c>
 400568c:	20800017 	ldw	r2,0(r4)
 4005690:	1000031e 	bne	r2,zero,40056a0 <quorem+0x13c>
 4005694:	213fff04 	addi	r4,r4,-4
 4005698:	a53fffc4 	addi	r20,r20,-1
 400569c:	b93ffb36 	bltu	r23,r4,400568c <quorem+0x128>
 40056a0:	d9000317 	ldw	r4,12(sp)
 40056a4:	25000415 	stw	r20,16(r4)
 40056a8:	e005883a 	mov	r2,fp
 40056ac:	dfc00e17 	ldw	ra,56(sp)
 40056b0:	df000d17 	ldw	fp,52(sp)
 40056b4:	ddc00c17 	ldw	r23,48(sp)
 40056b8:	dd800b17 	ldw	r22,44(sp)
 40056bc:	dd400a17 	ldw	r21,40(sp)
 40056c0:	dd000917 	ldw	r20,36(sp)
 40056c4:	dcc00817 	ldw	r19,32(sp)
 40056c8:	dc800717 	ldw	r18,28(sp)
 40056cc:	dc400617 	ldw	r17,24(sp)
 40056d0:	dc000517 	ldw	r16,20(sp)
 40056d4:	dec00f04 	addi	sp,sp,60
 40056d8:	f800283a 	ret
 40056dc:	b823883a 	mov	r17,r23
 40056e0:	9825883a 	mov	r18,r19
 40056e4:	d8000115 	stw	zero,4(sp)
 40056e8:	002b883a 	mov	r21,zero
 40056ec:	94000017 	ldw	r16,0(r18)
 40056f0:	e009883a 	mov	r4,fp
 40056f4:	94800104 	addi	r18,r18,4
 40056f8:	817fffcc 	andi	r5,r16,65535
 40056fc:	400195c0 	call	400195c <__mulsi3>
 4005700:	800ad43a 	srli	r5,r16,16
 4005704:	e009883a 	mov	r4,fp
 4005708:	a8a1883a 	add	r16,r21,r2
 400570c:	400195c0 	call	400195c <__mulsi3>
 4005710:	89000017 	ldw	r4,0(r17)
 4005714:	80ffffcc 	andi	r3,r16,65535
 4005718:	8020d43a 	srli	r16,r16,16
 400571c:	217fffcc 	andi	r5,r4,65535
 4005720:	28cbc83a 	sub	r5,r5,r3
 4005724:	d8c00117 	ldw	r3,4(sp)
 4005728:	2008d43a 	srli	r4,r4,16
 400572c:	1405883a 	add	r2,r2,r16
 4005730:	28cb883a 	add	r5,r5,r3
 4005734:	280dd43a 	srai	r6,r5,16
 4005738:	10ffffcc 	andi	r3,r2,65535
 400573c:	20c9c83a 	sub	r4,r4,r3
 4005740:	2189883a 	add	r4,r4,r6
 4005744:	8900008d 	sth	r4,2(r17)
 4005748:	2009d43a 	srai	r4,r4,16
 400574c:	8940000d 	sth	r5,0(r17)
 4005750:	102ad43a 	srli	r21,r2,16
 4005754:	8c400104 	addi	r17,r17,4
 4005758:	d9000115 	stw	r4,4(sp)
 400575c:	b4bfe32e 	bgeu	r22,r18,40056ec <quorem+0x188>
 4005760:	d9000217 	ldw	r4,8(sp)
 4005764:	203fa01e 	bne	r4,zero,40055e8 <quorem+0x84>
 4005768:	d8800017 	ldw	r2,0(sp)
 400576c:	10ffff04 	addi	r3,r2,-4
 4005770:	b8c0082e 	bgeu	r23,r3,4005794 <quorem+0x230>
 4005774:	10bfff17 	ldw	r2,-4(r2)
 4005778:	10000326 	beq	r2,zero,4005788 <quorem+0x224>
 400577c:	00000506 	br	4005794 <quorem+0x230>
 4005780:	18800017 	ldw	r2,0(r3)
 4005784:	1000031e 	bne	r2,zero,4005794 <quorem+0x230>
 4005788:	18ffff04 	addi	r3,r3,-4
 400578c:	a53fffc4 	addi	r20,r20,-1
 4005790:	b8fffb36 	bltu	r23,r3,4005780 <quorem+0x21c>
 4005794:	d8c00317 	ldw	r3,12(sp)
 4005798:	1d000415 	stw	r20,16(r3)
 400579c:	003f9206 	br	40055e8 <quorem+0x84>
 40057a0:	0005883a 	mov	r2,zero
 40057a4:	003fc106 	br	40056ac <quorem+0x148>

040057a8 <_dtoa_r>:
 40057a8:	deffda04 	addi	sp,sp,-152
 40057ac:	dc801e15 	stw	r18,120(sp)
 40057b0:	24800417 	ldw	r18,16(r4)
 40057b4:	dd402115 	stw	r21,132(sp)
 40057b8:	dd002015 	stw	r20,128(sp)
 40057bc:	dcc01f15 	stw	r19,124(sp)
 40057c0:	dc401d15 	stw	r17,116(sp)
 40057c4:	dfc02515 	stw	ra,148(sp)
 40057c8:	df002415 	stw	fp,144(sp)
 40057cc:	ddc02315 	stw	r23,140(sp)
 40057d0:	dd802215 	stw	r22,136(sp)
 40057d4:	dc001c15 	stw	r16,112(sp)
 40057d8:	d9001615 	stw	r4,88(sp)
 40057dc:	3023883a 	mov	r17,r6
 40057e0:	2829883a 	mov	r20,r5
 40057e4:	d9c01715 	stw	r7,92(sp)
 40057e8:	dcc02817 	ldw	r19,160(sp)
 40057ec:	302b883a 	mov	r21,r6
 40057f0:	90028326 	beq	r18,zero,4006200 <_dtoa_r+0xa58>
 40057f4:	91800017 	ldw	r6,0(r18)
 40057f8:	30000c26 	beq	r6,zero,400582c <_dtoa_r+0x84>
 40057fc:	90800117 	ldw	r2,4(r18)
 4005800:	d9001617 	ldw	r4,88(sp)
 4005804:	300b883a 	mov	r5,r6
 4005808:	30800115 	stw	r2,4(r6)
 400580c:	90c00117 	ldw	r3,4(r18)
 4005810:	00800044 	movi	r2,1
 4005814:	10c4983a 	sll	r2,r2,r3
 4005818:	30800215 	stw	r2,8(r6)
 400581c:	400422c0 	call	400422c <_Bfree>
 4005820:	d8c01617 	ldw	r3,88(sp)
 4005824:	18800417 	ldw	r2,16(r3)
 4005828:	10000015 	stw	zero,0(r2)
 400582c:	8800a316 	blt	r17,zero,4005abc <_dtoa_r+0x314>
 4005830:	98000015 	stw	zero,0(r19)
 4005834:	a8dffc2c 	andhi	r3,r21,32752
 4005838:	009ffc34 	movhi	r2,32752
 400583c:	18809126 	beq	r3,r2,4005a84 <_dtoa_r+0x2dc>
 4005840:	000d883a 	mov	r6,zero
 4005844:	000f883a 	mov	r7,zero
 4005848:	a009883a 	mov	r4,r20
 400584c:	a80b883a 	mov	r5,r21
 4005850:	dd001215 	stw	r20,72(sp)
 4005854:	dd401315 	stw	r21,76(sp)
 4005858:	40072c80 	call	40072c8 <__nedf2>
 400585c:	1000171e 	bne	r2,zero,40058bc <_dtoa_r+0x114>
 4005860:	d9802717 	ldw	r6,156(sp)
 4005864:	00800044 	movi	r2,1
 4005868:	30800015 	stw	r2,0(r6)
 400586c:	d8802917 	ldw	r2,164(sp)
 4005870:	1002a726 	beq	r2,zero,4006310 <_dtoa_r+0xb68>
 4005874:	d9002917 	ldw	r4,164(sp)
 4005878:	00810074 	movhi	r2,1025
 400587c:	10a5d944 	addi	r2,r2,-26779
 4005880:	10ffffc4 	addi	r3,r2,-1
 4005884:	20800015 	stw	r2,0(r4)
 4005888:	1805883a 	mov	r2,r3
 400588c:	dfc02517 	ldw	ra,148(sp)
 4005890:	df002417 	ldw	fp,144(sp)
 4005894:	ddc02317 	ldw	r23,140(sp)
 4005898:	dd802217 	ldw	r22,136(sp)
 400589c:	dd402117 	ldw	r21,132(sp)
 40058a0:	dd002017 	ldw	r20,128(sp)
 40058a4:	dcc01f17 	ldw	r19,124(sp)
 40058a8:	dc801e17 	ldw	r18,120(sp)
 40058ac:	dc401d17 	ldw	r17,116(sp)
 40058b0:	dc001c17 	ldw	r16,112(sp)
 40058b4:	dec02604 	addi	sp,sp,152
 40058b8:	f800283a 	ret
 40058bc:	d9001617 	ldw	r4,88(sp)
 40058c0:	d9401217 	ldw	r5,72(sp)
 40058c4:	d8800104 	addi	r2,sp,4
 40058c8:	a80d883a 	mov	r6,r21
 40058cc:	d9c00204 	addi	r7,sp,8
 40058d0:	d8800015 	stw	r2,0(sp)
 40058d4:	40043940 	call	4004394 <__d2b>
 40058d8:	d8800715 	stw	r2,28(sp)
 40058dc:	a804d53a 	srli	r2,r21,20
 40058e0:	1101ffcc 	andi	r4,r2,2047
 40058e4:	20008626 	beq	r4,zero,4005b00 <_dtoa_r+0x358>
 40058e8:	d8c01217 	ldw	r3,72(sp)
 40058ec:	00800434 	movhi	r2,16
 40058f0:	10bfffc4 	addi	r2,r2,-1
 40058f4:	ddc00117 	ldw	r23,4(sp)
 40058f8:	a884703a 	and	r2,r21,r2
 40058fc:	1811883a 	mov	r8,r3
 4005900:	124ffc34 	orhi	r9,r2,16368
 4005904:	25bf0044 	addi	r22,r4,-1023
 4005908:	d8000815 	stw	zero,32(sp)
 400590c:	0005883a 	mov	r2,zero
 4005910:	00cffe34 	movhi	r3,16376
 4005914:	480b883a 	mov	r5,r9
 4005918:	4009883a 	mov	r4,r8
 400591c:	180f883a 	mov	r7,r3
 4005920:	100d883a 	mov	r6,r2
 4005924:	400147c0 	call	400147c <__subdf3>
 4005928:	0218dbf4 	movhi	r8,25455
 400592c:	4210d844 	addi	r8,r8,17249
 4005930:	024ff4f4 	movhi	r9,16339
 4005934:	4a61e9c4 	addi	r9,r9,-30809
 4005938:	480f883a 	mov	r7,r9
 400593c:	400d883a 	mov	r6,r8
 4005940:	180b883a 	mov	r5,r3
 4005944:	1009883a 	mov	r4,r2
 4005948:	4006e7c0 	call	4006e7c <__muldf3>
 400594c:	0222d874 	movhi	r8,35681
 4005950:	42322cc4 	addi	r8,r8,-14157
 4005954:	024ff1f4 	movhi	r9,16327
 4005958:	4a628a04 	addi	r9,r9,-30168
 400595c:	480f883a 	mov	r7,r9
 4005960:	400d883a 	mov	r6,r8
 4005964:	180b883a 	mov	r5,r3
 4005968:	1009883a 	mov	r4,r2
 400596c:	40014fc0 	call	40014fc <__adddf3>
 4005970:	b009883a 	mov	r4,r22
 4005974:	1021883a 	mov	r16,r2
 4005978:	1823883a 	mov	r17,r3
 400597c:	40075700 	call	4007570 <__floatsidf>
 4005980:	021427f4 	movhi	r8,20639
 4005984:	421e7ec4 	addi	r8,r8,31227
 4005988:	024ff4f4 	movhi	r9,16339
 400598c:	4a5104c4 	addi	r9,r9,17427
 4005990:	480f883a 	mov	r7,r9
 4005994:	400d883a 	mov	r6,r8
 4005998:	180b883a 	mov	r5,r3
 400599c:	1009883a 	mov	r4,r2
 40059a0:	4006e7c0 	call	4006e7c <__muldf3>
 40059a4:	180f883a 	mov	r7,r3
 40059a8:	880b883a 	mov	r5,r17
 40059ac:	100d883a 	mov	r6,r2
 40059b0:	8009883a 	mov	r4,r16
 40059b4:	40014fc0 	call	40014fc <__adddf3>
 40059b8:	1009883a 	mov	r4,r2
 40059bc:	180b883a 	mov	r5,r3
 40059c0:	1021883a 	mov	r16,r2
 40059c4:	1823883a 	mov	r17,r3
 40059c8:	40076680 	call	4007668 <__fixdfsi>
 40059cc:	000d883a 	mov	r6,zero
 40059d0:	000f883a 	mov	r7,zero
 40059d4:	8009883a 	mov	r4,r16
 40059d8:	880b883a 	mov	r5,r17
 40059dc:	d8800d15 	stw	r2,52(sp)
 40059e0:	40074600 	call	4007460 <__ltdf2>
 40059e4:	10032316 	blt	r2,zero,4006674 <_dtoa_r+0xecc>
 40059e8:	d8c00d17 	ldw	r3,52(sp)
 40059ec:	00800584 	movi	r2,22
 40059f0:	10c14a2e 	bgeu	r2,r3,4005f1c <_dtoa_r+0x774>
 40059f4:	01000044 	movi	r4,1
 40059f8:	d9000c15 	stw	r4,48(sp)
 40059fc:	bd85c83a 	sub	r2,r23,r22
 4005a00:	11bfffc4 	addi	r6,r2,-1
 4005a04:	30031716 	blt	r6,zero,4006664 <_dtoa_r+0xebc>
 4005a08:	d9800a15 	stw	r6,40(sp)
 4005a0c:	d8001115 	stw	zero,68(sp)
 4005a10:	d8c00d17 	ldw	r3,52(sp)
 4005a14:	18030b16 	blt	r3,zero,4006644 <_dtoa_r+0xe9c>
 4005a18:	d9000a17 	ldw	r4,40(sp)
 4005a1c:	d8c00915 	stw	r3,36(sp)
 4005a20:	d8001015 	stw	zero,64(sp)
 4005a24:	20c9883a 	add	r4,r4,r3
 4005a28:	d9000a15 	stw	r4,40(sp)
 4005a2c:	d9001717 	ldw	r4,92(sp)
 4005a30:	00800244 	movi	r2,9
 4005a34:	11004636 	bltu	r2,r4,4005b50 <_dtoa_r+0x3a8>
 4005a38:	00800144 	movi	r2,5
 4005a3c:	11020d16 	blt	r2,r4,4006274 <_dtoa_r+0xacc>
 4005a40:	04400044 	movi	r17,1
 4005a44:	d8c01717 	ldw	r3,92(sp)
 4005a48:	00800144 	movi	r2,5
 4005a4c:	10c1f636 	bltu	r2,r3,4006228 <_dtoa_r+0xa80>
 4005a50:	18c5883a 	add	r2,r3,r3
 4005a54:	1085883a 	add	r2,r2,r2
 4005a58:	00c10034 	movhi	r3,1024
 4005a5c:	18d69b04 	addi	r3,r3,23148
 4005a60:	10c5883a 	add	r2,r2,r3
 4005a64:	11000017 	ldw	r4,0(r2)
 4005a68:	2000683a 	jmp	r4
 4005a6c:	04005b58 	cmpnei	r16,zero,365
 4005a70:	04005b58 	cmpnei	r16,zero,365
 4005a74:	04006588 	cmpgei	r16,zero,406
 4005a78:	04006560 	cmpeqi	r16,zero,405
 4005a7c:	040065a4 	muli	r16,zero,406
 4005a80:	040065b0 	cmpltui	r16,zero,406
 4005a84:	d9002717 	ldw	r4,156(sp)
 4005a88:	0089c3c4 	movi	r2,9999
 4005a8c:	20800015 	stw	r2,0(r4)
 4005a90:	a0001026 	beq	r20,zero,4005ad4 <_dtoa_r+0x32c>
 4005a94:	00c10074 	movhi	r3,1025
 4005a98:	18e5d804 	addi	r3,r3,-26784
 4005a9c:	d9802917 	ldw	r6,164(sp)
 4005aa0:	303f7926 	beq	r6,zero,4005888 <_dtoa_r+0xe0>
 4005aa4:	188000c7 	ldb	r2,3(r3)
 4005aa8:	190000c4 	addi	r4,r3,3
 4005aac:	1000101e 	bne	r2,zero,4005af0 <_dtoa_r+0x348>
 4005ab0:	d8802917 	ldw	r2,164(sp)
 4005ab4:	11000015 	stw	r4,0(r2)
 4005ab8:	003f7306 	br	4005888 <_dtoa_r+0xe0>
 4005abc:	00a00034 	movhi	r2,32768
 4005ac0:	10bfffc4 	addi	r2,r2,-1
 4005ac4:	00c00044 	movi	r3,1
 4005ac8:	88aa703a 	and	r21,r17,r2
 4005acc:	98c00015 	stw	r3,0(r19)
 4005ad0:	003f5806 	br	4005834 <_dtoa_r+0x8c>
 4005ad4:	00800434 	movhi	r2,16
 4005ad8:	10bfffc4 	addi	r2,r2,-1
 4005adc:	a884703a 	and	r2,r21,r2
 4005ae0:	103fec1e 	bne	r2,zero,4005a94 <_dtoa_r+0x2ec>
 4005ae4:	00c10074 	movhi	r3,1025
 4005ae8:	18e5d504 	addi	r3,r3,-26796
 4005aec:	003feb06 	br	4005a9c <_dtoa_r+0x2f4>
 4005af0:	d8802917 	ldw	r2,164(sp)
 4005af4:	19000204 	addi	r4,r3,8
 4005af8:	11000015 	stw	r4,0(r2)
 4005afc:	003f6206 	br	4005888 <_dtoa_r+0xe0>
 4005b00:	ddc00117 	ldw	r23,4(sp)
 4005b04:	d8800217 	ldw	r2,8(sp)
 4005b08:	01000804 	movi	r4,32
 4005b0c:	b8c10c84 	addi	r3,r23,1074
 4005b10:	18a3883a 	add	r17,r3,r2
 4005b14:	2441dc0e 	bge	r4,r17,4006288 <_dtoa_r+0xae0>
 4005b18:	00c01004 	movi	r3,64
 4005b1c:	1c47c83a 	sub	r3,r3,r17
 4005b20:	88bff804 	addi	r2,r17,-32
 4005b24:	a8c6983a 	sll	r3,r21,r3
 4005b28:	a084d83a 	srl	r2,r20,r2
 4005b2c:	1888b03a 	or	r4,r3,r2
 4005b30:	40017c80 	call	40017c8 <__floatunsidf>
 4005b34:	1011883a 	mov	r8,r2
 4005b38:	00bf8434 	movhi	r2,65040
 4005b3c:	01000044 	movi	r4,1
 4005b40:	10d3883a 	add	r9,r2,r3
 4005b44:	8dbef344 	addi	r22,r17,-1075
 4005b48:	d9000815 	stw	r4,32(sp)
 4005b4c:	003f6f06 	br	400590c <_dtoa_r+0x164>
 4005b50:	d8001715 	stw	zero,92(sp)
 4005b54:	04400044 	movi	r17,1
 4005b58:	00bfffc4 	movi	r2,-1
 4005b5c:	00c00044 	movi	r3,1
 4005b60:	d8800e15 	stw	r2,56(sp)
 4005b64:	d8002615 	stw	zero,152(sp)
 4005b68:	d8800f15 	stw	r2,60(sp)
 4005b6c:	d8c00b15 	stw	r3,44(sp)
 4005b70:	1021883a 	mov	r16,r2
 4005b74:	d8801617 	ldw	r2,88(sp)
 4005b78:	14800417 	ldw	r18,16(r2)
 4005b7c:	90000115 	stw	zero,4(r18)
 4005b80:	d9001617 	ldw	r4,88(sp)
 4005b84:	91400117 	ldw	r5,4(r18)
 4005b88:	40042a40 	call	40042a4 <_Balloc>
 4005b8c:	d9001617 	ldw	r4,88(sp)
 4005b90:	90800015 	stw	r2,0(r18)
 4005b94:	00800384 	movi	r2,14
 4005b98:	20c00417 	ldw	r3,16(r4)
 4005b9c:	18c00017 	ldw	r3,0(r3)
 4005ba0:	d8c00515 	stw	r3,20(sp)
 4005ba4:	14006836 	bltu	r2,r16,4005d48 <_dtoa_r+0x5a0>
 4005ba8:	8805003a 	cmpeq	r2,r17,zero
 4005bac:	1000661e 	bne	r2,zero,4005d48 <_dtoa_r+0x5a0>
 4005bb0:	d9800d17 	ldw	r6,52(sp)
 4005bb4:	01823a0e 	bge	zero,r6,40064a0 <_dtoa_r+0xcf8>
 4005bb8:	308003cc 	andi	r2,r6,15
 4005bbc:	100490fa 	slli	r2,r2,3
 4005bc0:	3025d13a 	srai	r18,r6,4
 4005bc4:	00c10074 	movhi	r3,1025
 4005bc8:	18e58c04 	addi	r3,r3,-27088
 4005bcc:	10c5883a 	add	r2,r2,r3
 4005bd0:	90c0040c 	andi	r3,r18,16
 4005bd4:	14000017 	ldw	r16,0(r2)
 4005bd8:	14400117 	ldw	r17,4(r2)
 4005bdc:	1803741e 	bne	r3,zero,40069b0 <_dtoa_r+0x1208>
 4005be0:	05800084 	movi	r22,2
 4005be4:	90001026 	beq	r18,zero,4005c28 <_dtoa_r+0x480>
 4005be8:	04c10074 	movhi	r19,1025
 4005bec:	9ce5be04 	addi	r19,r19,-26888
 4005bf0:	9080004c 	andi	r2,r18,1
 4005bf4:	1005003a 	cmpeq	r2,r2,zero
 4005bf8:	1000081e 	bne	r2,zero,4005c1c <_dtoa_r+0x474>
 4005bfc:	99800017 	ldw	r6,0(r19)
 4005c00:	99c00117 	ldw	r7,4(r19)
 4005c04:	880b883a 	mov	r5,r17
 4005c08:	8009883a 	mov	r4,r16
 4005c0c:	4006e7c0 	call	4006e7c <__muldf3>
 4005c10:	1021883a 	mov	r16,r2
 4005c14:	b5800044 	addi	r22,r22,1
 4005c18:	1823883a 	mov	r17,r3
 4005c1c:	9025d07a 	srai	r18,r18,1
 4005c20:	9cc00204 	addi	r19,r19,8
 4005c24:	903ff21e 	bne	r18,zero,4005bf0 <_dtoa_r+0x448>
 4005c28:	a80b883a 	mov	r5,r21
 4005c2c:	a009883a 	mov	r4,r20
 4005c30:	880f883a 	mov	r7,r17
 4005c34:	800d883a 	mov	r6,r16
 4005c38:	40015700 	call	4001570 <__divdf3>
 4005c3c:	1029883a 	mov	r20,r2
 4005c40:	182b883a 	mov	r21,r3
 4005c44:	d8c00c17 	ldw	r3,48(sp)
 4005c48:	1805003a 	cmpeq	r2,r3,zero
 4005c4c:	1000081e 	bne	r2,zero,4005c70 <_dtoa_r+0x4c8>
 4005c50:	0005883a 	mov	r2,zero
 4005c54:	00cffc34 	movhi	r3,16368
 4005c58:	180f883a 	mov	r7,r3
 4005c5c:	a009883a 	mov	r4,r20
 4005c60:	a80b883a 	mov	r5,r21
 4005c64:	100d883a 	mov	r6,r2
 4005c68:	40074600 	call	4007460 <__ltdf2>
 4005c6c:	10040816 	blt	r2,zero,4006c90 <_dtoa_r+0x14e8>
 4005c70:	b009883a 	mov	r4,r22
 4005c74:	40075700 	call	4007570 <__floatsidf>
 4005c78:	180b883a 	mov	r5,r3
 4005c7c:	1009883a 	mov	r4,r2
 4005c80:	a00d883a 	mov	r6,r20
 4005c84:	a80f883a 	mov	r7,r21
 4005c88:	4006e7c0 	call	4006e7c <__muldf3>
 4005c8c:	0011883a 	mov	r8,zero
 4005c90:	02500734 	movhi	r9,16412
 4005c94:	1009883a 	mov	r4,r2
 4005c98:	180b883a 	mov	r5,r3
 4005c9c:	480f883a 	mov	r7,r9
 4005ca0:	400d883a 	mov	r6,r8
 4005ca4:	40014fc0 	call	40014fc <__adddf3>
 4005ca8:	d9000f17 	ldw	r4,60(sp)
 4005cac:	102d883a 	mov	r22,r2
 4005cb0:	00bf3034 	movhi	r2,64704
 4005cb4:	18b9883a 	add	fp,r3,r2
 4005cb8:	e02f883a 	mov	r23,fp
 4005cbc:	2002991e 	bne	r4,zero,4006724 <_dtoa_r+0xf7c>
 4005cc0:	0005883a 	mov	r2,zero
 4005cc4:	00d00534 	movhi	r3,16404
 4005cc8:	a009883a 	mov	r4,r20
 4005ccc:	a80b883a 	mov	r5,r21
 4005cd0:	180f883a 	mov	r7,r3
 4005cd4:	100d883a 	mov	r6,r2
 4005cd8:	400147c0 	call	400147c <__subdf3>
 4005cdc:	1009883a 	mov	r4,r2
 4005ce0:	e00f883a 	mov	r7,fp
 4005ce4:	180b883a 	mov	r5,r3
 4005ce8:	b00d883a 	mov	r6,r22
 4005cec:	1025883a 	mov	r18,r2
 4005cf0:	1827883a 	mov	r19,r3
 4005cf4:	40073500 	call	4007350 <__gtdf2>
 4005cf8:	00835916 	blt	zero,r2,4006a60 <_dtoa_r+0x12b8>
 4005cfc:	e0e0003c 	xorhi	r3,fp,32768
 4005d00:	9009883a 	mov	r4,r18
 4005d04:	980b883a 	mov	r5,r19
 4005d08:	180f883a 	mov	r7,r3
 4005d0c:	b00d883a 	mov	r6,r22
 4005d10:	40074600 	call	4007460 <__ltdf2>
 4005d14:	1000080e 	bge	r2,zero,4005d38 <_dtoa_r+0x590>
 4005d18:	0027883a 	mov	r19,zero
 4005d1c:	0025883a 	mov	r18,zero
 4005d20:	d8802617 	ldw	r2,152(sp)
 4005d24:	df000517 	ldw	fp,20(sp)
 4005d28:	d8000615 	stw	zero,24(sp)
 4005d2c:	0084303a 	nor	r2,zero,r2
 4005d30:	d8800d15 	stw	r2,52(sp)
 4005d34:	0001a506 	br	40063cc <_dtoa_r+0xc24>
 4005d38:	d9801217 	ldw	r6,72(sp)
 4005d3c:	d8801317 	ldw	r2,76(sp)
 4005d40:	3029883a 	mov	r20,r6
 4005d44:	102b883a 	mov	r21,r2
 4005d48:	d8c00217 	ldw	r3,8(sp)
 4005d4c:	18008516 	blt	r3,zero,4005f64 <_dtoa_r+0x7bc>
 4005d50:	d9000d17 	ldw	r4,52(sp)
 4005d54:	00800384 	movi	r2,14
 4005d58:	11008216 	blt	r2,r4,4005f64 <_dtoa_r+0x7bc>
 4005d5c:	200490fa 	slli	r2,r4,3
 4005d60:	d9802617 	ldw	r6,152(sp)
 4005d64:	00c10074 	movhi	r3,1025
 4005d68:	18e58c04 	addi	r3,r3,-27088
 4005d6c:	10c5883a 	add	r2,r2,r3
 4005d70:	14800017 	ldw	r18,0(r2)
 4005d74:	14c00117 	ldw	r19,4(r2)
 4005d78:	30032816 	blt	r6,zero,4006a1c <_dtoa_r+0x1274>
 4005d7c:	d9000517 	ldw	r4,20(sp)
 4005d80:	d8c00f17 	ldw	r3,60(sp)
 4005d84:	a823883a 	mov	r17,r21
 4005d88:	a021883a 	mov	r16,r20
 4005d8c:	192b883a 	add	r21,r3,r4
 4005d90:	2039883a 	mov	fp,r4
 4005d94:	00000f06 	br	4005dd4 <_dtoa_r+0x62c>
 4005d98:	0005883a 	mov	r2,zero
 4005d9c:	00d00934 	movhi	r3,16420
 4005da0:	5009883a 	mov	r4,r10
 4005da4:	580b883a 	mov	r5,r11
 4005da8:	180f883a 	mov	r7,r3
 4005dac:	100d883a 	mov	r6,r2
 4005db0:	4006e7c0 	call	4006e7c <__muldf3>
 4005db4:	180b883a 	mov	r5,r3
 4005db8:	000d883a 	mov	r6,zero
 4005dbc:	000f883a 	mov	r7,zero
 4005dc0:	1009883a 	mov	r4,r2
 4005dc4:	1021883a 	mov	r16,r2
 4005dc8:	1823883a 	mov	r17,r3
 4005dcc:	40072c80 	call	40072c8 <__nedf2>
 4005dd0:	10004526 	beq	r2,zero,4005ee8 <_dtoa_r+0x740>
 4005dd4:	900d883a 	mov	r6,r18
 4005dd8:	980f883a 	mov	r7,r19
 4005ddc:	8009883a 	mov	r4,r16
 4005de0:	880b883a 	mov	r5,r17
 4005de4:	40015700 	call	4001570 <__divdf3>
 4005de8:	180b883a 	mov	r5,r3
 4005dec:	1009883a 	mov	r4,r2
 4005df0:	40076680 	call	4007668 <__fixdfsi>
 4005df4:	1009883a 	mov	r4,r2
 4005df8:	1029883a 	mov	r20,r2
 4005dfc:	40075700 	call	4007570 <__floatsidf>
 4005e00:	180f883a 	mov	r7,r3
 4005e04:	9009883a 	mov	r4,r18
 4005e08:	980b883a 	mov	r5,r19
 4005e0c:	100d883a 	mov	r6,r2
 4005e10:	4006e7c0 	call	4006e7c <__muldf3>
 4005e14:	180f883a 	mov	r7,r3
 4005e18:	880b883a 	mov	r5,r17
 4005e1c:	8009883a 	mov	r4,r16
 4005e20:	100d883a 	mov	r6,r2
 4005e24:	400147c0 	call	400147c <__subdf3>
 4005e28:	1015883a 	mov	r10,r2
 4005e2c:	a0800c04 	addi	r2,r20,48
 4005e30:	e0800005 	stb	r2,0(fp)
 4005e34:	e7000044 	addi	fp,fp,1
 4005e38:	1817883a 	mov	r11,r3
 4005e3c:	e57fd61e 	bne	fp,r21,4005d98 <_dtoa_r+0x5f0>
 4005e40:	500d883a 	mov	r6,r10
 4005e44:	180f883a 	mov	r7,r3
 4005e48:	5009883a 	mov	r4,r10
 4005e4c:	180b883a 	mov	r5,r3
 4005e50:	40014fc0 	call	40014fc <__adddf3>
 4005e54:	100d883a 	mov	r6,r2
 4005e58:	9009883a 	mov	r4,r18
 4005e5c:	980b883a 	mov	r5,r19
 4005e60:	180f883a 	mov	r7,r3
 4005e64:	1021883a 	mov	r16,r2
 4005e68:	1823883a 	mov	r17,r3
 4005e6c:	40074600 	call	4007460 <__ltdf2>
 4005e70:	10000816 	blt	r2,zero,4005e94 <_dtoa_r+0x6ec>
 4005e74:	980b883a 	mov	r5,r19
 4005e78:	800d883a 	mov	r6,r16
 4005e7c:	880f883a 	mov	r7,r17
 4005e80:	9009883a 	mov	r4,r18
 4005e84:	40072400 	call	4007240 <__eqdf2>
 4005e88:	1000171e 	bne	r2,zero,4005ee8 <_dtoa_r+0x740>
 4005e8c:	a080004c 	andi	r2,r20,1
 4005e90:	10001526 	beq	r2,zero,4005ee8 <_dtoa_r+0x740>
 4005e94:	d8800d17 	ldw	r2,52(sp)
 4005e98:	d8800315 	stw	r2,12(sp)
 4005e9c:	e009883a 	mov	r4,fp
 4005ea0:	213fffc4 	addi	r4,r4,-1
 4005ea4:	20c00007 	ldb	r3,0(r4)
 4005ea8:	00800e44 	movi	r2,57
 4005eac:	1880081e 	bne	r3,r2,4005ed0 <_dtoa_r+0x728>
 4005eb0:	d8800517 	ldw	r2,20(sp)
 4005eb4:	113ffa1e 	bne	r2,r4,4005ea0 <_dtoa_r+0x6f8>
 4005eb8:	d8c00317 	ldw	r3,12(sp)
 4005ebc:	d9800517 	ldw	r6,20(sp)
 4005ec0:	00800c04 	movi	r2,48
 4005ec4:	18c00044 	addi	r3,r3,1
 4005ec8:	d8c00315 	stw	r3,12(sp)
 4005ecc:	30800005 	stb	r2,0(r6)
 4005ed0:	20800003 	ldbu	r2,0(r4)
 4005ed4:	d8c00317 	ldw	r3,12(sp)
 4005ed8:	27000044 	addi	fp,r4,1
 4005edc:	10800044 	addi	r2,r2,1
 4005ee0:	d8c00d15 	stw	r3,52(sp)
 4005ee4:	20800005 	stb	r2,0(r4)
 4005ee8:	d9001617 	ldw	r4,88(sp)
 4005eec:	d9400717 	ldw	r5,28(sp)
 4005ef0:	400422c0 	call	400422c <_Bfree>
 4005ef4:	e0000005 	stb	zero,0(fp)
 4005ef8:	d9800d17 	ldw	r6,52(sp)
 4005efc:	d8c02717 	ldw	r3,156(sp)
 4005f00:	d9002917 	ldw	r4,164(sp)
 4005f04:	30800044 	addi	r2,r6,1
 4005f08:	18800015 	stw	r2,0(r3)
 4005f0c:	2002a626 	beq	r4,zero,40069a8 <_dtoa_r+0x1200>
 4005f10:	d8c00517 	ldw	r3,20(sp)
 4005f14:	27000015 	stw	fp,0(r4)
 4005f18:	003e5b06 	br	4005888 <_dtoa_r+0xe0>
 4005f1c:	d9800d17 	ldw	r6,52(sp)
 4005f20:	00c10074 	movhi	r3,1025
 4005f24:	18e58c04 	addi	r3,r3,-27088
 4005f28:	d9001217 	ldw	r4,72(sp)
 4005f2c:	300490fa 	slli	r2,r6,3
 4005f30:	d9401317 	ldw	r5,76(sp)
 4005f34:	10c5883a 	add	r2,r2,r3
 4005f38:	12000017 	ldw	r8,0(r2)
 4005f3c:	12400117 	ldw	r9,4(r2)
 4005f40:	400d883a 	mov	r6,r8
 4005f44:	480f883a 	mov	r7,r9
 4005f48:	40074600 	call	4007460 <__ltdf2>
 4005f4c:	1000030e 	bge	r2,zero,4005f5c <_dtoa_r+0x7b4>
 4005f50:	d8800d17 	ldw	r2,52(sp)
 4005f54:	10bfffc4 	addi	r2,r2,-1
 4005f58:	d8800d15 	stw	r2,52(sp)
 4005f5c:	d8000c15 	stw	zero,48(sp)
 4005f60:	003ea606 	br	40059fc <_dtoa_r+0x254>
 4005f64:	d9000b17 	ldw	r4,44(sp)
 4005f68:	202cc03a 	cmpne	r22,r4,zero
 4005f6c:	b000d11e 	bne	r22,zero,40062b4 <_dtoa_r+0xb0c>
 4005f70:	dc001117 	ldw	r16,68(sp)
 4005f74:	dc801017 	ldw	r18,64(sp)
 4005f78:	0027883a 	mov	r19,zero
 4005f7c:	04000b0e 	bge	zero,r16,4005fac <_dtoa_r+0x804>
 4005f80:	d8c00a17 	ldw	r3,40(sp)
 4005f84:	00c0090e 	bge	zero,r3,4005fac <_dtoa_r+0x804>
 4005f88:	8005883a 	mov	r2,r16
 4005f8c:	1c011d16 	blt	r3,r16,4006404 <_dtoa_r+0xc5c>
 4005f90:	d9000a17 	ldw	r4,40(sp)
 4005f94:	d9801117 	ldw	r6,68(sp)
 4005f98:	80a1c83a 	sub	r16,r16,r2
 4005f9c:	2089c83a 	sub	r4,r4,r2
 4005fa0:	308dc83a 	sub	r6,r6,r2
 4005fa4:	d9000a15 	stw	r4,40(sp)
 4005fa8:	d9801115 	stw	r6,68(sp)
 4005fac:	d8801017 	ldw	r2,64(sp)
 4005fb0:	0080150e 	bge	zero,r2,4006008 <_dtoa_r+0x860>
 4005fb4:	d8c00b17 	ldw	r3,44(sp)
 4005fb8:	1805003a 	cmpeq	r2,r3,zero
 4005fbc:	1001d31e 	bne	r2,zero,400670c <_dtoa_r+0xf64>
 4005fc0:	04800e0e 	bge	zero,r18,4005ffc <_dtoa_r+0x854>
 4005fc4:	d9001617 	ldw	r4,88(sp)
 4005fc8:	980b883a 	mov	r5,r19
 4005fcc:	900d883a 	mov	r6,r18
 4005fd0:	4004ba40 	call	4004ba4 <__pow5mult>
 4005fd4:	d9001617 	ldw	r4,88(sp)
 4005fd8:	d9800717 	ldw	r6,28(sp)
 4005fdc:	100b883a 	mov	r5,r2
 4005fe0:	1027883a 	mov	r19,r2
 4005fe4:	40047e80 	call	40047e8 <__multiply>
 4005fe8:	d9001617 	ldw	r4,88(sp)
 4005fec:	d9400717 	ldw	r5,28(sp)
 4005ff0:	1023883a 	mov	r17,r2
 4005ff4:	400422c0 	call	400422c <_Bfree>
 4005ff8:	dc400715 	stw	r17,28(sp)
 4005ffc:	d9001017 	ldw	r4,64(sp)
 4006000:	248dc83a 	sub	r6,r4,r18
 4006004:	3001181e 	bne	r6,zero,4006468 <_dtoa_r+0xcc0>
 4006008:	d9001617 	ldw	r4,88(sp)
 400600c:	04400044 	movi	r17,1
 4006010:	880b883a 	mov	r5,r17
 4006014:	4004a3c0 	call	4004a3c <__i2b>
 4006018:	d9800917 	ldw	r6,36(sp)
 400601c:	1025883a 	mov	r18,r2
 4006020:	0180040e 	bge	zero,r6,4006034 <_dtoa_r+0x88c>
 4006024:	d9001617 	ldw	r4,88(sp)
 4006028:	100b883a 	mov	r5,r2
 400602c:	4004ba40 	call	4004ba4 <__pow5mult>
 4006030:	1025883a 	mov	r18,r2
 4006034:	d8801717 	ldw	r2,92(sp)
 4006038:	8880fd0e 	bge	r17,r2,4006430 <_dtoa_r+0xc88>
 400603c:	0023883a 	mov	r17,zero
 4006040:	d9800917 	ldw	r6,36(sp)
 4006044:	3001a81e 	bne	r6,zero,40066e8 <_dtoa_r+0xf40>
 4006048:	00c00044 	movi	r3,1
 400604c:	d9000a17 	ldw	r4,40(sp)
 4006050:	20c5883a 	add	r2,r4,r3
 4006054:	10c007cc 	andi	r3,r2,31
 4006058:	18008e1e 	bne	r3,zero,4006294 <_dtoa_r+0xaec>
 400605c:	00800704 	movi	r2,28
 4006060:	d9000a17 	ldw	r4,40(sp)
 4006064:	d9801117 	ldw	r6,68(sp)
 4006068:	80a1883a 	add	r16,r16,r2
 400606c:	2089883a 	add	r4,r4,r2
 4006070:	308d883a 	add	r6,r6,r2
 4006074:	d9000a15 	stw	r4,40(sp)
 4006078:	d9801115 	stw	r6,68(sp)
 400607c:	d8801117 	ldw	r2,68(sp)
 4006080:	0080050e 	bge	zero,r2,4006098 <_dtoa_r+0x8f0>
 4006084:	d9400717 	ldw	r5,28(sp)
 4006088:	d9001617 	ldw	r4,88(sp)
 400608c:	100d883a 	mov	r6,r2
 4006090:	400469c0 	call	400469c <__lshift>
 4006094:	d8800715 	stw	r2,28(sp)
 4006098:	d8c00a17 	ldw	r3,40(sp)
 400609c:	00c0050e 	bge	zero,r3,40060b4 <_dtoa_r+0x90c>
 40060a0:	d9001617 	ldw	r4,88(sp)
 40060a4:	900b883a 	mov	r5,r18
 40060a8:	180d883a 	mov	r6,r3
 40060ac:	400469c0 	call	400469c <__lshift>
 40060b0:	1025883a 	mov	r18,r2
 40060b4:	d9000c17 	ldw	r4,48(sp)
 40060b8:	2005003a 	cmpeq	r2,r4,zero
 40060bc:	10017926 	beq	r2,zero,40066a4 <_dtoa_r+0xefc>
 40060c0:	d9000f17 	ldw	r4,60(sp)
 40060c4:	0102210e 	bge	zero,r4,400694c <_dtoa_r+0x11a4>
 40060c8:	d9800b17 	ldw	r6,44(sp)
 40060cc:	3005003a 	cmpeq	r2,r6,zero
 40060d0:	1000921e 	bne	r2,zero,400631c <_dtoa_r+0xb74>
 40060d4:	0400050e 	bge	zero,r16,40060ec <_dtoa_r+0x944>
 40060d8:	d9001617 	ldw	r4,88(sp)
 40060dc:	980b883a 	mov	r5,r19
 40060e0:	800d883a 	mov	r6,r16
 40060e4:	400469c0 	call	400469c <__lshift>
 40060e8:	1027883a 	mov	r19,r2
 40060ec:	8804c03a 	cmpne	r2,r17,zero
 40060f0:	10025e1e 	bne	r2,zero,4006a6c <_dtoa_r+0x12c4>
 40060f4:	980b883a 	mov	r5,r19
 40060f8:	dd800517 	ldw	r22,20(sp)
 40060fc:	dcc00615 	stw	r19,24(sp)
 4006100:	a700004c 	andi	fp,r20,1
 4006104:	2827883a 	mov	r19,r5
 4006108:	d9000717 	ldw	r4,28(sp)
 400610c:	900b883a 	mov	r5,r18
 4006110:	40055640 	call	4005564 <quorem>
 4006114:	d9000717 	ldw	r4,28(sp)
 4006118:	d9400617 	ldw	r5,24(sp)
 400611c:	1023883a 	mov	r17,r2
 4006120:	8dc00c04 	addi	r23,r17,48
 4006124:	4003e080 	call	4003e08 <__mcmp>
 4006128:	d9001617 	ldw	r4,88(sp)
 400612c:	900b883a 	mov	r5,r18
 4006130:	980d883a 	mov	r6,r19
 4006134:	1029883a 	mov	r20,r2
 4006138:	40045100 	call	4004510 <__mdiff>
 400613c:	102b883a 	mov	r21,r2
 4006140:	10800317 	ldw	r2,12(r2)
 4006144:	1001321e 	bne	r2,zero,4006610 <_dtoa_r+0xe68>
 4006148:	d9000717 	ldw	r4,28(sp)
 400614c:	a80b883a 	mov	r5,r21
 4006150:	4003e080 	call	4003e08 <__mcmp>
 4006154:	d9001617 	ldw	r4,88(sp)
 4006158:	1021883a 	mov	r16,r2
 400615c:	a80b883a 	mov	r5,r21
 4006160:	400422c0 	call	400422c <_Bfree>
 4006164:	8000041e 	bne	r16,zero,4006178 <_dtoa_r+0x9d0>
 4006168:	d8801717 	ldw	r2,92(sp)
 400616c:	1000021e 	bne	r2,zero,4006178 <_dtoa_r+0x9d0>
 4006170:	e004c03a 	cmpne	r2,fp,zero
 4006174:	10012126 	beq	r2,zero,40065fc <_dtoa_r+0xe54>
 4006178:	a0011016 	blt	r20,zero,40065bc <_dtoa_r+0xe14>
 400617c:	a000041e 	bne	r20,zero,4006190 <_dtoa_r+0x9e8>
 4006180:	d8c01717 	ldw	r3,92(sp)
 4006184:	1800021e 	bne	r3,zero,4006190 <_dtoa_r+0x9e8>
 4006188:	e004c03a 	cmpne	r2,fp,zero
 400618c:	10010b26 	beq	r2,zero,40065bc <_dtoa_r+0xe14>
 4006190:	04024716 	blt	zero,r16,4006ab0 <_dtoa_r+0x1308>
 4006194:	b5c00005 	stb	r23,0(r22)
 4006198:	d9800517 	ldw	r6,20(sp)
 400619c:	d9000f17 	ldw	r4,60(sp)
 40061a0:	b5800044 	addi	r22,r22,1
 40061a4:	3105883a 	add	r2,r6,r4
 40061a8:	b0806f26 	beq	r22,r2,4006368 <_dtoa_r+0xbc0>
 40061ac:	d9400717 	ldw	r5,28(sp)
 40061b0:	d9001617 	ldw	r4,88(sp)
 40061b4:	01800284 	movi	r6,10
 40061b8:	000f883a 	mov	r7,zero
 40061bc:	4004a780 	call	4004a78 <__multadd>
 40061c0:	d8800715 	stw	r2,28(sp)
 40061c4:	d8800617 	ldw	r2,24(sp)
 40061c8:	14c11626 	beq	r2,r19,4006624 <_dtoa_r+0xe7c>
 40061cc:	d9400617 	ldw	r5,24(sp)
 40061d0:	d9001617 	ldw	r4,88(sp)
 40061d4:	01800284 	movi	r6,10
 40061d8:	000f883a 	mov	r7,zero
 40061dc:	4004a780 	call	4004a78 <__multadd>
 40061e0:	d9001617 	ldw	r4,88(sp)
 40061e4:	980b883a 	mov	r5,r19
 40061e8:	01800284 	movi	r6,10
 40061ec:	000f883a 	mov	r7,zero
 40061f0:	d8800615 	stw	r2,24(sp)
 40061f4:	4004a780 	call	4004a78 <__multadd>
 40061f8:	1027883a 	mov	r19,r2
 40061fc:	003fc206 	br	4006108 <_dtoa_r+0x960>
 4006200:	01000404 	movi	r4,16
 4006204:	40024640 	call	4002464 <malloc>
 4006208:	1025883a 	mov	r18,r2
 400620c:	d8801617 	ldw	r2,88(sp)
 4006210:	90000115 	stw	zero,4(r18)
 4006214:	90000215 	stw	zero,8(r18)
 4006218:	14800415 	stw	r18,16(r2)
 400621c:	90000015 	stw	zero,0(r18)
 4006220:	90000315 	stw	zero,12(r18)
 4006224:	003d7306 	br	40057f4 <_dtoa_r+0x4c>
 4006228:	01bfffc4 	movi	r6,-1
 400622c:	00800044 	movi	r2,1
 4006230:	d9800e15 	stw	r6,56(sp)
 4006234:	d9800f15 	stw	r6,60(sp)
 4006238:	d8800b15 	stw	r2,44(sp)
 400623c:	d8c01617 	ldw	r3,88(sp)
 4006240:	008005c4 	movi	r2,23
 4006244:	1c800417 	ldw	r18,16(r3)
 4006248:	90000115 	stw	zero,4(r18)
 400624c:	1580072e 	bgeu	r2,r22,400626c <_dtoa_r+0xac4>
 4006250:	00c00104 	movi	r3,4
 4006254:	0009883a 	mov	r4,zero
 4006258:	18c7883a 	add	r3,r3,r3
 400625c:	18800504 	addi	r2,r3,20
 4006260:	21000044 	addi	r4,r4,1
 4006264:	b0bffc2e 	bgeu	r22,r2,4006258 <_dtoa_r+0xab0>
 4006268:	91000115 	stw	r4,4(r18)
 400626c:	dc000f17 	ldw	r16,60(sp)
 4006270:	003e4306 	br	4005b80 <_dtoa_r+0x3d8>
 4006274:	d9801717 	ldw	r6,92(sp)
 4006278:	0023883a 	mov	r17,zero
 400627c:	31bfff04 	addi	r6,r6,-4
 4006280:	d9801715 	stw	r6,92(sp)
 4006284:	003def06 	br	4005a44 <_dtoa_r+0x29c>
 4006288:	2445c83a 	sub	r2,r4,r17
 400628c:	a088983a 	sll	r4,r20,r2
 4006290:	003e2706 	br	4005b30 <_dtoa_r+0x388>
 4006294:	00800804 	movi	r2,32
 4006298:	10c9c83a 	sub	r4,r2,r3
 400629c:	00c00104 	movi	r3,4
 40062a0:	19005a16 	blt	r3,r4,400640c <_dtoa_r+0xc64>
 40062a4:	008000c4 	movi	r2,3
 40062a8:	113f7416 	blt	r2,r4,400607c <_dtoa_r+0x8d4>
 40062ac:	20800704 	addi	r2,r4,28
 40062b0:	003f6b06 	br	4006060 <_dtoa_r+0x8b8>
 40062b4:	d9801717 	ldw	r6,92(sp)
 40062b8:	00800044 	movi	r2,1
 40062bc:	1180a10e 	bge	r2,r6,4006544 <_dtoa_r+0xd9c>
 40062c0:	d9800f17 	ldw	r6,60(sp)
 40062c4:	d8c01017 	ldw	r3,64(sp)
 40062c8:	30bfffc4 	addi	r2,r6,-1
 40062cc:	1881c616 	blt	r3,r2,40069e8 <_dtoa_r+0x1240>
 40062d0:	18a5c83a 	sub	r18,r3,r2
 40062d4:	d8800f17 	ldw	r2,60(sp)
 40062d8:	10026216 	blt	r2,zero,4006c64 <_dtoa_r+0x14bc>
 40062dc:	dc001117 	ldw	r16,68(sp)
 40062e0:	1007883a 	mov	r3,r2
 40062e4:	d9800a17 	ldw	r6,40(sp)
 40062e8:	d8801117 	ldw	r2,68(sp)
 40062ec:	d9001617 	ldw	r4,88(sp)
 40062f0:	30cd883a 	add	r6,r6,r3
 40062f4:	10c5883a 	add	r2,r2,r3
 40062f8:	01400044 	movi	r5,1
 40062fc:	d9800a15 	stw	r6,40(sp)
 4006300:	d8801115 	stw	r2,68(sp)
 4006304:	4004a3c0 	call	4004a3c <__i2b>
 4006308:	1027883a 	mov	r19,r2
 400630c:	003f1b06 	br	4005f7c <_dtoa_r+0x7d4>
 4006310:	00c10074 	movhi	r3,1025
 4006314:	18e5d904 	addi	r3,r3,-26780
 4006318:	003d5b06 	br	4005888 <_dtoa_r+0xe0>
 400631c:	dd800517 	ldw	r22,20(sp)
 4006320:	04000044 	movi	r16,1
 4006324:	00000706 	br	4006344 <_dtoa_r+0xb9c>
 4006328:	d9400717 	ldw	r5,28(sp)
 400632c:	d9001617 	ldw	r4,88(sp)
 4006330:	01800284 	movi	r6,10
 4006334:	000f883a 	mov	r7,zero
 4006338:	4004a780 	call	4004a78 <__multadd>
 400633c:	d8800715 	stw	r2,28(sp)
 4006340:	84000044 	addi	r16,r16,1
 4006344:	d9000717 	ldw	r4,28(sp)
 4006348:	900b883a 	mov	r5,r18
 400634c:	40055640 	call	4005564 <quorem>
 4006350:	15c00c04 	addi	r23,r2,48
 4006354:	b5c00005 	stb	r23,0(r22)
 4006358:	d8c00f17 	ldw	r3,60(sp)
 400635c:	b5800044 	addi	r22,r22,1
 4006360:	80fff116 	blt	r16,r3,4006328 <_dtoa_r+0xb80>
 4006364:	d8000615 	stw	zero,24(sp)
 4006368:	d9400717 	ldw	r5,28(sp)
 400636c:	d9001617 	ldw	r4,88(sp)
 4006370:	01800044 	movi	r6,1
 4006374:	400469c0 	call	400469c <__lshift>
 4006378:	1009883a 	mov	r4,r2
 400637c:	900b883a 	mov	r5,r18
 4006380:	d8800715 	stw	r2,28(sp)
 4006384:	4003e080 	call	4003e08 <__mcmp>
 4006388:	00803c0e 	bge	zero,r2,400647c <_dtoa_r+0xcd4>
 400638c:	b009883a 	mov	r4,r22
 4006390:	213fffc4 	addi	r4,r4,-1
 4006394:	21400003 	ldbu	r5,0(r4)
 4006398:	00800e44 	movi	r2,57
 400639c:	28c03fcc 	andi	r3,r5,255
 40063a0:	18c0201c 	xori	r3,r3,128
 40063a4:	18ffe004 	addi	r3,r3,-128
 40063a8:	1881981e 	bne	r3,r2,4006a0c <_dtoa_r+0x1264>
 40063ac:	d9800517 	ldw	r6,20(sp)
 40063b0:	21bff71e 	bne	r4,r6,4006390 <_dtoa_r+0xbe8>
 40063b4:	d8800d17 	ldw	r2,52(sp)
 40063b8:	37000044 	addi	fp,r6,1
 40063bc:	10800044 	addi	r2,r2,1
 40063c0:	d8800d15 	stw	r2,52(sp)
 40063c4:	00800c44 	movi	r2,49
 40063c8:	30800005 	stb	r2,0(r6)
 40063cc:	d9001617 	ldw	r4,88(sp)
 40063d0:	900b883a 	mov	r5,r18
 40063d4:	400422c0 	call	400422c <_Bfree>
 40063d8:	983ec326 	beq	r19,zero,4005ee8 <_dtoa_r+0x740>
 40063dc:	d8c00617 	ldw	r3,24(sp)
 40063e0:	18000426 	beq	r3,zero,40063f4 <_dtoa_r+0xc4c>
 40063e4:	1cc00326 	beq	r3,r19,40063f4 <_dtoa_r+0xc4c>
 40063e8:	d9001617 	ldw	r4,88(sp)
 40063ec:	180b883a 	mov	r5,r3
 40063f0:	400422c0 	call	400422c <_Bfree>
 40063f4:	d9001617 	ldw	r4,88(sp)
 40063f8:	980b883a 	mov	r5,r19
 40063fc:	400422c0 	call	400422c <_Bfree>
 4006400:	003eb906 	br	4005ee8 <_dtoa_r+0x740>
 4006404:	1805883a 	mov	r2,r3
 4006408:	003ee106 	br	4005f90 <_dtoa_r+0x7e8>
 400640c:	d9800a17 	ldw	r6,40(sp)
 4006410:	d8c01117 	ldw	r3,68(sp)
 4006414:	20bfff04 	addi	r2,r4,-4
 4006418:	308d883a 	add	r6,r6,r2
 400641c:	1887883a 	add	r3,r3,r2
 4006420:	80a1883a 	add	r16,r16,r2
 4006424:	d9800a15 	stw	r6,40(sp)
 4006428:	d8c01115 	stw	r3,68(sp)
 400642c:	003f1306 	br	400607c <_dtoa_r+0x8d4>
 4006430:	a03f021e 	bne	r20,zero,400603c <_dtoa_r+0x894>
 4006434:	00800434 	movhi	r2,16
 4006438:	10bfffc4 	addi	r2,r2,-1
 400643c:	a884703a 	and	r2,r21,r2
 4006440:	103efe1e 	bne	r2,zero,400603c <_dtoa_r+0x894>
 4006444:	a89ffc2c 	andhi	r2,r21,32752
 4006448:	103efc26 	beq	r2,zero,400603c <_dtoa_r+0x894>
 400644c:	d8c01117 	ldw	r3,68(sp)
 4006450:	d9000a17 	ldw	r4,40(sp)
 4006454:	18c00044 	addi	r3,r3,1
 4006458:	21000044 	addi	r4,r4,1
 400645c:	d8c01115 	stw	r3,68(sp)
 4006460:	d9000a15 	stw	r4,40(sp)
 4006464:	003ef606 	br	4006040 <_dtoa_r+0x898>
 4006468:	d9400717 	ldw	r5,28(sp)
 400646c:	d9001617 	ldw	r4,88(sp)
 4006470:	4004ba40 	call	4004ba4 <__pow5mult>
 4006474:	d8800715 	stw	r2,28(sp)
 4006478:	003ee306 	br	4006008 <_dtoa_r+0x860>
 400647c:	1000021e 	bne	r2,zero,4006488 <_dtoa_r+0xce0>
 4006480:	b880004c 	andi	r2,r23,1
 4006484:	103fc11e 	bne	r2,zero,400638c <_dtoa_r+0xbe4>
 4006488:	b5bfffc4 	addi	r22,r22,-1
 400648c:	b0c00007 	ldb	r3,0(r22)
 4006490:	00800c04 	movi	r2,48
 4006494:	18bffc26 	beq	r3,r2,4006488 <_dtoa_r+0xce0>
 4006498:	b7000044 	addi	fp,r22,1
 400649c:	003fcb06 	br	40063cc <_dtoa_r+0xc24>
 40064a0:	d8800d17 	ldw	r2,52(sp)
 40064a4:	008fc83a 	sub	r7,zero,r2
 40064a8:	3801f726 	beq	r7,zero,4006c88 <_dtoa_r+0x14e0>
 40064ac:	398003cc 	andi	r6,r7,15
 40064b0:	300c90fa 	slli	r6,r6,3
 40064b4:	01410074 	movhi	r5,1025
 40064b8:	29658c04 	addi	r5,r5,-27088
 40064bc:	d9001217 	ldw	r4,72(sp)
 40064c0:	314d883a 	add	r6,r6,r5
 40064c4:	30c00117 	ldw	r3,4(r6)
 40064c8:	30800017 	ldw	r2,0(r6)
 40064cc:	d9401317 	ldw	r5,76(sp)
 40064d0:	3821d13a 	srai	r16,r7,4
 40064d4:	100d883a 	mov	r6,r2
 40064d8:	180f883a 	mov	r7,r3
 40064dc:	4006e7c0 	call	4006e7c <__muldf3>
 40064e0:	1011883a 	mov	r8,r2
 40064e4:	1813883a 	mov	r9,r3
 40064e8:	1029883a 	mov	r20,r2
 40064ec:	182b883a 	mov	r21,r3
 40064f0:	8001e526 	beq	r16,zero,4006c88 <_dtoa_r+0x14e0>
 40064f4:	05800084 	movi	r22,2
 40064f8:	04410074 	movhi	r17,1025
 40064fc:	8c65be04 	addi	r17,r17,-26888
 4006500:	8080004c 	andi	r2,r16,1
 4006504:	1005003a 	cmpeq	r2,r2,zero
 4006508:	1000081e 	bne	r2,zero,400652c <_dtoa_r+0xd84>
 400650c:	89800017 	ldw	r6,0(r17)
 4006510:	89c00117 	ldw	r7,4(r17)
 4006514:	480b883a 	mov	r5,r9
 4006518:	4009883a 	mov	r4,r8
 400651c:	4006e7c0 	call	4006e7c <__muldf3>
 4006520:	1011883a 	mov	r8,r2
 4006524:	b5800044 	addi	r22,r22,1
 4006528:	1813883a 	mov	r9,r3
 400652c:	8021d07a 	srai	r16,r16,1
 4006530:	8c400204 	addi	r17,r17,8
 4006534:	803ff21e 	bne	r16,zero,4006500 <_dtoa_r+0xd58>
 4006538:	4029883a 	mov	r20,r8
 400653c:	482b883a 	mov	r21,r9
 4006540:	003dc006 	br	4005c44 <_dtoa_r+0x49c>
 4006544:	d9000817 	ldw	r4,32(sp)
 4006548:	2005003a 	cmpeq	r2,r4,zero
 400654c:	1001f61e 	bne	r2,zero,4006d28 <_dtoa_r+0x1580>
 4006550:	dc001117 	ldw	r16,68(sp)
 4006554:	dc801017 	ldw	r18,64(sp)
 4006558:	18c10cc4 	addi	r3,r3,1075
 400655c:	003f6106 	br	40062e4 <_dtoa_r+0xb3c>
 4006560:	d8000b15 	stw	zero,44(sp)
 4006564:	d9802617 	ldw	r6,152(sp)
 4006568:	d8c00d17 	ldw	r3,52(sp)
 400656c:	30800044 	addi	r2,r6,1
 4006570:	18ad883a 	add	r22,r3,r2
 4006574:	b13fffc4 	addi	r4,r22,-1
 4006578:	d9000e15 	stw	r4,56(sp)
 400657c:	0581f60e 	bge	zero,r22,4006d58 <_dtoa_r+0x15b0>
 4006580:	dd800f15 	stw	r22,60(sp)
 4006584:	003f2d06 	br	400623c <_dtoa_r+0xa94>
 4006588:	d8000b15 	stw	zero,44(sp)
 400658c:	d9002617 	ldw	r4,152(sp)
 4006590:	0101eb0e 	bge	zero,r4,4006d40 <_dtoa_r+0x1598>
 4006594:	202d883a 	mov	r22,r4
 4006598:	d9000e15 	stw	r4,56(sp)
 400659c:	d9000f15 	stw	r4,60(sp)
 40065a0:	003f2606 	br	400623c <_dtoa_r+0xa94>
 40065a4:	01800044 	movi	r6,1
 40065a8:	d9800b15 	stw	r6,44(sp)
 40065ac:	003ff706 	br	400658c <_dtoa_r+0xde4>
 40065b0:	01000044 	movi	r4,1
 40065b4:	d9000b15 	stw	r4,44(sp)
 40065b8:	003fea06 	br	4006564 <_dtoa_r+0xdbc>
 40065bc:	04000c0e 	bge	zero,r16,40065f0 <_dtoa_r+0xe48>
 40065c0:	d9400717 	ldw	r5,28(sp)
 40065c4:	d9001617 	ldw	r4,88(sp)
 40065c8:	01800044 	movi	r6,1
 40065cc:	400469c0 	call	400469c <__lshift>
 40065d0:	1009883a 	mov	r4,r2
 40065d4:	900b883a 	mov	r5,r18
 40065d8:	d8800715 	stw	r2,28(sp)
 40065dc:	4003e080 	call	4003e08 <__mcmp>
 40065e0:	0081e00e 	bge	zero,r2,4006d64 <_dtoa_r+0x15bc>
 40065e4:	bdc00044 	addi	r23,r23,1
 40065e8:	00800e84 	movi	r2,58
 40065ec:	b881a226 	beq	r23,r2,4006c78 <_dtoa_r+0x14d0>
 40065f0:	b7000044 	addi	fp,r22,1
 40065f4:	b5c00005 	stb	r23,0(r22)
 40065f8:	003f7406 	br	40063cc <_dtoa_r+0xc24>
 40065fc:	00800e44 	movi	r2,57
 4006600:	b8819d26 	beq	r23,r2,4006c78 <_dtoa_r+0x14d0>
 4006604:	053ffa0e 	bge	zero,r20,40065f0 <_dtoa_r+0xe48>
 4006608:	8dc00c44 	addi	r23,r17,49
 400660c:	003ff806 	br	40065f0 <_dtoa_r+0xe48>
 4006610:	d9001617 	ldw	r4,88(sp)
 4006614:	a80b883a 	mov	r5,r21
 4006618:	04000044 	movi	r16,1
 400661c:	400422c0 	call	400422c <_Bfree>
 4006620:	003ed506 	br	4006178 <_dtoa_r+0x9d0>
 4006624:	d9001617 	ldw	r4,88(sp)
 4006628:	980b883a 	mov	r5,r19
 400662c:	01800284 	movi	r6,10
 4006630:	000f883a 	mov	r7,zero
 4006634:	4004a780 	call	4004a78 <__multadd>
 4006638:	1027883a 	mov	r19,r2
 400663c:	d8800615 	stw	r2,24(sp)
 4006640:	003eb106 	br	4006108 <_dtoa_r+0x960>
 4006644:	d9801117 	ldw	r6,68(sp)
 4006648:	d8800d17 	ldw	r2,52(sp)
 400664c:	d8000915 	stw	zero,36(sp)
 4006650:	308dc83a 	sub	r6,r6,r2
 4006654:	0087c83a 	sub	r3,zero,r2
 4006658:	d9801115 	stw	r6,68(sp)
 400665c:	d8c01015 	stw	r3,64(sp)
 4006660:	003cf206 	br	4005a2c <_dtoa_r+0x284>
 4006664:	018dc83a 	sub	r6,zero,r6
 4006668:	d9801115 	stw	r6,68(sp)
 400666c:	d8000a15 	stw	zero,40(sp)
 4006670:	003ce706 	br	4005a10 <_dtoa_r+0x268>
 4006674:	d9000d17 	ldw	r4,52(sp)
 4006678:	40075700 	call	4007570 <__floatsidf>
 400667c:	880b883a 	mov	r5,r17
 4006680:	8009883a 	mov	r4,r16
 4006684:	180f883a 	mov	r7,r3
 4006688:	100d883a 	mov	r6,r2
 400668c:	40072c80 	call	40072c8 <__nedf2>
 4006690:	103cd526 	beq	r2,zero,40059e8 <_dtoa_r+0x240>
 4006694:	d9800d17 	ldw	r6,52(sp)
 4006698:	31bfffc4 	addi	r6,r6,-1
 400669c:	d9800d15 	stw	r6,52(sp)
 40066a0:	003cd106 	br	40059e8 <_dtoa_r+0x240>
 40066a4:	d9000717 	ldw	r4,28(sp)
 40066a8:	900b883a 	mov	r5,r18
 40066ac:	4003e080 	call	4003e08 <__mcmp>
 40066b0:	103e830e 	bge	r2,zero,40060c0 <_dtoa_r+0x918>
 40066b4:	d9400717 	ldw	r5,28(sp)
 40066b8:	d9001617 	ldw	r4,88(sp)
 40066bc:	01800284 	movi	r6,10
 40066c0:	000f883a 	mov	r7,zero
 40066c4:	4004a780 	call	4004a78 <__multadd>
 40066c8:	d9800d17 	ldw	r6,52(sp)
 40066cc:	d8800715 	stw	r2,28(sp)
 40066d0:	31bfffc4 	addi	r6,r6,-1
 40066d4:	d9800d15 	stw	r6,52(sp)
 40066d8:	b001a71e 	bne	r22,zero,4006d78 <_dtoa_r+0x15d0>
 40066dc:	d8800e17 	ldw	r2,56(sp)
 40066e0:	d8800f15 	stw	r2,60(sp)
 40066e4:	003e7606 	br	40060c0 <_dtoa_r+0x918>
 40066e8:	90800417 	ldw	r2,16(r18)
 40066ec:	1085883a 	add	r2,r2,r2
 40066f0:	1085883a 	add	r2,r2,r2
 40066f4:	1485883a 	add	r2,r2,r18
 40066f8:	11000417 	ldw	r4,16(r2)
 40066fc:	4003cd40 	call	4003cd4 <__hi0bits>
 4006700:	00c00804 	movi	r3,32
 4006704:	1887c83a 	sub	r3,r3,r2
 4006708:	003e5006 	br	400604c <_dtoa_r+0x8a4>
 400670c:	d9400717 	ldw	r5,28(sp)
 4006710:	d9801017 	ldw	r6,64(sp)
 4006714:	d9001617 	ldw	r4,88(sp)
 4006718:	4004ba40 	call	4004ba4 <__pow5mult>
 400671c:	d8800715 	stw	r2,28(sp)
 4006720:	003e3906 	br	4006008 <_dtoa_r+0x860>
 4006724:	d9800f17 	ldw	r6,60(sp)
 4006728:	d8800d17 	ldw	r2,52(sp)
 400672c:	d9800415 	stw	r6,16(sp)
 4006730:	d8800315 	stw	r2,12(sp)
 4006734:	d8c00b17 	ldw	r3,44(sp)
 4006738:	1805003a 	cmpeq	r2,r3,zero
 400673c:	1000e21e 	bne	r2,zero,4006ac8 <_dtoa_r+0x1320>
 4006740:	d9000417 	ldw	r4,16(sp)
 4006744:	0005883a 	mov	r2,zero
 4006748:	00cff834 	movhi	r3,16352
 400674c:	200c90fa 	slli	r6,r4,3
 4006750:	01010074 	movhi	r4,1025
 4006754:	21258c04 	addi	r4,r4,-27088
 4006758:	180b883a 	mov	r5,r3
 400675c:	310d883a 	add	r6,r6,r4
 4006760:	327fff17 	ldw	r9,-4(r6)
 4006764:	323ffe17 	ldw	r8,-8(r6)
 4006768:	1009883a 	mov	r4,r2
 400676c:	480f883a 	mov	r7,r9
 4006770:	400d883a 	mov	r6,r8
 4006774:	40015700 	call	4001570 <__divdf3>
 4006778:	180b883a 	mov	r5,r3
 400677c:	b00d883a 	mov	r6,r22
 4006780:	b80f883a 	mov	r7,r23
 4006784:	1009883a 	mov	r4,r2
 4006788:	400147c0 	call	400147c <__subdf3>
 400678c:	a80b883a 	mov	r5,r21
 4006790:	a009883a 	mov	r4,r20
 4006794:	d8c01915 	stw	r3,100(sp)
 4006798:	d8801815 	stw	r2,96(sp)
 400679c:	40076680 	call	4007668 <__fixdfsi>
 40067a0:	1009883a 	mov	r4,r2
 40067a4:	1027883a 	mov	r19,r2
 40067a8:	40075700 	call	4007570 <__floatsidf>
 40067ac:	a80b883a 	mov	r5,r21
 40067b0:	a009883a 	mov	r4,r20
 40067b4:	180f883a 	mov	r7,r3
 40067b8:	100d883a 	mov	r6,r2
 40067bc:	400147c0 	call	400147c <__subdf3>
 40067c0:	d9801817 	ldw	r6,96(sp)
 40067c4:	1823883a 	mov	r17,r3
 40067c8:	d8801415 	stw	r2,80(sp)
 40067cc:	302d883a 	mov	r22,r6
 40067d0:	d9800517 	ldw	r6,20(sp)
 40067d4:	9cc00c04 	addi	r19,r19,48
 40067d8:	dc401515 	stw	r17,84(sp)
 40067dc:	d8c01917 	ldw	r3,100(sp)
 40067e0:	34c00005 	stb	r19,0(r6)
 40067e4:	d8800517 	ldw	r2,20(sp)
 40067e8:	d9401917 	ldw	r5,100(sp)
 40067ec:	d9801417 	ldw	r6,80(sp)
 40067f0:	b009883a 	mov	r4,r22
 40067f4:	880f883a 	mov	r7,r17
 40067f8:	182f883a 	mov	r23,r3
 40067fc:	17000044 	addi	fp,r2,1
 4006800:	40073500 	call	4007350 <__gtdf2>
 4006804:	00804e16 	blt	zero,r2,4006940 <_dtoa_r+0x1198>
 4006808:	d9801417 	ldw	r6,80(sp)
 400680c:	0005883a 	mov	r2,zero
 4006810:	00cffc34 	movhi	r3,16368
 4006814:	180b883a 	mov	r5,r3
 4006818:	880f883a 	mov	r7,r17
 400681c:	1009883a 	mov	r4,r2
 4006820:	400147c0 	call	400147c <__subdf3>
 4006824:	d9401917 	ldw	r5,100(sp)
 4006828:	180f883a 	mov	r7,r3
 400682c:	b009883a 	mov	r4,r22
 4006830:	100d883a 	mov	r6,r2
 4006834:	40073500 	call	4007350 <__gtdf2>
 4006838:	00bd9816 	blt	zero,r2,4005e9c <_dtoa_r+0x6f4>
 400683c:	d8c00417 	ldw	r3,16(sp)
 4006840:	00800044 	movi	r2,1
 4006844:	10c01216 	blt	r2,r3,4006890 <_dtoa_r+0x10e8>
 4006848:	003d3b06 	br	4005d38 <_dtoa_r+0x590>
 400684c:	d9801417 	ldw	r6,80(sp)
 4006850:	0005883a 	mov	r2,zero
 4006854:	00cffc34 	movhi	r3,16368
 4006858:	180b883a 	mov	r5,r3
 400685c:	880f883a 	mov	r7,r17
 4006860:	1009883a 	mov	r4,r2
 4006864:	400147c0 	call	400147c <__subdf3>
 4006868:	d9c01b17 	ldw	r7,108(sp)
 400686c:	180b883a 	mov	r5,r3
 4006870:	1009883a 	mov	r4,r2
 4006874:	b00d883a 	mov	r6,r22
 4006878:	40074600 	call	4007460 <__ltdf2>
 400687c:	103d8716 	blt	r2,zero,4005e9c <_dtoa_r+0x6f4>
 4006880:	d9800517 	ldw	r6,20(sp)
 4006884:	d9000417 	ldw	r4,16(sp)
 4006888:	3105883a 	add	r2,r6,r4
 400688c:	e0bd2a26 	beq	fp,r2,4005d38 <_dtoa_r+0x590>
 4006890:	04500934 	movhi	r17,16420
 4006894:	0021883a 	mov	r16,zero
 4006898:	b80b883a 	mov	r5,r23
 400689c:	b009883a 	mov	r4,r22
 40068a0:	800d883a 	mov	r6,r16
 40068a4:	880f883a 	mov	r7,r17
 40068a8:	4006e7c0 	call	4006e7c <__muldf3>
 40068ac:	d9401517 	ldw	r5,84(sp)
 40068b0:	d9001417 	ldw	r4,80(sp)
 40068b4:	880f883a 	mov	r7,r17
 40068b8:	000d883a 	mov	r6,zero
 40068bc:	d8801a15 	stw	r2,104(sp)
 40068c0:	d8c01b15 	stw	r3,108(sp)
 40068c4:	4006e7c0 	call	4006e7c <__muldf3>
 40068c8:	180b883a 	mov	r5,r3
 40068cc:	1009883a 	mov	r4,r2
 40068d0:	1823883a 	mov	r17,r3
 40068d4:	1021883a 	mov	r16,r2
 40068d8:	40076680 	call	4007668 <__fixdfsi>
 40068dc:	1009883a 	mov	r4,r2
 40068e0:	102b883a 	mov	r21,r2
 40068e4:	40075700 	call	4007570 <__floatsidf>
 40068e8:	880b883a 	mov	r5,r17
 40068ec:	8009883a 	mov	r4,r16
 40068f0:	180f883a 	mov	r7,r3
 40068f4:	100d883a 	mov	r6,r2
 40068f8:	400147c0 	call	400147c <__subdf3>
 40068fc:	1021883a 	mov	r16,r2
 4006900:	d9001b17 	ldw	r4,108(sp)
 4006904:	1823883a 	mov	r17,r3
 4006908:	dc001415 	stw	r16,80(sp)
 400690c:	ad400c04 	addi	r21,r21,48
 4006910:	dc401515 	stw	r17,84(sp)
 4006914:	d8801a17 	ldw	r2,104(sp)
 4006918:	e5400005 	stb	r21,0(fp)
 400691c:	202f883a 	mov	r23,r4
 4006920:	d9c01b17 	ldw	r7,108(sp)
 4006924:	d9001417 	ldw	r4,80(sp)
 4006928:	880b883a 	mov	r5,r17
 400692c:	100d883a 	mov	r6,r2
 4006930:	102d883a 	mov	r22,r2
 4006934:	e7000044 	addi	fp,fp,1
 4006938:	40074600 	call	4007460 <__ltdf2>
 400693c:	103fc30e 	bge	r2,zero,400684c <_dtoa_r+0x10a4>
 4006940:	d9000317 	ldw	r4,12(sp)
 4006944:	d9000d15 	stw	r4,52(sp)
 4006948:	003d6706 	br	4005ee8 <_dtoa_r+0x740>
 400694c:	d9801717 	ldw	r6,92(sp)
 4006950:	00800084 	movi	r2,2
 4006954:	11bddc0e 	bge	r2,r6,40060c8 <_dtoa_r+0x920>
 4006958:	203cf11e 	bne	r4,zero,4005d20 <_dtoa_r+0x578>
 400695c:	d9001617 	ldw	r4,88(sp)
 4006960:	900b883a 	mov	r5,r18
 4006964:	01800144 	movi	r6,5
 4006968:	000f883a 	mov	r7,zero
 400696c:	4004a780 	call	4004a78 <__multadd>
 4006970:	d9000717 	ldw	r4,28(sp)
 4006974:	100b883a 	mov	r5,r2
 4006978:	1025883a 	mov	r18,r2
 400697c:	4003e080 	call	4003e08 <__mcmp>
 4006980:	00bce70e 	bge	zero,r2,4005d20 <_dtoa_r+0x578>
 4006984:	d8c00d17 	ldw	r3,52(sp)
 4006988:	d9000517 	ldw	r4,20(sp)
 400698c:	d8000615 	stw	zero,24(sp)
 4006990:	18c00044 	addi	r3,r3,1
 4006994:	d8c00d15 	stw	r3,52(sp)
 4006998:	00800c44 	movi	r2,49
 400699c:	27000044 	addi	fp,r4,1
 40069a0:	20800005 	stb	r2,0(r4)
 40069a4:	003e8906 	br	40063cc <_dtoa_r+0xc24>
 40069a8:	d8c00517 	ldw	r3,20(sp)
 40069ac:	003bb606 	br	4005888 <_dtoa_r+0xe0>
 40069b0:	01810074 	movhi	r6,1025
 40069b4:	31a5be04 	addi	r6,r6,-26888
 40069b8:	30c00917 	ldw	r3,36(r6)
 40069bc:	30800817 	ldw	r2,32(r6)
 40069c0:	d9001217 	ldw	r4,72(sp)
 40069c4:	d9401317 	ldw	r5,76(sp)
 40069c8:	180f883a 	mov	r7,r3
 40069cc:	100d883a 	mov	r6,r2
 40069d0:	40015700 	call	4001570 <__divdf3>
 40069d4:	948003cc 	andi	r18,r18,15
 40069d8:	058000c4 	movi	r22,3
 40069dc:	1029883a 	mov	r20,r2
 40069e0:	182b883a 	mov	r21,r3
 40069e4:	003c7f06 	br	4005be4 <_dtoa_r+0x43c>
 40069e8:	d9001017 	ldw	r4,64(sp)
 40069ec:	d9800917 	ldw	r6,36(sp)
 40069f0:	0025883a 	mov	r18,zero
 40069f4:	1105c83a 	sub	r2,r2,r4
 40069f8:	2089883a 	add	r4,r4,r2
 40069fc:	308d883a 	add	r6,r6,r2
 4006a00:	d9001015 	stw	r4,64(sp)
 4006a04:	d9800915 	stw	r6,36(sp)
 4006a08:	003e3206 	br	40062d4 <_dtoa_r+0xb2c>
 4006a0c:	28800044 	addi	r2,r5,1
 4006a10:	27000044 	addi	fp,r4,1
 4006a14:	20800005 	stb	r2,0(r4)
 4006a18:	003e6c06 	br	40063cc <_dtoa_r+0xc24>
 4006a1c:	d8800f17 	ldw	r2,60(sp)
 4006a20:	00bcd616 	blt	zero,r2,4005d7c <_dtoa_r+0x5d4>
 4006a24:	d9800f17 	ldw	r6,60(sp)
 4006a28:	303cbb1e 	bne	r6,zero,4005d18 <_dtoa_r+0x570>
 4006a2c:	0005883a 	mov	r2,zero
 4006a30:	00d00534 	movhi	r3,16404
 4006a34:	980b883a 	mov	r5,r19
 4006a38:	180f883a 	mov	r7,r3
 4006a3c:	9009883a 	mov	r4,r18
 4006a40:	100d883a 	mov	r6,r2
 4006a44:	4006e7c0 	call	4006e7c <__muldf3>
 4006a48:	180b883a 	mov	r5,r3
 4006a4c:	a80f883a 	mov	r7,r21
 4006a50:	1009883a 	mov	r4,r2
 4006a54:	a00d883a 	mov	r6,r20
 4006a58:	40073d80 	call	40073d8 <__gedf2>
 4006a5c:	103cae0e 	bge	r2,zero,4005d18 <_dtoa_r+0x570>
 4006a60:	0027883a 	mov	r19,zero
 4006a64:	0025883a 	mov	r18,zero
 4006a68:	003fc606 	br	4006984 <_dtoa_r+0x11dc>
 4006a6c:	99400117 	ldw	r5,4(r19)
 4006a70:	d9001617 	ldw	r4,88(sp)
 4006a74:	40042a40 	call	40042a4 <_Balloc>
 4006a78:	99800417 	ldw	r6,16(r19)
 4006a7c:	11000304 	addi	r4,r2,12
 4006a80:	99400304 	addi	r5,r19,12
 4006a84:	318d883a 	add	r6,r6,r6
 4006a88:	318d883a 	add	r6,r6,r6
 4006a8c:	31800204 	addi	r6,r6,8
 4006a90:	1023883a 	mov	r17,r2
 4006a94:	4006d9c0 	call	4006d9c <memcpy>
 4006a98:	d9001617 	ldw	r4,88(sp)
 4006a9c:	880b883a 	mov	r5,r17
 4006aa0:	01800044 	movi	r6,1
 4006aa4:	400469c0 	call	400469c <__lshift>
 4006aa8:	100b883a 	mov	r5,r2
 4006aac:	003d9206 	br	40060f8 <_dtoa_r+0x950>
 4006ab0:	00800e44 	movi	r2,57
 4006ab4:	b8807026 	beq	r23,r2,4006c78 <_dtoa_r+0x14d0>
 4006ab8:	b8800044 	addi	r2,r23,1
 4006abc:	b7000044 	addi	fp,r22,1
 4006ac0:	b0800005 	stb	r2,0(r22)
 4006ac4:	003e4106 	br	40063cc <_dtoa_r+0xc24>
 4006ac8:	d8800417 	ldw	r2,16(sp)
 4006acc:	01810074 	movhi	r6,1025
 4006ad0:	31a58c04 	addi	r6,r6,-27088
 4006ad4:	b009883a 	mov	r4,r22
 4006ad8:	100e90fa 	slli	r7,r2,3
 4006adc:	b80b883a 	mov	r5,r23
 4006ae0:	398f883a 	add	r7,r7,r6
 4006ae4:	38bffe17 	ldw	r2,-8(r7)
 4006ae8:	d9800517 	ldw	r6,20(sp)
 4006aec:	38ffff17 	ldw	r3,-4(r7)
 4006af0:	37000044 	addi	fp,r6,1
 4006af4:	180f883a 	mov	r7,r3
 4006af8:	100d883a 	mov	r6,r2
 4006afc:	4006e7c0 	call	4006e7c <__muldf3>
 4006b00:	a80b883a 	mov	r5,r21
 4006b04:	a009883a 	mov	r4,r20
 4006b08:	182f883a 	mov	r23,r3
 4006b0c:	102d883a 	mov	r22,r2
 4006b10:	40076680 	call	4007668 <__fixdfsi>
 4006b14:	1009883a 	mov	r4,r2
 4006b18:	1027883a 	mov	r19,r2
 4006b1c:	40075700 	call	4007570 <__floatsidf>
 4006b20:	a80b883a 	mov	r5,r21
 4006b24:	a009883a 	mov	r4,r20
 4006b28:	180f883a 	mov	r7,r3
 4006b2c:	100d883a 	mov	r6,r2
 4006b30:	400147c0 	call	400147c <__subdf3>
 4006b34:	180b883a 	mov	r5,r3
 4006b38:	d8c00517 	ldw	r3,20(sp)
 4006b3c:	9cc00c04 	addi	r19,r19,48
 4006b40:	1009883a 	mov	r4,r2
 4006b44:	1cc00005 	stb	r19,0(r3)
 4006b48:	2021883a 	mov	r16,r4
 4006b4c:	d9000417 	ldw	r4,16(sp)
 4006b50:	00800044 	movi	r2,1
 4006b54:	2823883a 	mov	r17,r5
 4006b58:	20802226 	beq	r4,r2,4006be4 <_dtoa_r+0x143c>
 4006b5c:	1029883a 	mov	r20,r2
 4006b60:	0005883a 	mov	r2,zero
 4006b64:	00d00934 	movhi	r3,16420
 4006b68:	180f883a 	mov	r7,r3
 4006b6c:	100d883a 	mov	r6,r2
 4006b70:	880b883a 	mov	r5,r17
 4006b74:	8009883a 	mov	r4,r16
 4006b78:	4006e7c0 	call	4006e7c <__muldf3>
 4006b7c:	180b883a 	mov	r5,r3
 4006b80:	1009883a 	mov	r4,r2
 4006b84:	1823883a 	mov	r17,r3
 4006b88:	1021883a 	mov	r16,r2
 4006b8c:	40076680 	call	4007668 <__fixdfsi>
 4006b90:	1009883a 	mov	r4,r2
 4006b94:	102b883a 	mov	r21,r2
 4006b98:	40075700 	call	4007570 <__floatsidf>
 4006b9c:	880b883a 	mov	r5,r17
 4006ba0:	8009883a 	mov	r4,r16
 4006ba4:	180f883a 	mov	r7,r3
 4006ba8:	100d883a 	mov	r6,r2
 4006bac:	400147c0 	call	400147c <__subdf3>
 4006bb0:	180b883a 	mov	r5,r3
 4006bb4:	d8c00517 	ldw	r3,20(sp)
 4006bb8:	1009883a 	mov	r4,r2
 4006bbc:	ad400c04 	addi	r21,r21,48
 4006bc0:	1d05883a 	add	r2,r3,r20
 4006bc4:	15400005 	stb	r21,0(r2)
 4006bc8:	2021883a 	mov	r16,r4
 4006bcc:	d9000417 	ldw	r4,16(sp)
 4006bd0:	a5000044 	addi	r20,r20,1
 4006bd4:	2823883a 	mov	r17,r5
 4006bd8:	a13fe11e 	bne	r20,r4,4006b60 <_dtoa_r+0x13b8>
 4006bdc:	e505883a 	add	r2,fp,r20
 4006be0:	173fffc4 	addi	fp,r2,-1
 4006be4:	0025883a 	mov	r18,zero
 4006be8:	04cff834 	movhi	r19,16352
 4006bec:	b009883a 	mov	r4,r22
 4006bf0:	b80b883a 	mov	r5,r23
 4006bf4:	900d883a 	mov	r6,r18
 4006bf8:	980f883a 	mov	r7,r19
 4006bfc:	40014fc0 	call	40014fc <__adddf3>
 4006c00:	180b883a 	mov	r5,r3
 4006c04:	1009883a 	mov	r4,r2
 4006c08:	800d883a 	mov	r6,r16
 4006c0c:	880f883a 	mov	r7,r17
 4006c10:	40074600 	call	4007460 <__ltdf2>
 4006c14:	103ca116 	blt	r2,zero,4005e9c <_dtoa_r+0x6f4>
 4006c18:	0009883a 	mov	r4,zero
 4006c1c:	980b883a 	mov	r5,r19
 4006c20:	b80f883a 	mov	r7,r23
 4006c24:	b00d883a 	mov	r6,r22
 4006c28:	400147c0 	call	400147c <__subdf3>
 4006c2c:	180b883a 	mov	r5,r3
 4006c30:	880f883a 	mov	r7,r17
 4006c34:	1009883a 	mov	r4,r2
 4006c38:	800d883a 	mov	r6,r16
 4006c3c:	40073500 	call	4007350 <__gtdf2>
 4006c40:	00bc3d0e 	bge	zero,r2,4005d38 <_dtoa_r+0x590>
 4006c44:	00c00c04 	movi	r3,48
 4006c48:	e73fffc4 	addi	fp,fp,-1
 4006c4c:	e0800007 	ldb	r2,0(fp)
 4006c50:	10fffd26 	beq	r2,r3,4006c48 <_dtoa_r+0x14a0>
 4006c54:	d9800317 	ldw	r6,12(sp)
 4006c58:	e7000044 	addi	fp,fp,1
 4006c5c:	d9800d15 	stw	r6,52(sp)
 4006c60:	003ca106 	br	4005ee8 <_dtoa_r+0x740>
 4006c64:	d8c00f17 	ldw	r3,60(sp)
 4006c68:	d9001117 	ldw	r4,68(sp)
 4006c6c:	20e1c83a 	sub	r16,r4,r3
 4006c70:	0007883a 	mov	r3,zero
 4006c74:	003d9b06 	br	40062e4 <_dtoa_r+0xb3c>
 4006c78:	00800e44 	movi	r2,57
 4006c7c:	b0800005 	stb	r2,0(r22)
 4006c80:	b5800044 	addi	r22,r22,1
 4006c84:	003dc106 	br	400638c <_dtoa_r+0xbe4>
 4006c88:	05800084 	movi	r22,2
 4006c8c:	003bed06 	br	4005c44 <_dtoa_r+0x49c>
 4006c90:	d9000f17 	ldw	r4,60(sp)
 4006c94:	013bf60e 	bge	zero,r4,4005c70 <_dtoa_r+0x4c8>
 4006c98:	d9800e17 	ldw	r6,56(sp)
 4006c9c:	01bc260e 	bge	zero,r6,4005d38 <_dtoa_r+0x590>
 4006ca0:	0005883a 	mov	r2,zero
 4006ca4:	00d00934 	movhi	r3,16420
 4006ca8:	a80b883a 	mov	r5,r21
 4006cac:	180f883a 	mov	r7,r3
 4006cb0:	a009883a 	mov	r4,r20
 4006cb4:	100d883a 	mov	r6,r2
 4006cb8:	4006e7c0 	call	4006e7c <__muldf3>
 4006cbc:	b1000044 	addi	r4,r22,1
 4006cc0:	1021883a 	mov	r16,r2
 4006cc4:	1823883a 	mov	r17,r3
 4006cc8:	40075700 	call	4007570 <__floatsidf>
 4006ccc:	880b883a 	mov	r5,r17
 4006cd0:	8009883a 	mov	r4,r16
 4006cd4:	180f883a 	mov	r7,r3
 4006cd8:	100d883a 	mov	r6,r2
 4006cdc:	4006e7c0 	call	4006e7c <__muldf3>
 4006ce0:	0011883a 	mov	r8,zero
 4006ce4:	02500734 	movhi	r9,16412
 4006ce8:	180b883a 	mov	r5,r3
 4006cec:	480f883a 	mov	r7,r9
 4006cf0:	1009883a 	mov	r4,r2
 4006cf4:	400d883a 	mov	r6,r8
 4006cf8:	40014fc0 	call	40014fc <__adddf3>
 4006cfc:	102d883a 	mov	r22,r2
 4006d00:	00bf3034 	movhi	r2,64704
 4006d04:	10ef883a 	add	r23,r2,r3
 4006d08:	d8800d17 	ldw	r2,52(sp)
 4006d0c:	d8c00e17 	ldw	r3,56(sp)
 4006d10:	8029883a 	mov	r20,r16
 4006d14:	10bfffc4 	addi	r2,r2,-1
 4006d18:	882b883a 	mov	r21,r17
 4006d1c:	d8800315 	stw	r2,12(sp)
 4006d20:	d8c00415 	stw	r3,16(sp)
 4006d24:	003e8306 	br	4006734 <_dtoa_r+0xf8c>
 4006d28:	d8800117 	ldw	r2,4(sp)
 4006d2c:	dc001117 	ldw	r16,68(sp)
 4006d30:	dc801017 	ldw	r18,64(sp)
 4006d34:	00c00d84 	movi	r3,54
 4006d38:	1887c83a 	sub	r3,r3,r2
 4006d3c:	003d6906 	br	40062e4 <_dtoa_r+0xb3c>
 4006d40:	01800044 	movi	r6,1
 4006d44:	3021883a 	mov	r16,r6
 4006d48:	d9800f15 	stw	r6,60(sp)
 4006d4c:	d9802615 	stw	r6,152(sp)
 4006d50:	d9800e15 	stw	r6,56(sp)
 4006d54:	003b8706 	br	4005b74 <_dtoa_r+0x3cc>
 4006d58:	b021883a 	mov	r16,r22
 4006d5c:	dd800f15 	stw	r22,60(sp)
 4006d60:	003b8406 	br	4005b74 <_dtoa_r+0x3cc>
 4006d64:	103e221e 	bne	r2,zero,40065f0 <_dtoa_r+0xe48>
 4006d68:	b880004c 	andi	r2,r23,1
 4006d6c:	1005003a 	cmpeq	r2,r2,zero
 4006d70:	103e1f1e 	bne	r2,zero,40065f0 <_dtoa_r+0xe48>
 4006d74:	003e1b06 	br	40065e4 <_dtoa_r+0xe3c>
 4006d78:	d9001617 	ldw	r4,88(sp)
 4006d7c:	980b883a 	mov	r5,r19
 4006d80:	01800284 	movi	r6,10
 4006d84:	000f883a 	mov	r7,zero
 4006d88:	4004a780 	call	4004a78 <__multadd>
 4006d8c:	d8c00e17 	ldw	r3,56(sp)
 4006d90:	1027883a 	mov	r19,r2
 4006d94:	d8c00f15 	stw	r3,60(sp)
 4006d98:	003cc906 	br	40060c0 <_dtoa_r+0x918>

04006d9c <memcpy>:
 4006d9c:	2011883a 	mov	r8,r4
 4006da0:	30000726 	beq	r6,zero,4006dc0 <memcpy+0x24>
 4006da4:	000f883a 	mov	r7,zero
 4006da8:	29c5883a 	add	r2,r5,r7
 4006dac:	11000003 	ldbu	r4,0(r2)
 4006db0:	41c7883a 	add	r3,r8,r7
 4006db4:	39c00044 	addi	r7,r7,1
 4006db8:	19000005 	stb	r4,0(r3)
 4006dbc:	39bffa1e 	bne	r7,r6,4006da8 <memcpy+0xc>
 4006dc0:	4005883a 	mov	r2,r8
 4006dc4:	f800283a 	ret

04006dc8 <memmove>:
 4006dc8:	2011883a 	mov	r8,r4
 4006dcc:	2900022e 	bgeu	r5,r4,4006dd8 <memmove+0x10>
 4006dd0:	2989883a 	add	r4,r5,r6
 4006dd4:	41000a36 	bltu	r8,r4,4006e00 <memmove+0x38>
 4006dd8:	30000726 	beq	r6,zero,4006df8 <memmove+0x30>
 4006ddc:	000f883a 	mov	r7,zero
 4006de0:	29c5883a 	add	r2,r5,r7
 4006de4:	11000003 	ldbu	r4,0(r2)
 4006de8:	3a07883a 	add	r3,r7,r8
 4006dec:	39c00044 	addi	r7,r7,1
 4006df0:	19000005 	stb	r4,0(r3)
 4006df4:	31fffa1e 	bne	r6,r7,4006de0 <memmove+0x18>
 4006df8:	4005883a 	mov	r2,r8
 4006dfc:	f800283a 	ret
 4006e00:	303ffd26 	beq	r6,zero,4006df8 <memmove+0x30>
 4006e04:	4187883a 	add	r3,r8,r6
 4006e08:	198dc83a 	sub	r6,r3,r6
 4006e0c:	213fffc4 	addi	r4,r4,-1
 4006e10:	20800003 	ldbu	r2,0(r4)
 4006e14:	18ffffc4 	addi	r3,r3,-1
 4006e18:	18800005 	stb	r2,0(r3)
 4006e1c:	19bffb1e 	bne	r3,r6,4006e0c <memmove+0x44>
 4006e20:	4005883a 	mov	r2,r8
 4006e24:	f800283a 	ret

04006e28 <__extendsfdf2>:
 4006e28:	defff904 	addi	sp,sp,-28
 4006e2c:	d9000115 	stw	r4,4(sp)
 4006e30:	d9400204 	addi	r5,sp,8
 4006e34:	d9000104 	addi	r4,sp,4
 4006e38:	dfc00615 	stw	ra,24(sp)
 4006e3c:	4001c980 	call	4001c98 <__unpack_f>
 4006e40:	d9c00517 	ldw	r7,20(sp)
 4006e44:	0011883a 	mov	r8,zero
 4006e48:	400697ba 	slli	r3,r8,30
 4006e4c:	3812d0ba 	srli	r9,r7,2
 4006e50:	380497ba 	slli	r2,r7,30
 4006e54:	d9000217 	ldw	r4,8(sp)
 4006e58:	d9400317 	ldw	r5,12(sp)
 4006e5c:	d9800417 	ldw	r6,16(sp)
 4006e60:	48c6b03a 	or	r3,r9,r3
 4006e64:	100f883a 	mov	r7,r2
 4006e68:	d8c00015 	stw	r3,0(sp)
 4006e6c:	40077400 	call	4007740 <__make_dp>
 4006e70:	dfc00617 	ldw	ra,24(sp)
 4006e74:	dec00704 	addi	sp,sp,28
 4006e78:	f800283a 	ret

04006e7c <__muldf3>:
 4006e7c:	deffe004 	addi	sp,sp,-128
 4006e80:	dc401815 	stw	r17,96(sp)
 4006e84:	dc400404 	addi	r17,sp,16
 4006e88:	2011883a 	mov	r8,r4
 4006e8c:	2813883a 	mov	r9,r5
 4006e90:	dc001715 	stw	r16,92(sp)
 4006e94:	d809883a 	mov	r4,sp
 4006e98:	880b883a 	mov	r5,r17
 4006e9c:	dc000904 	addi	r16,sp,36
 4006ea0:	dfc01f15 	stw	ra,124(sp)
 4006ea4:	da400115 	stw	r9,4(sp)
 4006ea8:	d9c00315 	stw	r7,12(sp)
 4006eac:	da000015 	stw	r8,0(sp)
 4006eb0:	d9800215 	stw	r6,8(sp)
 4006eb4:	ddc01e15 	stw	r23,120(sp)
 4006eb8:	dd801d15 	stw	r22,116(sp)
 4006ebc:	dd401c15 	stw	r21,112(sp)
 4006ec0:	dd001b15 	stw	r20,108(sp)
 4006ec4:	dcc01a15 	stw	r19,104(sp)
 4006ec8:	dc801915 	stw	r18,100(sp)
 4006ecc:	400211c0 	call	400211c <__unpack_d>
 4006ed0:	d9000204 	addi	r4,sp,8
 4006ed4:	800b883a 	mov	r5,r16
 4006ed8:	400211c0 	call	400211c <__unpack_d>
 4006edc:	d9000417 	ldw	r4,16(sp)
 4006ee0:	00800044 	movi	r2,1
 4006ee4:	1100102e 	bgeu	r2,r4,4006f28 <__muldf3+0xac>
 4006ee8:	d8c00917 	ldw	r3,36(sp)
 4006eec:	10c0062e 	bgeu	r2,r3,4006f08 <__muldf3+0x8c>
 4006ef0:	00800104 	movi	r2,4
 4006ef4:	20800a26 	beq	r4,r2,4006f20 <__muldf3+0xa4>
 4006ef8:	1880cc26 	beq	r3,r2,400722c <__muldf3+0x3b0>
 4006efc:	00800084 	movi	r2,2
 4006f00:	20800926 	beq	r4,r2,4006f28 <__muldf3+0xac>
 4006f04:	1880191e 	bne	r3,r2,4006f6c <__muldf3+0xf0>
 4006f08:	d8c00a17 	ldw	r3,40(sp)
 4006f0c:	d8800517 	ldw	r2,20(sp)
 4006f10:	8009883a 	mov	r4,r16
 4006f14:	10c4c03a 	cmpne	r2,r2,r3
 4006f18:	d8800a15 	stw	r2,40(sp)
 4006f1c:	00000706 	br	4006f3c <__muldf3+0xc0>
 4006f20:	00800084 	movi	r2,2
 4006f24:	1880c326 	beq	r3,r2,4007234 <__muldf3+0x3b8>
 4006f28:	d8800517 	ldw	r2,20(sp)
 4006f2c:	d8c00a17 	ldw	r3,40(sp)
 4006f30:	8809883a 	mov	r4,r17
 4006f34:	10c4c03a 	cmpne	r2,r2,r3
 4006f38:	d8800515 	stw	r2,20(sp)
 4006f3c:	4001e080 	call	4001e08 <__pack_d>
 4006f40:	dfc01f17 	ldw	ra,124(sp)
 4006f44:	ddc01e17 	ldw	r23,120(sp)
 4006f48:	dd801d17 	ldw	r22,116(sp)
 4006f4c:	dd401c17 	ldw	r21,112(sp)
 4006f50:	dd001b17 	ldw	r20,108(sp)
 4006f54:	dcc01a17 	ldw	r19,104(sp)
 4006f58:	dc801917 	ldw	r18,100(sp)
 4006f5c:	dc401817 	ldw	r17,96(sp)
 4006f60:	dc001717 	ldw	r16,92(sp)
 4006f64:	dec02004 	addi	sp,sp,128
 4006f68:	f800283a 	ret
 4006f6c:	dd800717 	ldw	r22,28(sp)
 4006f70:	dc800c17 	ldw	r18,48(sp)
 4006f74:	002b883a 	mov	r21,zero
 4006f78:	0023883a 	mov	r17,zero
 4006f7c:	a80b883a 	mov	r5,r21
 4006f80:	b00d883a 	mov	r6,r22
 4006f84:	880f883a 	mov	r7,r17
 4006f88:	ddc00817 	ldw	r23,32(sp)
 4006f8c:	dcc00d17 	ldw	r19,52(sp)
 4006f90:	9009883a 	mov	r4,r18
 4006f94:	40019940 	call	4001994 <__muldi3>
 4006f98:	001b883a 	mov	r13,zero
 4006f9c:	680f883a 	mov	r7,r13
 4006fa0:	b009883a 	mov	r4,r22
 4006fa4:	000b883a 	mov	r5,zero
 4006fa8:	980d883a 	mov	r6,r19
 4006fac:	b82d883a 	mov	r22,r23
 4006fb0:	002f883a 	mov	r23,zero
 4006fb4:	db401615 	stw	r13,88(sp)
 4006fb8:	d8801315 	stw	r2,76(sp)
 4006fbc:	d8c01415 	stw	r3,80(sp)
 4006fc0:	dcc01515 	stw	r19,84(sp)
 4006fc4:	40019940 	call	4001994 <__muldi3>
 4006fc8:	b00d883a 	mov	r6,r22
 4006fcc:	000b883a 	mov	r5,zero
 4006fd0:	9009883a 	mov	r4,r18
 4006fd4:	b80f883a 	mov	r7,r23
 4006fd8:	1021883a 	mov	r16,r2
 4006fdc:	1823883a 	mov	r17,r3
 4006fe0:	40019940 	call	4001994 <__muldi3>
 4006fe4:	8085883a 	add	r2,r16,r2
 4006fe8:	140d803a 	cmpltu	r6,r2,r16
 4006fec:	88c7883a 	add	r3,r17,r3
 4006ff0:	30cd883a 	add	r6,r6,r3
 4006ff4:	1029883a 	mov	r20,r2
 4006ff8:	302b883a 	mov	r21,r6
 4006ffc:	da801317 	ldw	r10,76(sp)
 4007000:	dac01417 	ldw	r11,80(sp)
 4007004:	db001517 	ldw	r12,84(sp)
 4007008:	db401617 	ldw	r13,88(sp)
 400700c:	3440612e 	bgeu	r6,r17,4007194 <__muldf3+0x318>
 4007010:	0009883a 	mov	r4,zero
 4007014:	5105883a 	add	r2,r10,r4
 4007018:	128d803a 	cmpltu	r6,r2,r10
 400701c:	5d07883a 	add	r3,r11,r20
 4007020:	30cd883a 	add	r6,r6,r3
 4007024:	0021883a 	mov	r16,zero
 4007028:	04400044 	movi	r17,1
 400702c:	1025883a 	mov	r18,r2
 4007030:	3027883a 	mov	r19,r6
 4007034:	32c06236 	bltu	r6,r11,40071c0 <__muldf3+0x344>
 4007038:	59807a26 	beq	r11,r6,4007224 <__muldf3+0x3a8>
 400703c:	680b883a 	mov	r5,r13
 4007040:	b80f883a 	mov	r7,r23
 4007044:	6009883a 	mov	r4,r12
 4007048:	b00d883a 	mov	r6,r22
 400704c:	40019940 	call	4001994 <__muldi3>
 4007050:	1009883a 	mov	r4,r2
 4007054:	000f883a 	mov	r7,zero
 4007058:	1545883a 	add	r2,r2,r21
 400705c:	1111803a 	cmpltu	r8,r2,r4
 4007060:	19c7883a 	add	r3,r3,r7
 4007064:	40c7883a 	add	r3,r8,r3
 4007068:	88cb883a 	add	r5,r17,r3
 400706c:	d8c00617 	ldw	r3,24(sp)
 4007070:	8089883a 	add	r4,r16,r2
 4007074:	d8800b17 	ldw	r2,44(sp)
 4007078:	18c00104 	addi	r3,r3,4
 400707c:	240d803a 	cmpltu	r6,r4,r16
 4007080:	10c7883a 	add	r3,r2,r3
 4007084:	2013883a 	mov	r9,r4
 4007088:	d8800a17 	ldw	r2,40(sp)
 400708c:	d9000517 	ldw	r4,20(sp)
 4007090:	314d883a 	add	r6,r6,r5
 4007094:	3015883a 	mov	r10,r6
 4007098:	2088c03a 	cmpne	r4,r4,r2
 400709c:	00880034 	movhi	r2,8192
 40070a0:	10bfffc4 	addi	r2,r2,-1
 40070a4:	d9000f15 	stw	r4,60(sp)
 40070a8:	d8c01015 	stw	r3,64(sp)
 40070ac:	1180162e 	bgeu	r2,r6,4007108 <__muldf3+0x28c>
 40070b0:	1811883a 	mov	r8,r3
 40070b4:	101f883a 	mov	r15,r2
 40070b8:	980497fa 	slli	r2,r19,31
 40070bc:	9016d07a 	srli	r11,r18,1
 40070c0:	500697fa 	slli	r3,r10,31
 40070c4:	480cd07a 	srli	r6,r9,1
 40070c8:	500ed07a 	srli	r7,r10,1
 40070cc:	12d6b03a 	or	r11,r2,r11
 40070d0:	00800044 	movi	r2,1
 40070d4:	198cb03a 	or	r6,r3,r6
 40070d8:	4888703a 	and	r4,r9,r2
 40070dc:	9818d07a 	srli	r12,r19,1
 40070e0:	001b883a 	mov	r13,zero
 40070e4:	03a00034 	movhi	r14,32768
 40070e8:	3013883a 	mov	r9,r6
 40070ec:	3815883a 	mov	r10,r7
 40070f0:	4091883a 	add	r8,r8,r2
 40070f4:	20000226 	beq	r4,zero,4007100 <__muldf3+0x284>
 40070f8:	5b64b03a 	or	r18,r11,r13
 40070fc:	63a6b03a 	or	r19,r12,r14
 4007100:	7abfed36 	bltu	r15,r10,40070b8 <__muldf3+0x23c>
 4007104:	da001015 	stw	r8,64(sp)
 4007108:	00840034 	movhi	r2,4096
 400710c:	10bfffc4 	addi	r2,r2,-1
 4007110:	12801436 	bltu	r2,r10,4007164 <__muldf3+0x2e8>
 4007114:	da001017 	ldw	r8,64(sp)
 4007118:	101f883a 	mov	r15,r2
 400711c:	4a45883a 	add	r2,r9,r9
 4007120:	124d803a 	cmpltu	r6,r2,r9
 4007124:	5287883a 	add	r3,r10,r10
 4007128:	9497883a 	add	r11,r18,r18
 400712c:	5c8f803a 	cmpltu	r7,r11,r18
 4007130:	9cd9883a 	add	r12,r19,r19
 4007134:	01000044 	movi	r4,1
 4007138:	30cd883a 	add	r6,r6,r3
 400713c:	3b0f883a 	add	r7,r7,r12
 4007140:	423fffc4 	addi	r8,r8,-1
 4007144:	1013883a 	mov	r9,r2
 4007148:	3015883a 	mov	r10,r6
 400714c:	111ab03a 	or	r13,r2,r4
 4007150:	98003016 	blt	r19,zero,4007214 <__muldf3+0x398>
 4007154:	5825883a 	mov	r18,r11
 4007158:	3827883a 	mov	r19,r7
 400715c:	7abfef2e 	bgeu	r15,r10,400711c <__muldf3+0x2a0>
 4007160:	da001015 	stw	r8,64(sp)
 4007164:	00803fc4 	movi	r2,255
 4007168:	488e703a 	and	r7,r9,r2
 400716c:	00802004 	movi	r2,128
 4007170:	0007883a 	mov	r3,zero
 4007174:	0011883a 	mov	r8,zero
 4007178:	38801826 	beq	r7,r2,40071dc <__muldf3+0x360>
 400717c:	008000c4 	movi	r2,3
 4007180:	d9000e04 	addi	r4,sp,56
 4007184:	da801215 	stw	r10,72(sp)
 4007188:	d8800e15 	stw	r2,56(sp)
 400718c:	da401115 	stw	r9,68(sp)
 4007190:	003f6a06 	br	4006f3c <__muldf3+0xc0>
 4007194:	89802126 	beq	r17,r6,400721c <__muldf3+0x3a0>
 4007198:	0009883a 	mov	r4,zero
 400719c:	5105883a 	add	r2,r10,r4
 40071a0:	128d803a 	cmpltu	r6,r2,r10
 40071a4:	5d07883a 	add	r3,r11,r20
 40071a8:	30cd883a 	add	r6,r6,r3
 40071ac:	0021883a 	mov	r16,zero
 40071b0:	0023883a 	mov	r17,zero
 40071b4:	1025883a 	mov	r18,r2
 40071b8:	3027883a 	mov	r19,r6
 40071bc:	32ff9e2e 	bgeu	r6,r11,4007038 <__muldf3+0x1bc>
 40071c0:	00800044 	movi	r2,1
 40071c4:	8089883a 	add	r4,r16,r2
 40071c8:	240d803a 	cmpltu	r6,r4,r16
 40071cc:	344d883a 	add	r6,r6,r17
 40071d0:	2021883a 	mov	r16,r4
 40071d4:	3023883a 	mov	r17,r6
 40071d8:	003f9806 	br	400703c <__muldf3+0x1c0>
 40071dc:	403fe71e 	bne	r8,zero,400717c <__muldf3+0x300>
 40071e0:	01004004 	movi	r4,256
 40071e4:	4904703a 	and	r2,r9,r4
 40071e8:	10c4b03a 	or	r2,r2,r3
 40071ec:	103fe31e 	bne	r2,zero,400717c <__muldf3+0x300>
 40071f0:	94c4b03a 	or	r2,r18,r19
 40071f4:	103fe126 	beq	r2,zero,400717c <__muldf3+0x300>
 40071f8:	49c5883a 	add	r2,r9,r7
 40071fc:	1251803a 	cmpltu	r8,r2,r9
 4007200:	4291883a 	add	r8,r8,r10
 4007204:	013fc004 	movi	r4,-256
 4007208:	1112703a 	and	r9,r2,r4
 400720c:	4015883a 	mov	r10,r8
 4007210:	003fda06 	br	400717c <__muldf3+0x300>
 4007214:	6813883a 	mov	r9,r13
 4007218:	003fce06 	br	4007154 <__muldf3+0x2d8>
 400721c:	143f7c36 	bltu	r2,r16,4007010 <__muldf3+0x194>
 4007220:	003fdd06 	br	4007198 <__muldf3+0x31c>
 4007224:	12bf852e 	bgeu	r2,r10,400703c <__muldf3+0x1c0>
 4007228:	003fe506 	br	40071c0 <__muldf3+0x344>
 400722c:	00800084 	movi	r2,2
 4007230:	20bf351e 	bne	r4,r2,4006f08 <__muldf3+0x8c>
 4007234:	01010074 	movhi	r4,1025
 4007238:	21254604 	addi	r4,r4,-27368
 400723c:	003f3f06 	br	4006f3c <__muldf3+0xc0>

04007240 <__eqdf2>:
 4007240:	deffef04 	addi	sp,sp,-68
 4007244:	dc400f15 	stw	r17,60(sp)
 4007248:	dc400404 	addi	r17,sp,16
 400724c:	2005883a 	mov	r2,r4
 4007250:	2807883a 	mov	r3,r5
 4007254:	dc000e15 	stw	r16,56(sp)
 4007258:	d809883a 	mov	r4,sp
 400725c:	880b883a 	mov	r5,r17
 4007260:	dc000904 	addi	r16,sp,36
 4007264:	d8c00115 	stw	r3,4(sp)
 4007268:	d8800015 	stw	r2,0(sp)
 400726c:	d9800215 	stw	r6,8(sp)
 4007270:	dfc01015 	stw	ra,64(sp)
 4007274:	d9c00315 	stw	r7,12(sp)
 4007278:	400211c0 	call	400211c <__unpack_d>
 400727c:	d9000204 	addi	r4,sp,8
 4007280:	800b883a 	mov	r5,r16
 4007284:	400211c0 	call	400211c <__unpack_d>
 4007288:	d8800417 	ldw	r2,16(sp)
 400728c:	00c00044 	movi	r3,1
 4007290:	180d883a 	mov	r6,r3
 4007294:	1880062e 	bgeu	r3,r2,40072b0 <__eqdf2+0x70>
 4007298:	d8800917 	ldw	r2,36(sp)
 400729c:	8809883a 	mov	r4,r17
 40072a0:	800b883a 	mov	r5,r16
 40072a4:	1880022e 	bgeu	r3,r2,40072b0 <__eqdf2+0x70>
 40072a8:	40078c40 	call	40078c4 <__fpcmp_parts_d>
 40072ac:	100d883a 	mov	r6,r2
 40072b0:	3005883a 	mov	r2,r6
 40072b4:	dfc01017 	ldw	ra,64(sp)
 40072b8:	dc400f17 	ldw	r17,60(sp)
 40072bc:	dc000e17 	ldw	r16,56(sp)
 40072c0:	dec01104 	addi	sp,sp,68
 40072c4:	f800283a 	ret

040072c8 <__nedf2>:
 40072c8:	deffef04 	addi	sp,sp,-68
 40072cc:	dc400f15 	stw	r17,60(sp)
 40072d0:	dc400404 	addi	r17,sp,16
 40072d4:	2005883a 	mov	r2,r4
 40072d8:	2807883a 	mov	r3,r5
 40072dc:	dc000e15 	stw	r16,56(sp)
 40072e0:	d809883a 	mov	r4,sp
 40072e4:	880b883a 	mov	r5,r17
 40072e8:	dc000904 	addi	r16,sp,36
 40072ec:	d8c00115 	stw	r3,4(sp)
 40072f0:	d8800015 	stw	r2,0(sp)
 40072f4:	d9800215 	stw	r6,8(sp)
 40072f8:	dfc01015 	stw	ra,64(sp)
 40072fc:	d9c00315 	stw	r7,12(sp)
 4007300:	400211c0 	call	400211c <__unpack_d>
 4007304:	d9000204 	addi	r4,sp,8
 4007308:	800b883a 	mov	r5,r16
 400730c:	400211c0 	call	400211c <__unpack_d>
 4007310:	d8800417 	ldw	r2,16(sp)
 4007314:	00c00044 	movi	r3,1
 4007318:	180d883a 	mov	r6,r3
 400731c:	1880062e 	bgeu	r3,r2,4007338 <__nedf2+0x70>
 4007320:	d8800917 	ldw	r2,36(sp)
 4007324:	8809883a 	mov	r4,r17
 4007328:	800b883a 	mov	r5,r16
 400732c:	1880022e 	bgeu	r3,r2,4007338 <__nedf2+0x70>
 4007330:	40078c40 	call	40078c4 <__fpcmp_parts_d>
 4007334:	100d883a 	mov	r6,r2
 4007338:	3005883a 	mov	r2,r6
 400733c:	dfc01017 	ldw	ra,64(sp)
 4007340:	dc400f17 	ldw	r17,60(sp)
 4007344:	dc000e17 	ldw	r16,56(sp)
 4007348:	dec01104 	addi	sp,sp,68
 400734c:	f800283a 	ret

04007350 <__gtdf2>:
 4007350:	deffef04 	addi	sp,sp,-68
 4007354:	dc400f15 	stw	r17,60(sp)
 4007358:	dc400404 	addi	r17,sp,16
 400735c:	2005883a 	mov	r2,r4
 4007360:	2807883a 	mov	r3,r5
 4007364:	dc000e15 	stw	r16,56(sp)
 4007368:	d809883a 	mov	r4,sp
 400736c:	880b883a 	mov	r5,r17
 4007370:	dc000904 	addi	r16,sp,36
 4007374:	d8c00115 	stw	r3,4(sp)
 4007378:	d8800015 	stw	r2,0(sp)
 400737c:	d9800215 	stw	r6,8(sp)
 4007380:	dfc01015 	stw	ra,64(sp)
 4007384:	d9c00315 	stw	r7,12(sp)
 4007388:	400211c0 	call	400211c <__unpack_d>
 400738c:	d9000204 	addi	r4,sp,8
 4007390:	800b883a 	mov	r5,r16
 4007394:	400211c0 	call	400211c <__unpack_d>
 4007398:	d8800417 	ldw	r2,16(sp)
 400739c:	00c00044 	movi	r3,1
 40073a0:	01bfffc4 	movi	r6,-1
 40073a4:	1880062e 	bgeu	r3,r2,40073c0 <__gtdf2+0x70>
 40073a8:	d8800917 	ldw	r2,36(sp)
 40073ac:	8809883a 	mov	r4,r17
 40073b0:	800b883a 	mov	r5,r16
 40073b4:	1880022e 	bgeu	r3,r2,40073c0 <__gtdf2+0x70>
 40073b8:	40078c40 	call	40078c4 <__fpcmp_parts_d>
 40073bc:	100d883a 	mov	r6,r2
 40073c0:	3005883a 	mov	r2,r6
 40073c4:	dfc01017 	ldw	ra,64(sp)
 40073c8:	dc400f17 	ldw	r17,60(sp)
 40073cc:	dc000e17 	ldw	r16,56(sp)
 40073d0:	dec01104 	addi	sp,sp,68
 40073d4:	f800283a 	ret

040073d8 <__gedf2>:
 40073d8:	deffef04 	addi	sp,sp,-68
 40073dc:	dc400f15 	stw	r17,60(sp)
 40073e0:	dc400404 	addi	r17,sp,16
 40073e4:	2005883a 	mov	r2,r4
 40073e8:	2807883a 	mov	r3,r5
 40073ec:	dc000e15 	stw	r16,56(sp)
 40073f0:	d809883a 	mov	r4,sp
 40073f4:	880b883a 	mov	r5,r17
 40073f8:	dc000904 	addi	r16,sp,36
 40073fc:	d8c00115 	stw	r3,4(sp)
 4007400:	d8800015 	stw	r2,0(sp)
 4007404:	d9800215 	stw	r6,8(sp)
 4007408:	dfc01015 	stw	ra,64(sp)
 400740c:	d9c00315 	stw	r7,12(sp)
 4007410:	400211c0 	call	400211c <__unpack_d>
 4007414:	d9000204 	addi	r4,sp,8
 4007418:	800b883a 	mov	r5,r16
 400741c:	400211c0 	call	400211c <__unpack_d>
 4007420:	d8800417 	ldw	r2,16(sp)
 4007424:	00c00044 	movi	r3,1
 4007428:	01bfffc4 	movi	r6,-1
 400742c:	1880062e 	bgeu	r3,r2,4007448 <__gedf2+0x70>
 4007430:	d8800917 	ldw	r2,36(sp)
 4007434:	8809883a 	mov	r4,r17
 4007438:	800b883a 	mov	r5,r16
 400743c:	1880022e 	bgeu	r3,r2,4007448 <__gedf2+0x70>
 4007440:	40078c40 	call	40078c4 <__fpcmp_parts_d>
 4007444:	100d883a 	mov	r6,r2
 4007448:	3005883a 	mov	r2,r6
 400744c:	dfc01017 	ldw	ra,64(sp)
 4007450:	dc400f17 	ldw	r17,60(sp)
 4007454:	dc000e17 	ldw	r16,56(sp)
 4007458:	dec01104 	addi	sp,sp,68
 400745c:	f800283a 	ret

04007460 <__ltdf2>:
 4007460:	deffef04 	addi	sp,sp,-68
 4007464:	dc400f15 	stw	r17,60(sp)
 4007468:	dc400404 	addi	r17,sp,16
 400746c:	2005883a 	mov	r2,r4
 4007470:	2807883a 	mov	r3,r5
 4007474:	dc000e15 	stw	r16,56(sp)
 4007478:	d809883a 	mov	r4,sp
 400747c:	880b883a 	mov	r5,r17
 4007480:	dc000904 	addi	r16,sp,36
 4007484:	d8c00115 	stw	r3,4(sp)
 4007488:	d8800015 	stw	r2,0(sp)
 400748c:	d9800215 	stw	r6,8(sp)
 4007490:	dfc01015 	stw	ra,64(sp)
 4007494:	d9c00315 	stw	r7,12(sp)
 4007498:	400211c0 	call	400211c <__unpack_d>
 400749c:	d9000204 	addi	r4,sp,8
 40074a0:	800b883a 	mov	r5,r16
 40074a4:	400211c0 	call	400211c <__unpack_d>
 40074a8:	d8800417 	ldw	r2,16(sp)
 40074ac:	00c00044 	movi	r3,1
 40074b0:	180d883a 	mov	r6,r3
 40074b4:	1880062e 	bgeu	r3,r2,40074d0 <__ltdf2+0x70>
 40074b8:	d8800917 	ldw	r2,36(sp)
 40074bc:	8809883a 	mov	r4,r17
 40074c0:	800b883a 	mov	r5,r16
 40074c4:	1880022e 	bgeu	r3,r2,40074d0 <__ltdf2+0x70>
 40074c8:	40078c40 	call	40078c4 <__fpcmp_parts_d>
 40074cc:	100d883a 	mov	r6,r2
 40074d0:	3005883a 	mov	r2,r6
 40074d4:	dfc01017 	ldw	ra,64(sp)
 40074d8:	dc400f17 	ldw	r17,60(sp)
 40074dc:	dc000e17 	ldw	r16,56(sp)
 40074e0:	dec01104 	addi	sp,sp,68
 40074e4:	f800283a 	ret

040074e8 <__ledf2>:
 40074e8:	deffef04 	addi	sp,sp,-68
 40074ec:	dc400f15 	stw	r17,60(sp)
 40074f0:	dc400404 	addi	r17,sp,16
 40074f4:	2005883a 	mov	r2,r4
 40074f8:	2807883a 	mov	r3,r5
 40074fc:	dc000e15 	stw	r16,56(sp)
 4007500:	d809883a 	mov	r4,sp
 4007504:	880b883a 	mov	r5,r17
 4007508:	dc000904 	addi	r16,sp,36
 400750c:	d8c00115 	stw	r3,4(sp)
 4007510:	d8800015 	stw	r2,0(sp)
 4007514:	d9800215 	stw	r6,8(sp)
 4007518:	dfc01015 	stw	ra,64(sp)
 400751c:	d9c00315 	stw	r7,12(sp)
 4007520:	400211c0 	call	400211c <__unpack_d>
 4007524:	d9000204 	addi	r4,sp,8
 4007528:	800b883a 	mov	r5,r16
 400752c:	400211c0 	call	400211c <__unpack_d>
 4007530:	d8800417 	ldw	r2,16(sp)
 4007534:	00c00044 	movi	r3,1
 4007538:	180d883a 	mov	r6,r3
 400753c:	1880062e 	bgeu	r3,r2,4007558 <__ledf2+0x70>
 4007540:	d8800917 	ldw	r2,36(sp)
 4007544:	8809883a 	mov	r4,r17
 4007548:	800b883a 	mov	r5,r16
 400754c:	1880022e 	bgeu	r3,r2,4007558 <__ledf2+0x70>
 4007550:	40078c40 	call	40078c4 <__fpcmp_parts_d>
 4007554:	100d883a 	mov	r6,r2
 4007558:	3005883a 	mov	r2,r6
 400755c:	dfc01017 	ldw	ra,64(sp)
 4007560:	dc400f17 	ldw	r17,60(sp)
 4007564:	dc000e17 	ldw	r16,56(sp)
 4007568:	dec01104 	addi	sp,sp,68
 400756c:	f800283a 	ret

04007570 <__floatsidf>:
 4007570:	2006d7fa 	srli	r3,r4,31
 4007574:	defff604 	addi	sp,sp,-40
 4007578:	008000c4 	movi	r2,3
 400757c:	dfc00915 	stw	ra,36(sp)
 4007580:	dcc00815 	stw	r19,32(sp)
 4007584:	dc800715 	stw	r18,28(sp)
 4007588:	dc400615 	stw	r17,24(sp)
 400758c:	dc000515 	stw	r16,20(sp)
 4007590:	d8800015 	stw	r2,0(sp)
 4007594:	d8c00115 	stw	r3,4(sp)
 4007598:	20000f1e 	bne	r4,zero,40075d8 <__floatsidf+0x68>
 400759c:	00800084 	movi	r2,2
 40075a0:	d8800015 	stw	r2,0(sp)
 40075a4:	d809883a 	mov	r4,sp
 40075a8:	4001e080 	call	4001e08 <__pack_d>
 40075ac:	1009883a 	mov	r4,r2
 40075b0:	180b883a 	mov	r5,r3
 40075b4:	2005883a 	mov	r2,r4
 40075b8:	2807883a 	mov	r3,r5
 40075bc:	dfc00917 	ldw	ra,36(sp)
 40075c0:	dcc00817 	ldw	r19,32(sp)
 40075c4:	dc800717 	ldw	r18,28(sp)
 40075c8:	dc400617 	ldw	r17,24(sp)
 40075cc:	dc000517 	ldw	r16,20(sp)
 40075d0:	dec00a04 	addi	sp,sp,40
 40075d4:	f800283a 	ret
 40075d8:	00800f04 	movi	r2,60
 40075dc:	1807003a 	cmpeq	r3,r3,zero
 40075e0:	d8800215 	stw	r2,8(sp)
 40075e4:	18001126 	beq	r3,zero,400762c <__floatsidf+0xbc>
 40075e8:	0027883a 	mov	r19,zero
 40075ec:	2025883a 	mov	r18,r4
 40075f0:	d9000315 	stw	r4,12(sp)
 40075f4:	dcc00415 	stw	r19,16(sp)
 40075f8:	4001ab80 	call	4001ab8 <__clzsi2>
 40075fc:	11000744 	addi	r4,r2,29
 4007600:	013fe80e 	bge	zero,r4,40075a4 <__floatsidf+0x34>
 4007604:	10bfff44 	addi	r2,r2,-3
 4007608:	10000c16 	blt	r2,zero,400763c <__floatsidf+0xcc>
 400760c:	90a2983a 	sll	r17,r18,r2
 4007610:	0021883a 	mov	r16,zero
 4007614:	d8800217 	ldw	r2,8(sp)
 4007618:	dc400415 	stw	r17,16(sp)
 400761c:	dc000315 	stw	r16,12(sp)
 4007620:	1105c83a 	sub	r2,r2,r4
 4007624:	d8800215 	stw	r2,8(sp)
 4007628:	003fde06 	br	40075a4 <__floatsidf+0x34>
 400762c:	00a00034 	movhi	r2,32768
 4007630:	20800a26 	beq	r4,r2,400765c <__floatsidf+0xec>
 4007634:	0109c83a 	sub	r4,zero,r4
 4007638:	003feb06 	br	40075e8 <__floatsidf+0x78>
 400763c:	9006d07a 	srli	r3,r18,1
 4007640:	008007c4 	movi	r2,31
 4007644:	1105c83a 	sub	r2,r2,r4
 4007648:	1886d83a 	srl	r3,r3,r2
 400764c:	9922983a 	sll	r17,r19,r4
 4007650:	9120983a 	sll	r16,r18,r4
 4007654:	1c62b03a 	or	r17,r3,r17
 4007658:	003fee06 	br	4007614 <__floatsidf+0xa4>
 400765c:	0009883a 	mov	r4,zero
 4007660:	01707834 	movhi	r5,49632
 4007664:	003fd306 	br	40075b4 <__floatsidf+0x44>

04007668 <__fixdfsi>:
 4007668:	defff804 	addi	sp,sp,-32
 400766c:	2005883a 	mov	r2,r4
 4007670:	2807883a 	mov	r3,r5
 4007674:	d809883a 	mov	r4,sp
 4007678:	d9400204 	addi	r5,sp,8
 400767c:	d8c00115 	stw	r3,4(sp)
 4007680:	d8800015 	stw	r2,0(sp)
 4007684:	dfc00715 	stw	ra,28(sp)
 4007688:	400211c0 	call	400211c <__unpack_d>
 400768c:	d8c00217 	ldw	r3,8(sp)
 4007690:	00800084 	movi	r2,2
 4007694:	1880051e 	bne	r3,r2,40076ac <__fixdfsi+0x44>
 4007698:	0007883a 	mov	r3,zero
 400769c:	1805883a 	mov	r2,r3
 40076a0:	dfc00717 	ldw	ra,28(sp)
 40076a4:	dec00804 	addi	sp,sp,32
 40076a8:	f800283a 	ret
 40076ac:	00800044 	movi	r2,1
 40076b0:	10fff92e 	bgeu	r2,r3,4007698 <__fixdfsi+0x30>
 40076b4:	00800104 	movi	r2,4
 40076b8:	18800426 	beq	r3,r2,40076cc <__fixdfsi+0x64>
 40076bc:	d8c00417 	ldw	r3,16(sp)
 40076c0:	183ff516 	blt	r3,zero,4007698 <__fixdfsi+0x30>
 40076c4:	00800784 	movi	r2,30
 40076c8:	10c0080e 	bge	r2,r3,40076ec <__fixdfsi+0x84>
 40076cc:	d8800317 	ldw	r2,12(sp)
 40076d0:	1000121e 	bne	r2,zero,400771c <__fixdfsi+0xb4>
 40076d4:	00e00034 	movhi	r3,32768
 40076d8:	18ffffc4 	addi	r3,r3,-1
 40076dc:	1805883a 	mov	r2,r3
 40076e0:	dfc00717 	ldw	ra,28(sp)
 40076e4:	dec00804 	addi	sp,sp,32
 40076e8:	f800283a 	ret
 40076ec:	00800f04 	movi	r2,60
 40076f0:	10d1c83a 	sub	r8,r2,r3
 40076f4:	40bff804 	addi	r2,r8,-32
 40076f8:	d9800517 	ldw	r6,20(sp)
 40076fc:	d9c00617 	ldw	r7,24(sp)
 4007700:	10000816 	blt	r2,zero,4007724 <__fixdfsi+0xbc>
 4007704:	3888d83a 	srl	r4,r7,r2
 4007708:	d8800317 	ldw	r2,12(sp)
 400770c:	2007883a 	mov	r3,r4
 4007710:	103fe226 	beq	r2,zero,400769c <__fixdfsi+0x34>
 4007714:	0107c83a 	sub	r3,zero,r4
 4007718:	003fe006 	br	400769c <__fixdfsi+0x34>
 400771c:	00e00034 	movhi	r3,32768
 4007720:	003fde06 	br	400769c <__fixdfsi+0x34>
 4007724:	39c7883a 	add	r3,r7,r7
 4007728:	008007c4 	movi	r2,31
 400772c:	1205c83a 	sub	r2,r2,r8
 4007730:	1886983a 	sll	r3,r3,r2
 4007734:	3208d83a 	srl	r4,r6,r8
 4007738:	1908b03a 	or	r4,r3,r4
 400773c:	003ff206 	br	4007708 <__fixdfsi+0xa0>

04007740 <__make_dp>:
 4007740:	defff904 	addi	sp,sp,-28
 4007744:	d8c00717 	ldw	r3,28(sp)
 4007748:	d9000015 	stw	r4,0(sp)
 400774c:	d809883a 	mov	r4,sp
 4007750:	dfc00515 	stw	ra,20(sp)
 4007754:	d9c00615 	stw	r7,24(sp)
 4007758:	d9400115 	stw	r5,4(sp)
 400775c:	d9800215 	stw	r6,8(sp)
 4007760:	d8c00415 	stw	r3,16(sp)
 4007764:	d9c00315 	stw	r7,12(sp)
 4007768:	4001e080 	call	4001e08 <__pack_d>
 400776c:	dfc00517 	ldw	ra,20(sp)
 4007770:	dec00704 	addi	sp,sp,28
 4007774:	f800283a 	ret

04007778 <udivmodsi4>:
 4007778:	29001b2e 	bgeu	r5,r4,40077e8 <udivmodsi4+0x70>
 400777c:	28001a16 	blt	r5,zero,40077e8 <udivmodsi4+0x70>
 4007780:	00800044 	movi	r2,1
 4007784:	0007883a 	mov	r3,zero
 4007788:	01c007c4 	movi	r7,31
 400778c:	00000306 	br	400779c <udivmodsi4+0x24>
 4007790:	19c01326 	beq	r3,r7,40077e0 <udivmodsi4+0x68>
 4007794:	18c00044 	addi	r3,r3,1
 4007798:	28000416 	blt	r5,zero,40077ac <udivmodsi4+0x34>
 400779c:	294b883a 	add	r5,r5,r5
 40077a0:	1085883a 	add	r2,r2,r2
 40077a4:	293ffa36 	bltu	r5,r4,4007790 <udivmodsi4+0x18>
 40077a8:	10000d26 	beq	r2,zero,40077e0 <udivmodsi4+0x68>
 40077ac:	0007883a 	mov	r3,zero
 40077b0:	21400236 	bltu	r4,r5,40077bc <udivmodsi4+0x44>
 40077b4:	2149c83a 	sub	r4,r4,r5
 40077b8:	1886b03a 	or	r3,r3,r2
 40077bc:	1004d07a 	srli	r2,r2,1
 40077c0:	280ad07a 	srli	r5,r5,1
 40077c4:	103ffa1e 	bne	r2,zero,40077b0 <udivmodsi4+0x38>
 40077c8:	30000226 	beq	r6,zero,40077d4 <udivmodsi4+0x5c>
 40077cc:	2005883a 	mov	r2,r4
 40077d0:	f800283a 	ret
 40077d4:	1809883a 	mov	r4,r3
 40077d8:	2005883a 	mov	r2,r4
 40077dc:	f800283a 	ret
 40077e0:	0007883a 	mov	r3,zero
 40077e4:	003ff806 	br	40077c8 <udivmodsi4+0x50>
 40077e8:	00800044 	movi	r2,1
 40077ec:	0007883a 	mov	r3,zero
 40077f0:	003fef06 	br	40077b0 <udivmodsi4+0x38>

040077f4 <__divsi3>:
 40077f4:	defffe04 	addi	sp,sp,-8
 40077f8:	dc000015 	stw	r16,0(sp)
 40077fc:	dfc00115 	stw	ra,4(sp)
 4007800:	0021883a 	mov	r16,zero
 4007804:	20000c16 	blt	r4,zero,4007838 <__divsi3+0x44>
 4007808:	000d883a 	mov	r6,zero
 400780c:	28000e16 	blt	r5,zero,4007848 <__divsi3+0x54>
 4007810:	40077780 	call	4007778 <udivmodsi4>
 4007814:	1007883a 	mov	r3,r2
 4007818:	8005003a 	cmpeq	r2,r16,zero
 400781c:	1000011e 	bne	r2,zero,4007824 <__divsi3+0x30>
 4007820:	00c7c83a 	sub	r3,zero,r3
 4007824:	1805883a 	mov	r2,r3
 4007828:	dfc00117 	ldw	ra,4(sp)
 400782c:	dc000017 	ldw	r16,0(sp)
 4007830:	dec00204 	addi	sp,sp,8
 4007834:	f800283a 	ret
 4007838:	0109c83a 	sub	r4,zero,r4
 400783c:	04000044 	movi	r16,1
 4007840:	000d883a 	mov	r6,zero
 4007844:	283ff20e 	bge	r5,zero,4007810 <__divsi3+0x1c>
 4007848:	014bc83a 	sub	r5,zero,r5
 400784c:	8021003a 	cmpeq	r16,r16,zero
 4007850:	003fef06 	br	4007810 <__divsi3+0x1c>

04007854 <__modsi3>:
 4007854:	deffff04 	addi	sp,sp,-4
 4007858:	dfc00015 	stw	ra,0(sp)
 400785c:	01800044 	movi	r6,1
 4007860:	2807883a 	mov	r3,r5
 4007864:	20000416 	blt	r4,zero,4007878 <__modsi3+0x24>
 4007868:	28000c16 	blt	r5,zero,400789c <__modsi3+0x48>
 400786c:	dfc00017 	ldw	ra,0(sp)
 4007870:	dec00104 	addi	sp,sp,4
 4007874:	40077781 	jmpi	4007778 <udivmodsi4>
 4007878:	0109c83a 	sub	r4,zero,r4
 400787c:	28000b16 	blt	r5,zero,40078ac <__modsi3+0x58>
 4007880:	180b883a 	mov	r5,r3
 4007884:	01800044 	movi	r6,1
 4007888:	40077780 	call	4007778 <udivmodsi4>
 400788c:	0085c83a 	sub	r2,zero,r2
 4007890:	dfc00017 	ldw	ra,0(sp)
 4007894:	dec00104 	addi	sp,sp,4
 4007898:	f800283a 	ret
 400789c:	014bc83a 	sub	r5,zero,r5
 40078a0:	dfc00017 	ldw	ra,0(sp)
 40078a4:	dec00104 	addi	sp,sp,4
 40078a8:	40077781 	jmpi	4007778 <udivmodsi4>
 40078ac:	0147c83a 	sub	r3,zero,r5
 40078b0:	003ff306 	br	4007880 <__modsi3+0x2c>

040078b4 <__udivsi3>:
 40078b4:	000d883a 	mov	r6,zero
 40078b8:	40077781 	jmpi	4007778 <udivmodsi4>

040078bc <__umodsi3>:
 40078bc:	01800044 	movi	r6,1
 40078c0:	40077781 	jmpi	4007778 <udivmodsi4>

040078c4 <__fpcmp_parts_d>:
 40078c4:	21800017 	ldw	r6,0(r4)
 40078c8:	00c00044 	movi	r3,1
 40078cc:	19800a2e 	bgeu	r3,r6,40078f8 <__fpcmp_parts_d+0x34>
 40078d0:	28800017 	ldw	r2,0(r5)
 40078d4:	1880082e 	bgeu	r3,r2,40078f8 <__fpcmp_parts_d+0x34>
 40078d8:	00c00104 	movi	r3,4
 40078dc:	30c02626 	beq	r6,r3,4007978 <__fpcmp_parts_d+0xb4>
 40078e0:	10c02226 	beq	r2,r3,400796c <__fpcmp_parts_d+0xa8>
 40078e4:	00c00084 	movi	r3,2
 40078e8:	30c00526 	beq	r6,r3,4007900 <__fpcmp_parts_d+0x3c>
 40078ec:	10c0071e 	bne	r2,r3,400790c <__fpcmp_parts_d+0x48>
 40078f0:	20800117 	ldw	r2,4(r4)
 40078f4:	1000091e 	bne	r2,zero,400791c <__fpcmp_parts_d+0x58>
 40078f8:	00800044 	movi	r2,1
 40078fc:	f800283a 	ret
 4007900:	10c01a1e 	bne	r2,r3,400796c <__fpcmp_parts_d+0xa8>
 4007904:	0005883a 	mov	r2,zero
 4007908:	f800283a 	ret
 400790c:	22000117 	ldw	r8,4(r4)
 4007910:	28800117 	ldw	r2,4(r5)
 4007914:	40800326 	beq	r8,r2,4007924 <__fpcmp_parts_d+0x60>
 4007918:	403ff726 	beq	r8,zero,40078f8 <__fpcmp_parts_d+0x34>
 400791c:	00bfffc4 	movi	r2,-1
 4007920:	f800283a 	ret
 4007924:	20c00217 	ldw	r3,8(r4)
 4007928:	28800217 	ldw	r2,8(r5)
 400792c:	10fffa16 	blt	r2,r3,4007918 <__fpcmp_parts_d+0x54>
 4007930:	18800916 	blt	r3,r2,4007958 <__fpcmp_parts_d+0x94>
 4007934:	21c00417 	ldw	r7,16(r4)
 4007938:	28c00417 	ldw	r3,16(r5)
 400793c:	21800317 	ldw	r6,12(r4)
 4007940:	28800317 	ldw	r2,12(r5)
 4007944:	19fff436 	bltu	r3,r7,4007918 <__fpcmp_parts_d+0x54>
 4007948:	38c00526 	beq	r7,r3,4007960 <__fpcmp_parts_d+0x9c>
 400794c:	38c00236 	bltu	r7,r3,4007958 <__fpcmp_parts_d+0x94>
 4007950:	19ffec1e 	bne	r3,r7,4007904 <__fpcmp_parts_d+0x40>
 4007954:	30bfeb2e 	bgeu	r6,r2,4007904 <__fpcmp_parts_d+0x40>
 4007958:	403fe71e 	bne	r8,zero,40078f8 <__fpcmp_parts_d+0x34>
 400795c:	003fef06 	br	400791c <__fpcmp_parts_d+0x58>
 4007960:	11bffa2e 	bgeu	r2,r6,400794c <__fpcmp_parts_d+0x88>
 4007964:	403fe426 	beq	r8,zero,40078f8 <__fpcmp_parts_d+0x34>
 4007968:	003fec06 	br	400791c <__fpcmp_parts_d+0x58>
 400796c:	28800117 	ldw	r2,4(r5)
 4007970:	103fe11e 	bne	r2,zero,40078f8 <__fpcmp_parts_d+0x34>
 4007974:	003fe906 	br	400791c <__fpcmp_parts_d+0x58>
 4007978:	11bfdd1e 	bne	r2,r6,40078f0 <__fpcmp_parts_d+0x2c>
 400797c:	28c00117 	ldw	r3,4(r5)
 4007980:	20800117 	ldw	r2,4(r4)
 4007984:	1885c83a 	sub	r2,r3,r2
 4007988:	f800283a 	ret

0400798c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 400798c:	defffe04 	addi	sp,sp,-8
 4007990:	dfc00115 	stw	ra,4(sp)
 4007994:	df000015 	stw	fp,0(sp)
 4007998:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 400799c:	01010074 	movhi	r4,1025
 40079a0:	2127a204 	addi	r4,r4,-24952
 40079a4:	01410074 	movhi	r5,1025
 40079a8:	2965e504 	addi	r5,r5,-26732
 40079ac:	01810074 	movhi	r6,1025
 40079b0:	31a7a204 	addi	r6,r6,-24952
 40079b4:	4007a0c0 	call	4007a0c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 40079b8:	01010034 	movhi	r4,1024
 40079bc:	21000804 	addi	r4,r4,32
 40079c0:	01410034 	movhi	r5,1024
 40079c4:	29400804 	addi	r5,r5,32
 40079c8:	01810034 	movhi	r6,1024
 40079cc:	31806d04 	addi	r6,r6,436
 40079d0:	4007a0c0 	call	4007a0c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 40079d4:	01010074 	movhi	r4,1025
 40079d8:	21253604 	addi	r4,r4,-27432
 40079dc:	01410074 	movhi	r5,1025
 40079e0:	29653604 	addi	r5,r5,-27432
 40079e4:	01810074 	movhi	r6,1025
 40079e8:	31a5e504 	addi	r6,r6,-26732
 40079ec:	4007a0c0 	call	4007a0c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 40079f0:	40085980 	call	4008598 <alt_dcache_flush_all>
  alt_icache_flush_all();
 40079f4:	40086f40 	call	40086f4 <alt_icache_flush_all>
}
 40079f8:	e037883a 	mov	sp,fp
 40079fc:	dfc00117 	ldw	ra,4(sp)
 4007a00:	df000017 	ldw	fp,0(sp)
 4007a04:	dec00204 	addi	sp,sp,8
 4007a08:	f800283a 	ret

04007a0c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 4007a0c:	defffc04 	addi	sp,sp,-16
 4007a10:	df000315 	stw	fp,12(sp)
 4007a14:	df000304 	addi	fp,sp,12
 4007a18:	e13ffd15 	stw	r4,-12(fp)
 4007a1c:	e17ffe15 	stw	r5,-8(fp)
 4007a20:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 4007a24:	e0fffe17 	ldw	r3,-8(fp)
 4007a28:	e0bffd17 	ldw	r2,-12(fp)
 4007a2c:	18800e26 	beq	r3,r2,4007a68 <alt_load_section+0x5c>
  {
    while( to != end )
 4007a30:	00000a06 	br	4007a5c <alt_load_section+0x50>
    {
      *to++ = *from++;
 4007a34:	e0bffd17 	ldw	r2,-12(fp)
 4007a38:	10c00017 	ldw	r3,0(r2)
 4007a3c:	e0bffe17 	ldw	r2,-8(fp)
 4007a40:	10c00015 	stw	r3,0(r2)
 4007a44:	e0bffe17 	ldw	r2,-8(fp)
 4007a48:	10800104 	addi	r2,r2,4
 4007a4c:	e0bffe15 	stw	r2,-8(fp)
 4007a50:	e0bffd17 	ldw	r2,-12(fp)
 4007a54:	10800104 	addi	r2,r2,4
 4007a58:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 4007a5c:	e0fffe17 	ldw	r3,-8(fp)
 4007a60:	e0bfff17 	ldw	r2,-4(fp)
 4007a64:	18bff31e 	bne	r3,r2,4007a34 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 4007a68:	e037883a 	mov	sp,fp
 4007a6c:	df000017 	ldw	fp,0(sp)
 4007a70:	dec00104 	addi	sp,sp,4
 4007a74:	f800283a 	ret

04007a78 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 4007a78:	defffd04 	addi	sp,sp,-12
 4007a7c:	dfc00215 	stw	ra,8(sp)
 4007a80:	df000115 	stw	fp,4(sp)
 4007a84:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 4007a88:	0009883a 	mov	r4,zero
 4007a8c:	400802c0 	call	400802c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 4007a90:	40080600 	call	4008060 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 4007a94:	01010074 	movhi	r4,1025
 4007a98:	2125da04 	addi	r4,r4,-26776
 4007a9c:	01410074 	movhi	r5,1025
 4007aa0:	2965da04 	addi	r5,r5,-26776
 4007aa4:	01810074 	movhi	r6,1025
 4007aa8:	31a5da04 	addi	r6,r6,-26776
 4007aac:	4008ac80 	call	4008ac8 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 4007ab0:	d121d017 	ldw	r4,-30912(gp)
 4007ab4:	d161d117 	ldw	r5,-30908(gp)
 4007ab8:	d1a1d217 	ldw	r6,-30904(gp)
 4007abc:	40007dc0 	call	40007dc <main>
 4007ac0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 4007ac4:	01000044 	movi	r4,1
 4007ac8:	40084380 	call	4008438 <close>
  exit (result);
 4007acc:	e13fff17 	ldw	r4,-4(fp)
 4007ad0:	40091d00 	call	40091d0 <exit>

04007ad4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 4007ad4:	defffe04 	addi	sp,sp,-8
 4007ad8:	df000115 	stw	fp,4(sp)
 4007adc:	df000104 	addi	fp,sp,4
 4007ae0:	e13fff15 	stw	r4,-4(fp)
}
 4007ae4:	e037883a 	mov	sp,fp
 4007ae8:	df000017 	ldw	fp,0(sp)
 4007aec:	dec00104 	addi	sp,sp,4
 4007af0:	f800283a 	ret

04007af4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 4007af4:	defffe04 	addi	sp,sp,-8
 4007af8:	df000115 	stw	fp,4(sp)
 4007afc:	df000104 	addi	fp,sp,4
 4007b00:	e13fff15 	stw	r4,-4(fp)
}
 4007b04:	e037883a 	mov	sp,fp
 4007b08:	df000017 	ldw	fp,0(sp)
 4007b0c:	dec00104 	addi	sp,sp,4
 4007b10:	f800283a 	ret

04007b14 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
 4007b14:	defffd04 	addi	sp,sp,-12
 4007b18:	dfc00215 	stw	ra,8(sp)
 4007b1c:	df000115 	stw	fp,4(sp)
 4007b20:	df000104 	addi	fp,sp,4
 4007b24:	e13fff15 	stw	r4,-4(fp)
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
#else
    return fputs(str, stdout);
 4007b28:	00810074 	movhi	r2,1025
 4007b2c:	10a79404 	addi	r2,r2,-25008
 4007b30:	10800017 	ldw	r2,0(r2)
 4007b34:	11400217 	ldw	r5,8(r2)
 4007b38:	e13fff17 	ldw	r4,-4(fp)
 4007b3c:	40091f00 	call	40091f0 <fputs>
#endif
}
 4007b40:	e037883a 	mov	sp,fp
 4007b44:	dfc00117 	ldw	ra,4(sp)
 4007b48:	df000017 	ldw	fp,0(sp)
 4007b4c:	dec00204 	addi	sp,sp,8
 4007b50:	f800283a 	ret

04007b54 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 4007b54:	defff804 	addi	sp,sp,-32
 4007b58:	df000715 	stw	fp,28(sp)
 4007b5c:	df000704 	addi	fp,sp,28
 4007b60:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4007b64:	0005303a 	rdctl	r2,status
 4007b68:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4007b6c:	e0fffb17 	ldw	r3,-20(fp)
 4007b70:	00bfff84 	movi	r2,-2
 4007b74:	1884703a 	and	r2,r3,r2
 4007b78:	1001703a 	wrctl	status,r2
  
  return context;
 4007b7c:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 4007b80:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 4007b84:	d0a00417 	ldw	r2,-32752(gp)
 4007b88:	10c000c4 	addi	r3,r2,3
 4007b8c:	00bfff04 	movi	r2,-4
 4007b90:	1884703a 	and	r2,r3,r2
 4007b94:	d0a00415 	stw	r2,-32752(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 4007b98:	d0e00417 	ldw	r3,-32752(gp)
 4007b9c:	e0bffe17 	ldw	r2,-8(fp)
 4007ba0:	1887883a 	add	r3,r3,r2
 4007ba4:	00820034 	movhi	r2,2048
 4007ba8:	10800004 	addi	r2,r2,0
 4007bac:	10c0072e 	bgeu	r2,r3,4007bcc <sbrk+0x78>
 4007bb0:	e0bffd17 	ldw	r2,-12(fp)
 4007bb4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4007bb8:	e0bffa17 	ldw	r2,-24(fp)
 4007bbc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 4007bc0:	00bfffc4 	movi	r2,-1
 4007bc4:	e0bfff15 	stw	r2,-4(fp)
 4007bc8:	00000c06 	br	4007bfc <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
 4007bcc:	d0a00417 	ldw	r2,-32752(gp)
 4007bd0:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
 4007bd4:	d0e00417 	ldw	r3,-32752(gp)
 4007bd8:	e0bffe17 	ldw	r2,-8(fp)
 4007bdc:	1885883a 	add	r2,r3,r2
 4007be0:	d0a00415 	stw	r2,-32752(gp)
 4007be4:	e0bffd17 	ldw	r2,-12(fp)
 4007be8:	e0bff915 	stw	r2,-28(fp)
 4007bec:	e0bff917 	ldw	r2,-28(fp)
 4007bf0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 4007bf4:	e0bffc17 	ldw	r2,-16(fp)
 4007bf8:	e0bfff15 	stw	r2,-4(fp)
 4007bfc:	e0bfff17 	ldw	r2,-4(fp)
} 
 4007c00:	e037883a 	mov	sp,fp
 4007c04:	df000017 	ldw	fp,0(sp)
 4007c08:	dec00104 	addi	sp,sp,4
 4007c0c:	f800283a 	ret

04007c10 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 4007c10:	defffa04 	addi	sp,sp,-24
 4007c14:	df000515 	stw	fp,20(sp)
 4007c18:	df000504 	addi	fp,sp,20
 4007c1c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4007c20:	0005303a 	rdctl	r2,status
 4007c24:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4007c28:	e0fffd17 	ldw	r3,-12(fp)
 4007c2c:	00bfff84 	movi	r2,-2
 4007c30:	1884703a 	and	r2,r3,r2
 4007c34:	1001703a 	wrctl	status,r2
  
  return context;
 4007c38:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 4007c3c:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 4007c40:	e0bfff17 	ldw	r2,-4(fp)
 4007c44:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 4007c48:	e0bffc17 	ldw	r2,-16(fp)
 4007c4c:	10c00017 	ldw	r3,0(r2)
 4007c50:	e0bffc17 	ldw	r2,-16(fp)
 4007c54:	10800117 	ldw	r2,4(r2)
 4007c58:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 4007c5c:	e0bffc17 	ldw	r2,-16(fp)
 4007c60:	10c00117 	ldw	r3,4(r2)
 4007c64:	e0bffc17 	ldw	r2,-16(fp)
 4007c68:	10800017 	ldw	r2,0(r2)
 4007c6c:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 4007c70:	e0fffc17 	ldw	r3,-16(fp)
 4007c74:	e0bffc17 	ldw	r2,-16(fp)
 4007c78:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 4007c7c:	e0fffc17 	ldw	r3,-16(fp)
 4007c80:	e0bffc17 	ldw	r2,-16(fp)
 4007c84:	18800015 	stw	r2,0(r3)
 4007c88:	e0bffe17 	ldw	r2,-8(fp)
 4007c8c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4007c90:	e0bffb17 	ldw	r2,-20(fp)
 4007c94:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 4007c98:	e037883a 	mov	sp,fp
 4007c9c:	df000017 	ldw	fp,0(sp)
 4007ca0:	dec00104 	addi	sp,sp,4
 4007ca4:	f800283a 	ret

04007ca8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 4007ca8:	defffb04 	addi	sp,sp,-20
 4007cac:	dfc00415 	stw	ra,16(sp)
 4007cb0:	df000315 	stw	fp,12(sp)
 4007cb4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 4007cb8:	d0a00517 	ldw	r2,-32748(gp)
 4007cbc:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 4007cc0:	d0a1d417 	ldw	r2,-30896(gp)
 4007cc4:	10800044 	addi	r2,r2,1
 4007cc8:	d0a1d415 	stw	r2,-30896(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4007ccc:	00003106 	br	4007d94 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
 4007cd0:	e0bffe17 	ldw	r2,-8(fp)
 4007cd4:	10800017 	ldw	r2,0(r2)
 4007cd8:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 4007cdc:	e0bffe17 	ldw	r2,-8(fp)
 4007ce0:	10800403 	ldbu	r2,16(r2)
 4007ce4:	10803fcc 	andi	r2,r2,255
 4007ce8:	1005003a 	cmpeq	r2,r2,zero
 4007cec:	1000051e 	bne	r2,zero,4007d04 <alt_tick+0x5c>
 4007cf0:	d0a1d417 	ldw	r2,-30896(gp)
 4007cf4:	1004c03a 	cmpne	r2,r2,zero
 4007cf8:	1000021e 	bne	r2,zero,4007d04 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
 4007cfc:	e0bffe17 	ldw	r2,-8(fp)
 4007d00:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 4007d04:	e0bffe17 	ldw	r2,-8(fp)
 4007d08:	10c00217 	ldw	r3,8(r2)
 4007d0c:	d0a1d417 	ldw	r2,-30896(gp)
 4007d10:	10c01e36 	bltu	r2,r3,4007d8c <alt_tick+0xe4>
 4007d14:	e0bffe17 	ldw	r2,-8(fp)
 4007d18:	10800403 	ldbu	r2,16(r2)
 4007d1c:	10803fcc 	andi	r2,r2,255
 4007d20:	1004c03a 	cmpne	r2,r2,zero
 4007d24:	1000191e 	bne	r2,zero,4007d8c <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 4007d28:	e0bffe17 	ldw	r2,-8(fp)
 4007d2c:	10c00317 	ldw	r3,12(r2)
 4007d30:	e0bffe17 	ldw	r2,-8(fp)
 4007d34:	11000517 	ldw	r4,20(r2)
 4007d38:	183ee83a 	callr	r3
 4007d3c:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 4007d40:	e0bffd17 	ldw	r2,-12(fp)
 4007d44:	1004c03a 	cmpne	r2,r2,zero
 4007d48:	1000031e 	bne	r2,zero,4007d58 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 4007d4c:	e13ffe17 	ldw	r4,-8(fp)
 4007d50:	4007c100 	call	4007c10 <alt_alarm_stop>
 4007d54:	00000d06 	br	4007d8c <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 4007d58:	e0bffe17 	ldw	r2,-8(fp)
 4007d5c:	10c00217 	ldw	r3,8(r2)
 4007d60:	e0bffd17 	ldw	r2,-12(fp)
 4007d64:	1887883a 	add	r3,r3,r2
 4007d68:	e0bffe17 	ldw	r2,-8(fp)
 4007d6c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 4007d70:	e0bffe17 	ldw	r2,-8(fp)
 4007d74:	10c00217 	ldw	r3,8(r2)
 4007d78:	d0a1d417 	ldw	r2,-30896(gp)
 4007d7c:	1880032e 	bgeu	r3,r2,4007d8c <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 4007d80:	e0fffe17 	ldw	r3,-8(fp)
 4007d84:	00800044 	movi	r2,1
 4007d88:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 4007d8c:	e0bfff17 	ldw	r2,-4(fp)
 4007d90:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4007d94:	d0e00504 	addi	r3,gp,-32748
 4007d98:	e0bffe17 	ldw	r2,-8(fp)
 4007d9c:	10ffcc1e 	bne	r2,r3,4007cd0 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 4007da0:	e037883a 	mov	sp,fp
 4007da4:	dfc00117 	ldw	ra,4(sp)
 4007da8:	df000017 	ldw	fp,0(sp)
 4007dac:	dec00204 	addi	sp,sp,8
 4007db0:	f800283a 	ret

04007db4 <times>:
 *
 * ALT_TIMES is mapped onto the times() system call in alt_syscall.h
 */
 
clock_t ALT_TIMES (struct tms *buf)
{
 4007db4:	defffb04 	addi	sp,sp,-20
 4007db8:	dfc00415 	stw	ra,16(sp)
 4007dbc:	df000315 	stw	fp,12(sp)
 4007dc0:	df000304 	addi	fp,sp,12
 4007dc4:	e13ffe15 	stw	r4,-8(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 4007dc8:	00810074 	movhi	r2,1025
 4007dcc:	10a96804 	addi	r2,r2,-23136
 4007dd0:	10800017 	ldw	r2,0(r2)
  clock_t ticks = alt_nticks(); 
 4007dd4:	e0bffd15 	stw	r2,-12(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 4007dd8:	00810074 	movhi	r2,1025
 4007ddc:	10a96704 	addi	r2,r2,-23140
 4007de0:	10800017 	ldw	r2,0(r2)

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
 4007de4:	1004c03a 	cmpne	r2,r2,zero
 4007de8:	1000061e 	bne	r2,zero,4007e04 <times+0x50>
  {
    ALT_ERRNO = ENOSYS;
 4007dec:	4007e480 	call	4007e48 <alt_get_errno>
 4007df0:	1007883a 	mov	r3,r2
 4007df4:	00801604 	movi	r2,88
 4007df8:	18800015 	stw	r2,0(r3)
    return 0;
 4007dfc:	e03fff15 	stw	zero,-4(fp)
 4007e00:	00000b06 	br	4007e30 <times+0x7c>
  }

  /* Otherwise return the elapsed time */

  buf->tms_utime  = 0;
 4007e04:	e0bffe17 	ldw	r2,-8(fp)
 4007e08:	10000015 	stw	zero,0(r2)
  buf->tms_stime  = ticks;
 4007e0c:	e0fffe17 	ldw	r3,-8(fp)
 4007e10:	e0bffd17 	ldw	r2,-12(fp)
 4007e14:	18800115 	stw	r2,4(r3)
  buf->tms_cutime = 0;
 4007e18:	e0bffe17 	ldw	r2,-8(fp)
 4007e1c:	10000215 	stw	zero,8(r2)
  buf->tms_cstime = 0;
 4007e20:	e0bffe17 	ldw	r2,-8(fp)
 4007e24:	10000315 	stw	zero,12(r2)

  return ticks;
 4007e28:	e0bffd17 	ldw	r2,-12(fp)
 4007e2c:	e0bfff15 	stw	r2,-4(fp)
 4007e30:	e0bfff17 	ldw	r2,-4(fp)
}
 4007e34:	e037883a 	mov	sp,fp
 4007e38:	dfc00117 	ldw	ra,4(sp)
 4007e3c:	df000017 	ldw	fp,0(sp)
 4007e40:	dec00204 	addi	sp,sp,8
 4007e44:	f800283a 	ret

04007e48 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4007e48:	defffd04 	addi	sp,sp,-12
 4007e4c:	dfc00215 	stw	ra,8(sp)
 4007e50:	df000115 	stw	fp,4(sp)
 4007e54:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 4007e58:	00810074 	movhi	r2,1025
 4007e5c:	10a7a004 	addi	r2,r2,-24960
 4007e60:	10800017 	ldw	r2,0(r2)
 4007e64:	1005003a 	cmpeq	r2,r2,zero
 4007e68:	1000061e 	bne	r2,zero,4007e84 <alt_get_errno+0x3c>
 4007e6c:	00810074 	movhi	r2,1025
 4007e70:	10a7a004 	addi	r2,r2,-24960
 4007e74:	10800017 	ldw	r2,0(r2)
 4007e78:	103ee83a 	callr	r2
 4007e7c:	e0bfff15 	stw	r2,-4(fp)
 4007e80:	00000306 	br	4007e90 <alt_get_errno+0x48>
 4007e84:	00810074 	movhi	r2,1025
 4007e88:	10a96304 	addi	r2,r2,-23156
 4007e8c:	e0bfff15 	stw	r2,-4(fp)
 4007e90:	e0bfff17 	ldw	r2,-4(fp)
}
 4007e94:	e037883a 	mov	sp,fp
 4007e98:	dfc00117 	ldw	ra,4(sp)
 4007e9c:	df000017 	ldw	fp,0(sp)
 4007ea0:	dec00204 	addi	sp,sp,8
 4007ea4:	f800283a 	ret

04007ea8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 4007ea8:	defff704 	addi	sp,sp,-36
 4007eac:	dfc00815 	stw	ra,32(sp)
 4007eb0:	df000715 	stw	fp,28(sp)
 4007eb4:	df000704 	addi	fp,sp,28
 4007eb8:	e13ffb15 	stw	r4,-20(fp)
 4007ebc:	e17ffc15 	stw	r5,-16(fp)
 4007ec0:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4007ec4:	e0bffb17 	ldw	r2,-20(fp)
 4007ec8:	1004803a 	cmplt	r2,r2,zero
 4007ecc:	1000091e 	bne	r2,zero,4007ef4 <write+0x4c>
 4007ed0:	e13ffb17 	ldw	r4,-20(fp)
 4007ed4:	01400304 	movi	r5,12
 4007ed8:	400195c0 	call	400195c <__mulsi3>
 4007edc:	1007883a 	mov	r3,r2
 4007ee0:	00810074 	movhi	r2,1025
 4007ee4:	10a73404 	addi	r2,r2,-25392
 4007ee8:	1887883a 	add	r3,r3,r2
 4007eec:	e0ffff15 	stw	r3,-4(fp)
 4007ef0:	00000106 	br	4007ef8 <write+0x50>
 4007ef4:	e03fff15 	stw	zero,-4(fp)
 4007ef8:	e0bfff17 	ldw	r2,-4(fp)
 4007efc:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 4007f00:	e0bffa17 	ldw	r2,-24(fp)
 4007f04:	1005003a 	cmpeq	r2,r2,zero
 4007f08:	1000241e 	bne	r2,zero,4007f9c <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 4007f0c:	e0bffa17 	ldw	r2,-24(fp)
 4007f10:	10800217 	ldw	r2,8(r2)
 4007f14:	108000cc 	andi	r2,r2,3
 4007f18:	1005003a 	cmpeq	r2,r2,zero
 4007f1c:	10001a1e 	bne	r2,zero,4007f88 <write+0xe0>
 4007f20:	e0bffa17 	ldw	r2,-24(fp)
 4007f24:	10800017 	ldw	r2,0(r2)
 4007f28:	10800617 	ldw	r2,24(r2)
 4007f2c:	1005003a 	cmpeq	r2,r2,zero
 4007f30:	1000151e 	bne	r2,zero,4007f88 <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 4007f34:	e0bffa17 	ldw	r2,-24(fp)
 4007f38:	10800017 	ldw	r2,0(r2)
 4007f3c:	10800617 	ldw	r2,24(r2)
 4007f40:	e17ffc17 	ldw	r5,-16(fp)
 4007f44:	e1bffd17 	ldw	r6,-12(fp)
 4007f48:	e13ffa17 	ldw	r4,-24(fp)
 4007f4c:	103ee83a 	callr	r2
 4007f50:	e0bff915 	stw	r2,-28(fp)
 4007f54:	e0bff917 	ldw	r2,-28(fp)
 4007f58:	1004403a 	cmpge	r2,r2,zero
 4007f5c:	1000071e 	bne	r2,zero,4007f7c <write+0xd4>
      {
        ALT_ERRNO = -rval;
 4007f60:	4007fcc0 	call	4007fcc <alt_get_errno>
 4007f64:	e0fff917 	ldw	r3,-28(fp)
 4007f68:	00c7c83a 	sub	r3,zero,r3
 4007f6c:	10c00015 	stw	r3,0(r2)
        return -1;
 4007f70:	00bfffc4 	movi	r2,-1
 4007f74:	e0bffe15 	stw	r2,-8(fp)
 4007f78:	00000e06 	br	4007fb4 <write+0x10c>
      }
      return rval;
 4007f7c:	e0bff917 	ldw	r2,-28(fp)
 4007f80:	e0bffe15 	stw	r2,-8(fp)
 4007f84:	00000b06 	br	4007fb4 <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
 4007f88:	4007fcc0 	call	4007fcc <alt_get_errno>
 4007f8c:	1007883a 	mov	r3,r2
 4007f90:	00800344 	movi	r2,13
 4007f94:	18800015 	stw	r2,0(r3)
 4007f98:	00000406 	br	4007fac <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 4007f9c:	4007fcc0 	call	4007fcc <alt_get_errno>
 4007fa0:	1007883a 	mov	r3,r2
 4007fa4:	00801444 	movi	r2,81
 4007fa8:	18800015 	stw	r2,0(r3)
  }
  return -1;
 4007fac:	00bfffc4 	movi	r2,-1
 4007fb0:	e0bffe15 	stw	r2,-8(fp)
 4007fb4:	e0bffe17 	ldw	r2,-8(fp)
}
 4007fb8:	e037883a 	mov	sp,fp
 4007fbc:	dfc00117 	ldw	ra,4(sp)
 4007fc0:	df000017 	ldw	fp,0(sp)
 4007fc4:	dec00204 	addi	sp,sp,8
 4007fc8:	f800283a 	ret

04007fcc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4007fcc:	defffd04 	addi	sp,sp,-12
 4007fd0:	dfc00215 	stw	ra,8(sp)
 4007fd4:	df000115 	stw	fp,4(sp)
 4007fd8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 4007fdc:	00810074 	movhi	r2,1025
 4007fe0:	10a7a004 	addi	r2,r2,-24960
 4007fe4:	10800017 	ldw	r2,0(r2)
 4007fe8:	1005003a 	cmpeq	r2,r2,zero
 4007fec:	1000061e 	bne	r2,zero,4008008 <alt_get_errno+0x3c>
 4007ff0:	00810074 	movhi	r2,1025
 4007ff4:	10a7a004 	addi	r2,r2,-24960
 4007ff8:	10800017 	ldw	r2,0(r2)
 4007ffc:	103ee83a 	callr	r2
 4008000:	e0bfff15 	stw	r2,-4(fp)
 4008004:	00000306 	br	4008014 <alt_get_errno+0x48>
 4008008:	00810074 	movhi	r2,1025
 400800c:	10a96304 	addi	r2,r2,-23156
 4008010:	e0bfff15 	stw	r2,-4(fp)
 4008014:	e0bfff17 	ldw	r2,-4(fp)
}
 4008018:	e037883a 	mov	sp,fp
 400801c:	dfc00117 	ldw	ra,4(sp)
 4008020:	df000017 	ldw	fp,0(sp)
 4008024:	dec00204 	addi	sp,sp,8
 4008028:	f800283a 	ret

0400802c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 400802c:	defffd04 	addi	sp,sp,-12
 4008030:	dfc00215 	stw	ra,8(sp)
 4008034:	df000115 	stw	fp,4(sp)
 4008038:	df000104 	addi	fp,sp,4
 400803c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
 4008040:	4008e9c0 	call	4008e9c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 4008044:	00800044 	movi	r2,1
 4008048:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 400804c:	e037883a 	mov	sp,fp
 4008050:	dfc00117 	ldw	ra,4(sp)
 4008054:	df000017 	ldw	fp,0(sp)
 4008058:	dec00204 	addi	sp,sp,8
 400805c:	f800283a 	ret

04008060 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 4008060:	defffe04 	addi	sp,sp,-8
 4008064:	dfc00115 	stw	ra,4(sp)
 4008068:	df000015 	stw	fp,0(sp)
 400806c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
 4008070:	01020034 	movhi	r4,2048
 4008074:	21040004 	addi	r4,r4,4096
 4008078:	000b883a 	mov	r5,zero
 400807c:	01800044 	movi	r6,1
 4008080:	01c0fa04 	movi	r7,1000
 4008084:	40083a80 	call	40083a8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 4008088:	01010074 	movhi	r4,1025
 400808c:	21271f04 	addi	r4,r4,-25476
 4008090:	40080a80 	call	40080a8 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
}
 4008094:	e037883a 	mov	sp,fp
 4008098:	dfc00117 	ldw	ra,4(sp)
 400809c:	df000017 	ldw	fp,0(sp)
 40080a0:	dec00204 	addi	sp,sp,8
 40080a4:	f800283a 	ret

040080a8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 40080a8:	defffd04 	addi	sp,sp,-12
 40080ac:	dfc00215 	stw	ra,8(sp)
 40080b0:	df000115 	stw	fp,4(sp)
 40080b4:	df000104 	addi	fp,sp,4
 40080b8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 40080bc:	e13fff17 	ldw	r4,-4(fp)
 40080c0:	01410074 	movhi	r5,1025
 40080c4:	29679d04 	addi	r5,r5,-24972
 40080c8:	40085e00 	call	40085e0 <alt_dev_llist_insert>
}
 40080cc:	e037883a 	mov	sp,fp
 40080d0:	dfc00117 	ldw	ra,4(sp)
 40080d4:	df000017 	ldw	fp,0(sp)
 40080d8:	dec00204 	addi	sp,sp,8
 40080dc:	f800283a 	ret

040080e0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 40080e0:	defffa04 	addi	sp,sp,-24
 40080e4:	dfc00515 	stw	ra,20(sp)
 40080e8:	df000415 	stw	fp,16(sp)
 40080ec:	df000404 	addi	fp,sp,16
 40080f0:	e13ffd15 	stw	r4,-12(fp)
 40080f4:	e17ffe15 	stw	r5,-8(fp)
 40080f8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 40080fc:	e0bffd17 	ldw	r2,-12(fp)
 4008100:	10800017 	ldw	r2,0(r2)
 4008104:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 4008108:	e0bffc17 	ldw	r2,-16(fp)
 400810c:	11000a04 	addi	r4,r2,40
 4008110:	e0bffd17 	ldw	r2,-12(fp)
 4008114:	11c00217 	ldw	r7,8(r2)
 4008118:	e17ffe17 	ldw	r5,-8(fp)
 400811c:	e1bfff17 	ldw	r6,-4(fp)
 4008120:	40081900 	call	4008190 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 4008124:	e037883a 	mov	sp,fp
 4008128:	dfc00117 	ldw	ra,4(sp)
 400812c:	df000017 	ldw	fp,0(sp)
 4008130:	dec00204 	addi	sp,sp,8
 4008134:	f800283a 	ret

04008138 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 4008138:	defffa04 	addi	sp,sp,-24
 400813c:	dfc00515 	stw	ra,20(sp)
 4008140:	df000415 	stw	fp,16(sp)
 4008144:	df000404 	addi	fp,sp,16
 4008148:	e13ffd15 	stw	r4,-12(fp)
 400814c:	e17ffe15 	stw	r5,-8(fp)
 4008150:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4008154:	e0bffd17 	ldw	r2,-12(fp)
 4008158:	10800017 	ldw	r2,0(r2)
 400815c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 4008160:	e0bffc17 	ldw	r2,-16(fp)
 4008164:	11000a04 	addi	r4,r2,40
 4008168:	e0bffd17 	ldw	r2,-12(fp)
 400816c:	11c00217 	ldw	r7,8(r2)
 4008170:	e17ffe17 	ldw	r5,-8(fp)
 4008174:	e1bfff17 	ldw	r6,-4(fp)
 4008178:	40082940 	call	4008294 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 400817c:	e037883a 	mov	sp,fp
 4008180:	dfc00117 	ldw	ra,4(sp)
 4008184:	df000017 	ldw	fp,0(sp)
 4008188:	dec00204 	addi	sp,sp,8
 400818c:	f800283a 	ret

04008190 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
 4008190:	defff604 	addi	sp,sp,-40
 4008194:	df000915 	stw	fp,36(sp)
 4008198:	df000904 	addi	fp,sp,36
 400819c:	e13ffb15 	stw	r4,-20(fp)
 40081a0:	e17ffc15 	stw	r5,-16(fp)
 40081a4:	e1bffd15 	stw	r6,-12(fp)
 40081a8:	e1fffe15 	stw	r7,-8(fp)
  unsigned int base = sp->base;
 40081ac:	e0bffb17 	ldw	r2,-20(fp)
 40081b0:	10800017 	ldw	r2,0(r2)
 40081b4:	e0bffa15 	stw	r2,-24(fp)

  char * ptr = buffer;
 40081b8:	e0bffc17 	ldw	r2,-16(fp)
 40081bc:	e0bff915 	stw	r2,-28(fp)
  char * end = buffer + space;
 40081c0:	e0bffd17 	ldw	r2,-12(fp)
 40081c4:	1007883a 	mov	r3,r2
 40081c8:	e0bffc17 	ldw	r2,-16(fp)
 40081cc:	10c5883a 	add	r2,r2,r3
 40081d0:	e0bff815 	stw	r2,-32(fp)

  while (ptr < end)
 40081d4:	00001606 	br	4008230 <altera_avalon_jtag_uart_read+0xa0>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 40081d8:	e0bffa17 	ldw	r2,-24(fp)
 40081dc:	10800037 	ldwio	r2,0(r2)
 40081e0:	e0bff715 	stw	r2,-36(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
 40081e4:	e0bff717 	ldw	r2,-36(fp)
 40081e8:	10a0000c 	andi	r2,r2,32768
 40081ec:	1005003a 	cmpeq	r2,r2,zero
 40081f0:	1000081e 	bne	r2,zero,4008214 <altera_avalon_jtag_uart_read+0x84>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 40081f4:	e0bff717 	ldw	r2,-36(fp)
 40081f8:	1007883a 	mov	r3,r2
 40081fc:	e0bff917 	ldw	r2,-28(fp)
 4008200:	10c00005 	stb	r3,0(r2)
 4008204:	e0bff917 	ldw	r2,-28(fp)
 4008208:	10800044 	addi	r2,r2,1
 400820c:	e0bff915 	stw	r2,-28(fp)
 4008210:	00000706 	br	4008230 <altera_avalon_jtag_uart_read+0xa0>
    else if (ptr != buffer)
 4008214:	e0fff917 	ldw	r3,-28(fp)
 4008218:	e0bffc17 	ldw	r2,-16(fp)
 400821c:	1880071e 	bne	r3,r2,400823c <altera_avalon_jtag_uart_read+0xac>
      break;
    else if(flags & O_NONBLOCK)
 4008220:	e0bffe17 	ldw	r2,-8(fp)
 4008224:	1090000c 	andi	r2,r2,16384
 4008228:	1004c03a 	cmpne	r2,r2,zero
 400822c:	1000031e 	bne	r2,zero,400823c <altera_avalon_jtag_uart_read+0xac>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
 4008230:	e0fff917 	ldw	r3,-28(fp)
 4008234:	e0bff817 	ldw	r2,-32(fp)
 4008238:	18bfe736 	bltu	r3,r2,40081d8 <altera_avalon_jtag_uart_read+0x48>
    else if(flags & O_NONBLOCK)
      break;   
    
  }

  if (ptr != buffer)
 400823c:	e0fff917 	ldw	r3,-28(fp)
 4008240:	e0bffc17 	ldw	r2,-16(fp)
 4008244:	18800526 	beq	r3,r2,400825c <altera_avalon_jtag_uart_read+0xcc>
    return ptr - buffer;
 4008248:	e0fff917 	ldw	r3,-28(fp)
 400824c:	e0bffc17 	ldw	r2,-16(fp)
 4008250:	1887c83a 	sub	r3,r3,r2
 4008254:	e0ffff15 	stw	r3,-4(fp)
 4008258:	00000906 	br	4008280 <altera_avalon_jtag_uart_read+0xf0>
  else if (flags & O_NONBLOCK)
 400825c:	e0bffe17 	ldw	r2,-8(fp)
 4008260:	1090000c 	andi	r2,r2,16384
 4008264:	1005003a 	cmpeq	r2,r2,zero
 4008268:	1000031e 	bne	r2,zero,4008278 <altera_avalon_jtag_uart_read+0xe8>
    return -EWOULDBLOCK;
 400826c:	00bffd44 	movi	r2,-11
 4008270:	e0bfff15 	stw	r2,-4(fp)
 4008274:	00000206 	br	4008280 <altera_avalon_jtag_uart_read+0xf0>
  else
    return -EIO;
 4008278:	00bffec4 	movi	r2,-5
 400827c:	e0bfff15 	stw	r2,-4(fp)
 4008280:	e0bfff17 	ldw	r2,-4(fp)
}
 4008284:	e037883a 	mov	sp,fp
 4008288:	df000017 	ldw	fp,0(sp)
 400828c:	dec00104 	addi	sp,sp,4
 4008290:	f800283a 	ret

04008294 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 4008294:	defff904 	addi	sp,sp,-28
 4008298:	df000615 	stw	fp,24(sp)
 400829c:	df000604 	addi	fp,sp,24
 40082a0:	e13ffc15 	stw	r4,-16(fp)
 40082a4:	e17ffd15 	stw	r5,-12(fp)
 40082a8:	e1bffe15 	stw	r6,-8(fp)
 40082ac:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
 40082b0:	e0bffc17 	ldw	r2,-16(fp)
 40082b4:	10800017 	ldw	r2,0(r2)
 40082b8:	e0bffb15 	stw	r2,-20(fp)

  const char * end = ptr + count;
 40082bc:	e0bffe17 	ldw	r2,-8(fp)
 40082c0:	1007883a 	mov	r3,r2
 40082c4:	e0bffd17 	ldw	r2,-12(fp)
 40082c8:	10c5883a 	add	r2,r2,r3
 40082cc:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
 40082d0:	00001106 	br	4008318 <altera_avalon_jtag_uart_write+0x84>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 40082d4:	e0bffb17 	ldw	r2,-20(fp)
 40082d8:	10800104 	addi	r2,r2,4
 40082dc:	10800037 	ldwio	r2,0(r2)
 40082e0:	10bfffec 	andhi	r2,r2,65535
 40082e4:	1005003a 	cmpeq	r2,r2,zero
 40082e8:	10000b1e 	bne	r2,zero,4008318 <altera_avalon_jtag_uart_write+0x84>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 40082ec:	e13ffb17 	ldw	r4,-20(fp)
 40082f0:	e0bffd17 	ldw	r2,-12(fp)
 40082f4:	10800003 	ldbu	r2,0(r2)
 40082f8:	10c03fcc 	andi	r3,r2,255
 40082fc:	18c0201c 	xori	r3,r3,128
 4008300:	18ffe004 	addi	r3,r3,-128
 4008304:	e0bffd17 	ldw	r2,-12(fp)
 4008308:	10800044 	addi	r2,r2,1
 400830c:	e0bffd15 	stw	r2,-12(fp)
 4008310:	2005883a 	mov	r2,r4
 4008314:	10c00035 	stwio	r3,0(r2)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
 4008318:	e0fffd17 	ldw	r3,-12(fp)
 400831c:	e0bffa17 	ldw	r2,-24(fp)
 4008320:	18bfec36 	bltu	r3,r2,40082d4 <altera_avalon_jtag_uart_write+0x40>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
 4008324:	e0bffe17 	ldw	r2,-8(fp)
}
 4008328:	e037883a 	mov	sp,fp
 400832c:	df000017 	ldw	fp,0(sp)
 4008330:	dec00104 	addi	sp,sp,4
 4008334:	f800283a 	ret

04008338 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 4008338:	defffa04 	addi	sp,sp,-24
 400833c:	dfc00515 	stw	ra,20(sp)
 4008340:	df000415 	stw	fp,16(sp)
 4008344:	df000404 	addi	fp,sp,16
 4008348:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 400834c:	e0bfff17 	ldw	r2,-4(fp)
 4008350:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 4008354:	e0bfff17 	ldw	r2,-4(fp)
 4008358:	10800104 	addi	r2,r2,4
 400835c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4008360:	0005303a 	rdctl	r2,status
 4008364:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4008368:	e0fffd17 	ldw	r3,-12(fp)
 400836c:	00bfff84 	movi	r2,-2
 4008370:	1884703a 	and	r2,r3,r2
 4008374:	1001703a 	wrctl	status,r2
  
  return context;
 4008378:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 400837c:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
 4008380:	4007ca80 	call	4007ca8 <alt_tick>
 4008384:	e0bffe17 	ldw	r2,-8(fp)
 4008388:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400838c:	e0bffc17 	ldw	r2,-16(fp)
 4008390:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 4008394:	e037883a 	mov	sp,fp
 4008398:	dfc00117 	ldw	ra,4(sp)
 400839c:	df000017 	ldw	fp,0(sp)
 40083a0:	dec00204 	addi	sp,sp,8
 40083a4:	f800283a 	ret

040083a8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 40083a8:	defff804 	addi	sp,sp,-32
 40083ac:	dfc00715 	stw	ra,28(sp)
 40083b0:	df000615 	stw	fp,24(sp)
 40083b4:	df000604 	addi	fp,sp,24
 40083b8:	e13ffc15 	stw	r4,-16(fp)
 40083bc:	e17ffd15 	stw	r5,-12(fp)
 40083c0:	e1bffe15 	stw	r6,-8(fp)
 40083c4:	e1ffff15 	stw	r7,-4(fp)
 40083c8:	e0bfff17 	ldw	r2,-4(fp)
 40083cc:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 40083d0:	00810074 	movhi	r2,1025
 40083d4:	10a96704 	addi	r2,r2,-23140
 40083d8:	10800017 	ldw	r2,0(r2)
 40083dc:	1004c03a 	cmpne	r2,r2,zero
 40083e0:	1000041e 	bne	r2,zero,40083f4 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
 40083e4:	00c10074 	movhi	r3,1025
 40083e8:	18e96704 	addi	r3,r3,-23140
 40083ec:	e0bffb17 	ldw	r2,-20(fp)
 40083f0:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 40083f4:	e0bffc17 	ldw	r2,-16(fp)
 40083f8:	10800104 	addi	r2,r2,4
 40083fc:	1007883a 	mov	r3,r2
 4008400:	008001c4 	movi	r2,7
 4008404:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 4008408:	d8000015 	stw	zero,0(sp)
 400840c:	e13ffd17 	ldw	r4,-12(fp)
 4008410:	e17ffe17 	ldw	r5,-8(fp)
 4008414:	01810074 	movhi	r6,1025
 4008418:	31a0ce04 	addi	r6,r6,-31944
 400841c:	e1fffc17 	ldw	r7,-16(fp)
 4008420:	40087240 	call	4008724 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 4008424:	e037883a 	mov	sp,fp
 4008428:	dfc00117 	ldw	ra,4(sp)
 400842c:	df000017 	ldw	fp,0(sp)
 4008430:	dec00204 	addi	sp,sp,8
 4008434:	f800283a 	ret

04008438 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 4008438:	defff804 	addi	sp,sp,-32
 400843c:	dfc00715 	stw	ra,28(sp)
 4008440:	df000615 	stw	fp,24(sp)
 4008444:	df000604 	addi	fp,sp,24
 4008448:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 400844c:	e0bffc17 	ldw	r2,-16(fp)
 4008450:	1004803a 	cmplt	r2,r2,zero
 4008454:	1000091e 	bne	r2,zero,400847c <close+0x44>
 4008458:	e13ffc17 	ldw	r4,-16(fp)
 400845c:	01400304 	movi	r5,12
 4008460:	400195c0 	call	400195c <__mulsi3>
 4008464:	1007883a 	mov	r3,r2
 4008468:	00810074 	movhi	r2,1025
 400846c:	10a73404 	addi	r2,r2,-25392
 4008470:	1887883a 	add	r3,r3,r2
 4008474:	e0ffff15 	stw	r3,-4(fp)
 4008478:	00000106 	br	4008480 <close+0x48>
 400847c:	e03fff15 	stw	zero,-4(fp)
 4008480:	e0bfff17 	ldw	r2,-4(fp)
 4008484:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 4008488:	e0bffb17 	ldw	r2,-20(fp)
 400848c:	1005003a 	cmpeq	r2,r2,zero
 4008490:	10001d1e 	bne	r2,zero,4008508 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 4008494:	e0bffb17 	ldw	r2,-20(fp)
 4008498:	10800017 	ldw	r2,0(r2)
 400849c:	10800417 	ldw	r2,16(r2)
 40084a0:	1005003a 	cmpeq	r2,r2,zero
 40084a4:	1000071e 	bne	r2,zero,40084c4 <close+0x8c>
 40084a8:	e0bffb17 	ldw	r2,-20(fp)
 40084ac:	10800017 	ldw	r2,0(r2)
 40084b0:	10800417 	ldw	r2,16(r2)
 40084b4:	e13ffb17 	ldw	r4,-20(fp)
 40084b8:	103ee83a 	callr	r2
 40084bc:	e0bffe15 	stw	r2,-8(fp)
 40084c0:	00000106 	br	40084c8 <close+0x90>
 40084c4:	e03ffe15 	stw	zero,-8(fp)
 40084c8:	e0bffe17 	ldw	r2,-8(fp)
 40084cc:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 40084d0:	e13ffc17 	ldw	r4,-16(fp)
 40084d4:	4008e240 	call	4008e24 <alt_release_fd>
    if (rval < 0)
 40084d8:	e0bffa17 	ldw	r2,-24(fp)
 40084dc:	1004403a 	cmpge	r2,r2,zero
 40084e0:	1000071e 	bne	r2,zero,4008500 <close+0xc8>
    {
      ALT_ERRNO = -rval;
 40084e4:	40085380 	call	4008538 <alt_get_errno>
 40084e8:	e0fffa17 	ldw	r3,-24(fp)
 40084ec:	00c7c83a 	sub	r3,zero,r3
 40084f0:	10c00015 	stw	r3,0(r2)
      return -1;
 40084f4:	00bfffc4 	movi	r2,-1
 40084f8:	e0bffd15 	stw	r2,-12(fp)
 40084fc:	00000806 	br	4008520 <close+0xe8>
    }
    return 0;
 4008500:	e03ffd15 	stw	zero,-12(fp)
 4008504:	00000606 	br	4008520 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4008508:	40085380 	call	4008538 <alt_get_errno>
 400850c:	1007883a 	mov	r3,r2
 4008510:	00801444 	movi	r2,81
 4008514:	18800015 	stw	r2,0(r3)
    return -1;
 4008518:	00bfffc4 	movi	r2,-1
 400851c:	e0bffd15 	stw	r2,-12(fp)
 4008520:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 4008524:	e037883a 	mov	sp,fp
 4008528:	dfc00117 	ldw	ra,4(sp)
 400852c:	df000017 	ldw	fp,0(sp)
 4008530:	dec00204 	addi	sp,sp,8
 4008534:	f800283a 	ret

04008538 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4008538:	defffd04 	addi	sp,sp,-12
 400853c:	dfc00215 	stw	ra,8(sp)
 4008540:	df000115 	stw	fp,4(sp)
 4008544:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 4008548:	00810074 	movhi	r2,1025
 400854c:	10a7a004 	addi	r2,r2,-24960
 4008550:	10800017 	ldw	r2,0(r2)
 4008554:	1005003a 	cmpeq	r2,r2,zero
 4008558:	1000061e 	bne	r2,zero,4008574 <alt_get_errno+0x3c>
 400855c:	00810074 	movhi	r2,1025
 4008560:	10a7a004 	addi	r2,r2,-24960
 4008564:	10800017 	ldw	r2,0(r2)
 4008568:	103ee83a 	callr	r2
 400856c:	e0bfff15 	stw	r2,-4(fp)
 4008570:	00000306 	br	4008580 <alt_get_errno+0x48>
 4008574:	00810074 	movhi	r2,1025
 4008578:	10a96304 	addi	r2,r2,-23156
 400857c:	e0bfff15 	stw	r2,-4(fp)
 4008580:	e0bfff17 	ldw	r2,-4(fp)
}
 4008584:	e037883a 	mov	sp,fp
 4008588:	dfc00117 	ldw	ra,4(sp)
 400858c:	df000017 	ldw	fp,0(sp)
 4008590:	dec00204 	addi	sp,sp,8
 4008594:	f800283a 	ret

04008598 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 4008598:	deffff04 	addi	sp,sp,-4
 400859c:	df000015 	stw	fp,0(sp)
 40085a0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 40085a4:	e037883a 	mov	sp,fp
 40085a8:	df000017 	ldw	fp,0(sp)
 40085ac:	dec00104 	addi	sp,sp,4
 40085b0:	f800283a 	ret

040085b4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 40085b4:	defffc04 	addi	sp,sp,-16
 40085b8:	df000315 	stw	fp,12(sp)
 40085bc:	df000304 	addi	fp,sp,12
 40085c0:	e13ffd15 	stw	r4,-12(fp)
 40085c4:	e17ffe15 	stw	r5,-8(fp)
 40085c8:	e1bfff15 	stw	r6,-4(fp)
  return len;
 40085cc:	e0bfff17 	ldw	r2,-4(fp)
}
 40085d0:	e037883a 	mov	sp,fp
 40085d4:	df000017 	ldw	fp,0(sp)
 40085d8:	dec00104 	addi	sp,sp,4
 40085dc:	f800283a 	ret

040085e0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 40085e0:	defff904 	addi	sp,sp,-28
 40085e4:	dfc00615 	stw	ra,24(sp)
 40085e8:	df000515 	stw	fp,20(sp)
 40085ec:	df000504 	addi	fp,sp,20
 40085f0:	e13ffd15 	stw	r4,-12(fp)
 40085f4:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 40085f8:	e0bffd17 	ldw	r2,-12(fp)
 40085fc:	1005003a 	cmpeq	r2,r2,zero
 4008600:	1000041e 	bne	r2,zero,4008614 <alt_dev_llist_insert+0x34>
 4008604:	e0bffd17 	ldw	r2,-12(fp)
 4008608:	10800217 	ldw	r2,8(r2)
 400860c:	1004c03a 	cmpne	r2,r2,zero
 4008610:	1000071e 	bne	r2,zero,4008630 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 4008614:	40086940 	call	4008694 <alt_get_errno>
 4008618:	1007883a 	mov	r3,r2
 400861c:	00800584 	movi	r2,22
 4008620:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 4008624:	00bffa84 	movi	r2,-22
 4008628:	e0bfff15 	stw	r2,-4(fp)
 400862c:	00001306 	br	400867c <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 4008630:	e0fffd17 	ldw	r3,-12(fp)
 4008634:	e0bffe17 	ldw	r2,-8(fp)
 4008638:	e0bffb15 	stw	r2,-20(fp)
 400863c:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4008640:	e0fffc17 	ldw	r3,-16(fp)
 4008644:	e0bffb17 	ldw	r2,-20(fp)
 4008648:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 400864c:	e0bffb17 	ldw	r2,-20(fp)
 4008650:	10c00017 	ldw	r3,0(r2)
 4008654:	e0bffc17 	ldw	r2,-16(fp)
 4008658:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 400865c:	e0bffb17 	ldw	r2,-20(fp)
 4008660:	10c00017 	ldw	r3,0(r2)
 4008664:	e0bffc17 	ldw	r2,-16(fp)
 4008668:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 400866c:	e0fffb17 	ldw	r3,-20(fp)
 4008670:	e0bffc17 	ldw	r2,-16(fp)
 4008674:	18800015 	stw	r2,0(r3)

  return 0;  
 4008678:	e03fff15 	stw	zero,-4(fp)
 400867c:	e0bfff17 	ldw	r2,-4(fp)
}
 4008680:	e037883a 	mov	sp,fp
 4008684:	dfc00117 	ldw	ra,4(sp)
 4008688:	df000017 	ldw	fp,0(sp)
 400868c:	dec00204 	addi	sp,sp,8
 4008690:	f800283a 	ret

04008694 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4008694:	defffd04 	addi	sp,sp,-12
 4008698:	dfc00215 	stw	ra,8(sp)
 400869c:	df000115 	stw	fp,4(sp)
 40086a0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 40086a4:	00810074 	movhi	r2,1025
 40086a8:	10a7a004 	addi	r2,r2,-24960
 40086ac:	10800017 	ldw	r2,0(r2)
 40086b0:	1005003a 	cmpeq	r2,r2,zero
 40086b4:	1000061e 	bne	r2,zero,40086d0 <alt_get_errno+0x3c>
 40086b8:	00810074 	movhi	r2,1025
 40086bc:	10a7a004 	addi	r2,r2,-24960
 40086c0:	10800017 	ldw	r2,0(r2)
 40086c4:	103ee83a 	callr	r2
 40086c8:	e0bfff15 	stw	r2,-4(fp)
 40086cc:	00000306 	br	40086dc <alt_get_errno+0x48>
 40086d0:	00810074 	movhi	r2,1025
 40086d4:	10a96304 	addi	r2,r2,-23156
 40086d8:	e0bfff15 	stw	r2,-4(fp)
 40086dc:	e0bfff17 	ldw	r2,-4(fp)
}
 40086e0:	e037883a 	mov	sp,fp
 40086e4:	dfc00117 	ldw	ra,4(sp)
 40086e8:	df000017 	ldw	fp,0(sp)
 40086ec:	dec00204 	addi	sp,sp,8
 40086f0:	f800283a 	ret

040086f4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 40086f4:	defffe04 	addi	sp,sp,-8
 40086f8:	dfc00115 	stw	ra,4(sp)
 40086fc:	df000015 	stw	fp,0(sp)
 4008700:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 4008704:	0009883a 	mov	r4,zero
 4008708:	01420004 	movi	r5,2048
 400870c:	40091400 	call	4009140 <alt_icache_flush>
#endif
}
 4008710:	e037883a 	mov	sp,fp
 4008714:	dfc00117 	ldw	ra,4(sp)
 4008718:	df000017 	ldw	fp,0(sp)
 400871c:	dec00204 	addi	sp,sp,8
 4008720:	f800283a 	ret

04008724 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 4008724:	defff904 	addi	sp,sp,-28
 4008728:	dfc00615 	stw	ra,24(sp)
 400872c:	df000515 	stw	fp,20(sp)
 4008730:	df000504 	addi	fp,sp,20
 4008734:	e13ffc15 	stw	r4,-16(fp)
 4008738:	e17ffd15 	stw	r5,-12(fp)
 400873c:	e1bffe15 	stw	r6,-8(fp)
 4008740:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 4008744:	e0800217 	ldw	r2,8(fp)
 4008748:	d8800015 	stw	r2,0(sp)
 400874c:	e13ffc17 	ldw	r4,-16(fp)
 4008750:	e17ffd17 	ldw	r5,-12(fp)
 4008754:	e1bffe17 	ldw	r6,-8(fp)
 4008758:	e1ffff17 	ldw	r7,-4(fp)
 400875c:	40088f80 	call	40088f8 <alt_iic_isr_register>
}  
 4008760:	e037883a 	mov	sp,fp
 4008764:	dfc00117 	ldw	ra,4(sp)
 4008768:	df000017 	ldw	fp,0(sp)
 400876c:	dec00204 	addi	sp,sp,8
 4008770:	f800283a 	ret

04008774 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 4008774:	defff904 	addi	sp,sp,-28
 4008778:	df000615 	stw	fp,24(sp)
 400877c:	df000604 	addi	fp,sp,24
 4008780:	e13ffe15 	stw	r4,-8(fp)
 4008784:	e17fff15 	stw	r5,-4(fp)
 4008788:	e0bfff17 	ldw	r2,-4(fp)
 400878c:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4008790:	0005303a 	rdctl	r2,status
 4008794:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4008798:	e0fffb17 	ldw	r3,-20(fp)
 400879c:	00bfff84 	movi	r2,-2
 40087a0:	1884703a 	and	r2,r3,r2
 40087a4:	1001703a 	wrctl	status,r2
  
  return context;
 40087a8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 40087ac:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
 40087b0:	e0fffc17 	ldw	r3,-16(fp)
 40087b4:	00800044 	movi	r2,1
 40087b8:	10c4983a 	sll	r2,r2,r3
 40087bc:	1007883a 	mov	r3,r2
 40087c0:	00810074 	movhi	r2,1025
 40087c4:	10a96904 	addi	r2,r2,-23132
 40087c8:	10800017 	ldw	r2,0(r2)
 40087cc:	1886b03a 	or	r3,r3,r2
 40087d0:	00810074 	movhi	r2,1025
 40087d4:	10a96904 	addi	r2,r2,-23132
 40087d8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 40087dc:	00810074 	movhi	r2,1025
 40087e0:	10a96904 	addi	r2,r2,-23132
 40087e4:	10800017 	ldw	r2,0(r2)
 40087e8:	100170fa 	wrctl	ienable,r2
 40087ec:	e0bffd17 	ldw	r2,-12(fp)
 40087f0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40087f4:	e0bffa17 	ldw	r2,-24(fp)
 40087f8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 40087fc:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 4008800:	e037883a 	mov	sp,fp
 4008804:	df000017 	ldw	fp,0(sp)
 4008808:	dec00104 	addi	sp,sp,4
 400880c:	f800283a 	ret

04008810 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 4008810:	defff904 	addi	sp,sp,-28
 4008814:	df000615 	stw	fp,24(sp)
 4008818:	df000604 	addi	fp,sp,24
 400881c:	e13ffe15 	stw	r4,-8(fp)
 4008820:	e17fff15 	stw	r5,-4(fp)
 4008824:	e0bfff17 	ldw	r2,-4(fp)
 4008828:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400882c:	0005303a 	rdctl	r2,status
 4008830:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4008834:	e0fffb17 	ldw	r3,-20(fp)
 4008838:	00bfff84 	movi	r2,-2
 400883c:	1884703a 	and	r2,r3,r2
 4008840:	1001703a 	wrctl	status,r2
  
  return context;
 4008844:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4008848:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
 400884c:	e0fffc17 	ldw	r3,-16(fp)
 4008850:	00800044 	movi	r2,1
 4008854:	10c4983a 	sll	r2,r2,r3
 4008858:	0084303a 	nor	r2,zero,r2
 400885c:	1007883a 	mov	r3,r2
 4008860:	00810074 	movhi	r2,1025
 4008864:	10a96904 	addi	r2,r2,-23132
 4008868:	10800017 	ldw	r2,0(r2)
 400886c:	1886703a 	and	r3,r3,r2
 4008870:	00810074 	movhi	r2,1025
 4008874:	10a96904 	addi	r2,r2,-23132
 4008878:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 400887c:	00810074 	movhi	r2,1025
 4008880:	10a96904 	addi	r2,r2,-23132
 4008884:	10800017 	ldw	r2,0(r2)
 4008888:	100170fa 	wrctl	ienable,r2
 400888c:	e0bffd17 	ldw	r2,-12(fp)
 4008890:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4008894:	e0bffa17 	ldw	r2,-24(fp)
 4008898:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 400889c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 40088a0:	e037883a 	mov	sp,fp
 40088a4:	df000017 	ldw	fp,0(sp)
 40088a8:	dec00104 	addi	sp,sp,4
 40088ac:	f800283a 	ret

040088b0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 40088b0:	defffc04 	addi	sp,sp,-16
 40088b4:	df000315 	stw	fp,12(sp)
 40088b8:	df000304 	addi	fp,sp,12
 40088bc:	e13ffe15 	stw	r4,-8(fp)
 40088c0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 40088c4:	000530fa 	rdctl	r2,ienable
 40088c8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 40088cc:	e0ffff17 	ldw	r3,-4(fp)
 40088d0:	00800044 	movi	r2,1
 40088d4:	10c4983a 	sll	r2,r2,r3
 40088d8:	1007883a 	mov	r3,r2
 40088dc:	e0bffd17 	ldw	r2,-12(fp)
 40088e0:	1884703a 	and	r2,r3,r2
 40088e4:	1004c03a 	cmpne	r2,r2,zero
}
 40088e8:	e037883a 	mov	sp,fp
 40088ec:	df000017 	ldw	fp,0(sp)
 40088f0:	dec00104 	addi	sp,sp,4
 40088f4:	f800283a 	ret

040088f8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 40088f8:	defff404 	addi	sp,sp,-48
 40088fc:	dfc00b15 	stw	ra,44(sp)
 4008900:	df000a15 	stw	fp,40(sp)
 4008904:	df000a04 	addi	fp,sp,40
 4008908:	e13ffb15 	stw	r4,-20(fp)
 400890c:	e17ffc15 	stw	r5,-16(fp)
 4008910:	e1bffd15 	stw	r6,-12(fp)
 4008914:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
 4008918:	00bffa84 	movi	r2,-22
 400891c:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 4008920:	e0bffc17 	ldw	r2,-16(fp)
 4008924:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 4008928:	e0bff917 	ldw	r2,-28(fp)
 400892c:	10800808 	cmpgei	r2,r2,32
 4008930:	1000291e 	bne	r2,zero,40089d8 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4008934:	0005303a 	rdctl	r2,status
 4008938:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400893c:	e0fff717 	ldw	r3,-36(fp)
 4008940:	00bfff84 	movi	r2,-2
 4008944:	1884703a 	and	r2,r3,r2
 4008948:	1001703a 	wrctl	status,r2
  
  return context;
 400894c:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 4008950:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
 4008954:	e0bff917 	ldw	r2,-28(fp)
 4008958:	00c10074 	movhi	r3,1025
 400895c:	18e97404 	addi	r3,r3,-23088
 4008960:	100490fa 	slli	r2,r2,3
 4008964:	10c7883a 	add	r3,r2,r3
 4008968:	e0bffd17 	ldw	r2,-12(fp)
 400896c:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
 4008970:	e0bff917 	ldw	r2,-28(fp)
 4008974:	00c10074 	movhi	r3,1025
 4008978:	18e97404 	addi	r3,r3,-23088
 400897c:	100490fa 	slli	r2,r2,3
 4008980:	10c5883a 	add	r2,r2,r3
 4008984:	10c00104 	addi	r3,r2,4
 4008988:	e0bffe17 	ldw	r2,-8(fp)
 400898c:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 4008990:	e0bffd17 	ldw	r2,-12(fp)
 4008994:	1005003a 	cmpeq	r2,r2,zero
 4008998:	1000051e 	bne	r2,zero,40089b0 <alt_iic_isr_register+0xb8>
 400899c:	e17ff917 	ldw	r5,-28(fp)
 40089a0:	e13ffb17 	ldw	r4,-20(fp)
 40089a4:	40087740 	call	4008774 <alt_ic_irq_enable>
 40089a8:	e0bfff15 	stw	r2,-4(fp)
 40089ac:	00000406 	br	40089c0 <alt_iic_isr_register+0xc8>
 40089b0:	e17ff917 	ldw	r5,-28(fp)
 40089b4:	e13ffb17 	ldw	r4,-20(fp)
 40089b8:	40088100 	call	4008810 <alt_ic_irq_disable>
 40089bc:	e0bfff15 	stw	r2,-4(fp)
 40089c0:	e0bfff17 	ldw	r2,-4(fp)
 40089c4:	e0bffa15 	stw	r2,-24(fp)
 40089c8:	e0bff817 	ldw	r2,-32(fp)
 40089cc:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40089d0:	e0bff617 	ldw	r2,-40(fp)
 40089d4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 40089d8:	e0bffa17 	ldw	r2,-24(fp)
}
 40089dc:	e037883a 	mov	sp,fp
 40089e0:	dfc00117 	ldw	ra,4(sp)
 40089e4:	df000017 	ldw	fp,0(sp)
 40089e8:	dec00204 	addi	sp,sp,8
 40089ec:	f800283a 	ret

040089f0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 40089f0:	defff804 	addi	sp,sp,-32
 40089f4:	dfc00715 	stw	ra,28(sp)
 40089f8:	df000615 	stw	fp,24(sp)
 40089fc:	dc000515 	stw	r16,20(sp)
 4008a00:	df000504 	addi	fp,sp,20
 4008a04:	e13ffc15 	stw	r4,-16(fp)
 4008a08:	e17ffd15 	stw	r5,-12(fp)
 4008a0c:	e1bffe15 	stw	r6,-8(fp)
 4008a10:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 4008a14:	e13ffd17 	ldw	r4,-12(fp)
 4008a18:	e17ffe17 	ldw	r5,-8(fp)
 4008a1c:	e1bfff17 	ldw	r6,-4(fp)
 4008a20:	4008c380 	call	4008c38 <open>
 4008a24:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 4008a28:	e0bffb17 	ldw	r2,-20(fp)
 4008a2c:	1004803a 	cmplt	r2,r2,zero
 4008a30:	10001f1e 	bne	r2,zero,4008ab0 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
 4008a34:	e13ffb17 	ldw	r4,-20(fp)
 4008a38:	04010074 	movhi	r16,1025
 4008a3c:	84273404 	addi	r16,r16,-25392
 4008a40:	01400304 	movi	r5,12
 4008a44:	400195c0 	call	400195c <__mulsi3>
 4008a48:	1405883a 	add	r2,r2,r16
 4008a4c:	10c00017 	ldw	r3,0(r2)
 4008a50:	e0bffc17 	ldw	r2,-16(fp)
 4008a54:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 4008a58:	e13ffb17 	ldw	r4,-20(fp)
 4008a5c:	04010074 	movhi	r16,1025
 4008a60:	84273404 	addi	r16,r16,-25392
 4008a64:	01400304 	movi	r5,12
 4008a68:	400195c0 	call	400195c <__mulsi3>
 4008a6c:	1405883a 	add	r2,r2,r16
 4008a70:	10800104 	addi	r2,r2,4
 4008a74:	10c00017 	ldw	r3,0(r2)
 4008a78:	e0bffc17 	ldw	r2,-16(fp)
 4008a7c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 4008a80:	e13ffb17 	ldw	r4,-20(fp)
 4008a84:	04010074 	movhi	r16,1025
 4008a88:	84273404 	addi	r16,r16,-25392
 4008a8c:	01400304 	movi	r5,12
 4008a90:	400195c0 	call	400195c <__mulsi3>
 4008a94:	1405883a 	add	r2,r2,r16
 4008a98:	10800204 	addi	r2,r2,8
 4008a9c:	10c00017 	ldw	r3,0(r2)
 4008aa0:	e0bffc17 	ldw	r2,-16(fp)
 4008aa4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 4008aa8:	e13ffb17 	ldw	r4,-20(fp)
 4008aac:	4008e240 	call	4008e24 <alt_release_fd>
  }
} 
 4008ab0:	e037883a 	mov	sp,fp
 4008ab4:	dfc00217 	ldw	ra,8(sp)
 4008ab8:	df000117 	ldw	fp,4(sp)
 4008abc:	dc000017 	ldw	r16,0(sp)
 4008ac0:	dec00304 	addi	sp,sp,12
 4008ac4:	f800283a 	ret

04008ac8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 4008ac8:	defffb04 	addi	sp,sp,-20
 4008acc:	dfc00415 	stw	ra,16(sp)
 4008ad0:	df000315 	stw	fp,12(sp)
 4008ad4:	df000304 	addi	fp,sp,12
 4008ad8:	e13ffd15 	stw	r4,-12(fp)
 4008adc:	e17ffe15 	stw	r5,-8(fp)
 4008ae0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 4008ae4:	01010074 	movhi	r4,1025
 4008ae8:	21273704 	addi	r4,r4,-25380
 4008aec:	e17ffd17 	ldw	r5,-12(fp)
 4008af0:	01800044 	movi	r6,1
 4008af4:	01c07fc4 	movi	r7,511
 4008af8:	40089f00 	call	40089f0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 4008afc:	01010074 	movhi	r4,1025
 4008b00:	21273404 	addi	r4,r4,-25392
 4008b04:	e17ffe17 	ldw	r5,-8(fp)
 4008b08:	000d883a 	mov	r6,zero
 4008b0c:	01c07fc4 	movi	r7,511
 4008b10:	40089f00 	call	40089f0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 4008b14:	01010074 	movhi	r4,1025
 4008b18:	21273a04 	addi	r4,r4,-25368
 4008b1c:	e17fff17 	ldw	r5,-4(fp)
 4008b20:	01800044 	movi	r6,1
 4008b24:	01c07fc4 	movi	r7,511
 4008b28:	40089f00 	call	40089f0 <alt_open_fd>
}  
 4008b2c:	e037883a 	mov	sp,fp
 4008b30:	dfc00117 	ldw	ra,4(sp)
 4008b34:	df000017 	ldw	fp,0(sp)
 4008b38:	dec00204 	addi	sp,sp,8
 4008b3c:	f800283a 	ret

04008b40 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 4008b40:	defffa04 	addi	sp,sp,-24
 4008b44:	dfc00515 	stw	ra,20(sp)
 4008b48:	df000415 	stw	fp,16(sp)
 4008b4c:	dc000315 	stw	r16,12(sp)
 4008b50:	df000304 	addi	fp,sp,12
 4008b54:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 4008b58:	e0bffe17 	ldw	r2,-8(fp)
 4008b5c:	10800217 	ldw	r2,8(r2)
 4008b60:	10d00034 	orhi	r3,r2,16384
 4008b64:	e0bffe17 	ldw	r2,-8(fp)
 4008b68:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 4008b6c:	e03ffd15 	stw	zero,-12(fp)
 4008b70:	00002306 	br	4008c00 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 4008b74:	e13ffd17 	ldw	r4,-12(fp)
 4008b78:	04010074 	movhi	r16,1025
 4008b7c:	84273404 	addi	r16,r16,-25392
 4008b80:	01400304 	movi	r5,12
 4008b84:	400195c0 	call	400195c <__mulsi3>
 4008b88:	1405883a 	add	r2,r2,r16
 4008b8c:	10c00017 	ldw	r3,0(r2)
 4008b90:	e0bffe17 	ldw	r2,-8(fp)
 4008b94:	10800017 	ldw	r2,0(r2)
 4008b98:	1880161e 	bne	r3,r2,4008bf4 <alt_file_locked+0xb4>
 4008b9c:	e13ffd17 	ldw	r4,-12(fp)
 4008ba0:	04010074 	movhi	r16,1025
 4008ba4:	84273404 	addi	r16,r16,-25392
 4008ba8:	01400304 	movi	r5,12
 4008bac:	400195c0 	call	400195c <__mulsi3>
 4008bb0:	1405883a 	add	r2,r2,r16
 4008bb4:	10800204 	addi	r2,r2,8
 4008bb8:	10800017 	ldw	r2,0(r2)
 4008bbc:	1004403a 	cmpge	r2,r2,zero
 4008bc0:	10000c1e 	bne	r2,zero,4008bf4 <alt_file_locked+0xb4>
 4008bc4:	e13ffd17 	ldw	r4,-12(fp)
 4008bc8:	01400304 	movi	r5,12
 4008bcc:	400195c0 	call	400195c <__mulsi3>
 4008bd0:	1007883a 	mov	r3,r2
 4008bd4:	00810074 	movhi	r2,1025
 4008bd8:	10a73404 	addi	r2,r2,-25392
 4008bdc:	1887883a 	add	r3,r3,r2
 4008be0:	e0bffe17 	ldw	r2,-8(fp)
 4008be4:	18800326 	beq	r3,r2,4008bf4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 4008be8:	00bffcc4 	movi	r2,-13
 4008bec:	e0bfff15 	stw	r2,-4(fp)
 4008bf0:	00000a06 	br	4008c1c <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 4008bf4:	e0bffd17 	ldw	r2,-12(fp)
 4008bf8:	10800044 	addi	r2,r2,1
 4008bfc:	e0bffd15 	stw	r2,-12(fp)
 4008c00:	00810074 	movhi	r2,1025
 4008c04:	10a79f04 	addi	r2,r2,-24964
 4008c08:	10800017 	ldw	r2,0(r2)
 4008c0c:	1007883a 	mov	r3,r2
 4008c10:	e0bffd17 	ldw	r2,-12(fp)
 4008c14:	18bfd72e 	bgeu	r3,r2,4008b74 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 4008c18:	e03fff15 	stw	zero,-4(fp)
 4008c1c:	e0bfff17 	ldw	r2,-4(fp)
}
 4008c20:	e037883a 	mov	sp,fp
 4008c24:	dfc00217 	ldw	ra,8(sp)
 4008c28:	df000117 	ldw	fp,4(sp)
 4008c2c:	dc000017 	ldw	r16,0(sp)
 4008c30:	dec00304 	addi	sp,sp,12
 4008c34:	f800283a 	ret

04008c38 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 4008c38:	defff404 	addi	sp,sp,-48
 4008c3c:	dfc00b15 	stw	ra,44(sp)
 4008c40:	df000a15 	stw	fp,40(sp)
 4008c44:	df000a04 	addi	fp,sp,40
 4008c48:	e13ffb15 	stw	r4,-20(fp)
 4008c4c:	e17ffc15 	stw	r5,-16(fp)
 4008c50:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 4008c54:	00bfffc4 	movi	r2,-1
 4008c58:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 4008c5c:	00bffb44 	movi	r2,-19
 4008c60:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 4008c64:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 4008c68:	e13ffb17 	ldw	r4,-20(fp)
 4008c6c:	01410074 	movhi	r5,1025
 4008c70:	29679d04 	addi	r5,r5,-24972
 4008c74:	4008ebc0 	call	4008ebc <alt_find_dev>
 4008c78:	e0bffa15 	stw	r2,-24(fp)
 4008c7c:	e0bffa17 	ldw	r2,-24(fp)
 4008c80:	1004c03a 	cmpne	r2,r2,zero
 4008c84:	1000051e 	bne	r2,zero,4008c9c <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 4008c88:	e13ffb17 	ldw	r4,-20(fp)
 4008c8c:	4008f500 	call	4008f50 <alt_find_file>
 4008c90:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 4008c94:	00800044 	movi	r2,1
 4008c98:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 4008c9c:	e0bffa17 	ldw	r2,-24(fp)
 4008ca0:	1005003a 	cmpeq	r2,r2,zero
 4008ca4:	1000311e 	bne	r2,zero,4008d6c <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
 4008ca8:	e13ffa17 	ldw	r4,-24(fp)
 4008cac:	40090700 	call	4009070 <alt_get_fd>
 4008cb0:	e0bff815 	stw	r2,-32(fp)
 4008cb4:	e0bff817 	ldw	r2,-32(fp)
 4008cb8:	1004403a 	cmpge	r2,r2,zero
 4008cbc:	1000031e 	bne	r2,zero,4008ccc <open+0x94>
    {
      status = index;
 4008cc0:	e0bff817 	ldw	r2,-32(fp)
 4008cc4:	e0bff715 	stw	r2,-36(fp)
 4008cc8:	00002a06 	br	4008d74 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
 4008ccc:	e13ff817 	ldw	r4,-32(fp)
 4008cd0:	01400304 	movi	r5,12
 4008cd4:	400195c0 	call	400195c <__mulsi3>
 4008cd8:	1007883a 	mov	r3,r2
 4008cdc:	00810074 	movhi	r2,1025
 4008ce0:	10a73404 	addi	r2,r2,-25392
 4008ce4:	1885883a 	add	r2,r3,r2
 4008ce8:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 4008cec:	e0fffc17 	ldw	r3,-16(fp)
 4008cf0:	00900034 	movhi	r2,16384
 4008cf4:	10bfffc4 	addi	r2,r2,-1
 4008cf8:	1886703a 	and	r3,r3,r2
 4008cfc:	e0bff917 	ldw	r2,-28(fp)
 4008d00:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 4008d04:	e0bff617 	ldw	r2,-40(fp)
 4008d08:	1004c03a 	cmpne	r2,r2,zero
 4008d0c:	1000061e 	bne	r2,zero,4008d28 <open+0xf0>
 4008d10:	e13ff917 	ldw	r4,-28(fp)
 4008d14:	4008b400 	call	4008b40 <alt_file_locked>
 4008d18:	e0bff715 	stw	r2,-36(fp)
 4008d1c:	e0bff717 	ldw	r2,-36(fp)
 4008d20:	1004803a 	cmplt	r2,r2,zero
 4008d24:	1000131e 	bne	r2,zero,4008d74 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 4008d28:	e0bffa17 	ldw	r2,-24(fp)
 4008d2c:	10800317 	ldw	r2,12(r2)
 4008d30:	1005003a 	cmpeq	r2,r2,zero
 4008d34:	1000091e 	bne	r2,zero,4008d5c <open+0x124>
 4008d38:	e0bffa17 	ldw	r2,-24(fp)
 4008d3c:	10800317 	ldw	r2,12(r2)
 4008d40:	e13ff917 	ldw	r4,-28(fp)
 4008d44:	e17ffb17 	ldw	r5,-20(fp)
 4008d48:	e1bffc17 	ldw	r6,-16(fp)
 4008d4c:	e1fffd17 	ldw	r7,-12(fp)
 4008d50:	103ee83a 	callr	r2
 4008d54:	e0bfff15 	stw	r2,-4(fp)
 4008d58:	00000106 	br	4008d60 <open+0x128>
 4008d5c:	e03fff15 	stw	zero,-4(fp)
 4008d60:	e0bfff17 	ldw	r2,-4(fp)
 4008d64:	e0bff715 	stw	r2,-36(fp)
 4008d68:	00000206 	br	4008d74 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
 4008d6c:	00bffb44 	movi	r2,-19
 4008d70:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 4008d74:	e0bff717 	ldw	r2,-36(fp)
 4008d78:	1004403a 	cmpge	r2,r2,zero
 4008d7c:	1000091e 	bne	r2,zero,4008da4 <open+0x16c>
  {
    alt_release_fd (index);  
 4008d80:	e13ff817 	ldw	r4,-32(fp)
 4008d84:	4008e240 	call	4008e24 <alt_release_fd>
    ALT_ERRNO = -status;
 4008d88:	4008dc40 	call	4008dc4 <alt_get_errno>
 4008d8c:	e0fff717 	ldw	r3,-36(fp)
 4008d90:	00c7c83a 	sub	r3,zero,r3
 4008d94:	10c00015 	stw	r3,0(r2)
    return -1;
 4008d98:	00bfffc4 	movi	r2,-1
 4008d9c:	e0bffe15 	stw	r2,-8(fp)
 4008da0:	00000206 	br	4008dac <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
 4008da4:	e0bff817 	ldw	r2,-32(fp)
 4008da8:	e0bffe15 	stw	r2,-8(fp)
 4008dac:	e0bffe17 	ldw	r2,-8(fp)
}
 4008db0:	e037883a 	mov	sp,fp
 4008db4:	dfc00117 	ldw	ra,4(sp)
 4008db8:	df000017 	ldw	fp,0(sp)
 4008dbc:	dec00204 	addi	sp,sp,8
 4008dc0:	f800283a 	ret

04008dc4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4008dc4:	defffd04 	addi	sp,sp,-12
 4008dc8:	dfc00215 	stw	ra,8(sp)
 4008dcc:	df000115 	stw	fp,4(sp)
 4008dd0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 4008dd4:	00810074 	movhi	r2,1025
 4008dd8:	10a7a004 	addi	r2,r2,-24960
 4008ddc:	10800017 	ldw	r2,0(r2)
 4008de0:	1005003a 	cmpeq	r2,r2,zero
 4008de4:	1000061e 	bne	r2,zero,4008e00 <alt_get_errno+0x3c>
 4008de8:	00810074 	movhi	r2,1025
 4008dec:	10a7a004 	addi	r2,r2,-24960
 4008df0:	10800017 	ldw	r2,0(r2)
 4008df4:	103ee83a 	callr	r2
 4008df8:	e0bfff15 	stw	r2,-4(fp)
 4008dfc:	00000306 	br	4008e0c <alt_get_errno+0x48>
 4008e00:	00810074 	movhi	r2,1025
 4008e04:	10a96304 	addi	r2,r2,-23156
 4008e08:	e0bfff15 	stw	r2,-4(fp)
 4008e0c:	e0bfff17 	ldw	r2,-4(fp)
}
 4008e10:	e037883a 	mov	sp,fp
 4008e14:	dfc00117 	ldw	ra,4(sp)
 4008e18:	df000017 	ldw	fp,0(sp)
 4008e1c:	dec00204 	addi	sp,sp,8
 4008e20:	f800283a 	ret

04008e24 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 4008e24:	defffc04 	addi	sp,sp,-16
 4008e28:	dfc00315 	stw	ra,12(sp)
 4008e2c:	df000215 	stw	fp,8(sp)
 4008e30:	dc000115 	stw	r16,4(sp)
 4008e34:	df000104 	addi	fp,sp,4
 4008e38:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 4008e3c:	e0bfff17 	ldw	r2,-4(fp)
 4008e40:	108000d0 	cmplti	r2,r2,3
 4008e44:	10000f1e 	bne	r2,zero,4008e84 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
 4008e48:	e13fff17 	ldw	r4,-4(fp)
 4008e4c:	04010074 	movhi	r16,1025
 4008e50:	84273404 	addi	r16,r16,-25392
 4008e54:	01400304 	movi	r5,12
 4008e58:	400195c0 	call	400195c <__mulsi3>
 4008e5c:	1405883a 	add	r2,r2,r16
 4008e60:	10800204 	addi	r2,r2,8
 4008e64:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 4008e68:	e13fff17 	ldw	r4,-4(fp)
 4008e6c:	04010074 	movhi	r16,1025
 4008e70:	84273404 	addi	r16,r16,-25392
 4008e74:	01400304 	movi	r5,12
 4008e78:	400195c0 	call	400195c <__mulsi3>
 4008e7c:	1405883a 	add	r2,r2,r16
 4008e80:	10000015 	stw	zero,0(r2)
  }
}
 4008e84:	e037883a 	mov	sp,fp
 4008e88:	dfc00217 	ldw	ra,8(sp)
 4008e8c:	df000117 	ldw	fp,4(sp)
 4008e90:	dc000017 	ldw	r16,0(sp)
 4008e94:	dec00304 	addi	sp,sp,12
 4008e98:	f800283a 	ret

04008e9c <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 4008e9c:	deffff04 	addi	sp,sp,-4
 4008ea0:	df000015 	stw	fp,0(sp)
 4008ea4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 4008ea8:	000170fa 	wrctl	ienable,zero
}
 4008eac:	e037883a 	mov	sp,fp
 4008eb0:	df000017 	ldw	fp,0(sp)
 4008eb4:	dec00104 	addi	sp,sp,4
 4008eb8:	f800283a 	ret

04008ebc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 4008ebc:	defff904 	addi	sp,sp,-28
 4008ec0:	dfc00615 	stw	ra,24(sp)
 4008ec4:	df000515 	stw	fp,20(sp)
 4008ec8:	df000504 	addi	fp,sp,20
 4008ecc:	e13ffd15 	stw	r4,-12(fp)
 4008ed0:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 4008ed4:	e0bffe17 	ldw	r2,-8(fp)
 4008ed8:	10800017 	ldw	r2,0(r2)
 4008edc:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 4008ee0:	e13ffd17 	ldw	r4,-12(fp)
 4008ee4:	4002cec0 	call	4002cec <strlen>
 4008ee8:	10800044 	addi	r2,r2,1
 4008eec:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4008ef0:	00000d06 	br	4008f28 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 4008ef4:	e0bffc17 	ldw	r2,-16(fp)
 4008ef8:	11000217 	ldw	r4,8(r2)
 4008efc:	e1bffb17 	ldw	r6,-20(fp)
 4008f00:	e17ffd17 	ldw	r5,-12(fp)
 4008f04:	40092780 	call	4009278 <memcmp>
 4008f08:	1004c03a 	cmpne	r2,r2,zero
 4008f0c:	1000031e 	bne	r2,zero,4008f1c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 4008f10:	e0bffc17 	ldw	r2,-16(fp)
 4008f14:	e0bfff15 	stw	r2,-4(fp)
 4008f18:	00000706 	br	4008f38 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 4008f1c:	e0bffc17 	ldw	r2,-16(fp)
 4008f20:	10800017 	ldw	r2,0(r2)
 4008f24:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4008f28:	e0fffe17 	ldw	r3,-8(fp)
 4008f2c:	e0bffc17 	ldw	r2,-16(fp)
 4008f30:	10fff01e 	bne	r2,r3,4008ef4 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 4008f34:	e03fff15 	stw	zero,-4(fp)
 4008f38:	e0bfff17 	ldw	r2,-4(fp)
}
 4008f3c:	e037883a 	mov	sp,fp
 4008f40:	dfc00117 	ldw	ra,4(sp)
 4008f44:	df000017 	ldw	fp,0(sp)
 4008f48:	dec00204 	addi	sp,sp,8
 4008f4c:	f800283a 	ret

04008f50 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 4008f50:	defffa04 	addi	sp,sp,-24
 4008f54:	dfc00515 	stw	ra,20(sp)
 4008f58:	df000415 	stw	fp,16(sp)
 4008f5c:	df000404 	addi	fp,sp,16
 4008f60:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 4008f64:	00810074 	movhi	r2,1025
 4008f68:	10a79b04 	addi	r2,r2,-24980
 4008f6c:	10800017 	ldw	r2,0(r2)
 4008f70:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 4008f74:	00003306 	br	4009044 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 4008f78:	e0bffd17 	ldw	r2,-12(fp)
 4008f7c:	11000217 	ldw	r4,8(r2)
 4008f80:	4002cec0 	call	4002cec <strlen>
 4008f84:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 4008f88:	e0bffd17 	ldw	r2,-12(fp)
 4008f8c:	10c00217 	ldw	r3,8(r2)
 4008f90:	e0bffc17 	ldw	r2,-16(fp)
 4008f94:	1885883a 	add	r2,r3,r2
 4008f98:	10bfffc4 	addi	r2,r2,-1
 4008f9c:	10800003 	ldbu	r2,0(r2)
 4008fa0:	10803fcc 	andi	r2,r2,255
 4008fa4:	1080201c 	xori	r2,r2,128
 4008fa8:	10bfe004 	addi	r2,r2,-128
 4008fac:	10800bd8 	cmpnei	r2,r2,47
 4008fb0:	1000031e 	bne	r2,zero,4008fc0 <alt_find_file+0x70>
    {
      len -= 1;
 4008fb4:	e0bffc17 	ldw	r2,-16(fp)
 4008fb8:	10bfffc4 	addi	r2,r2,-1
 4008fbc:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 4008fc0:	e0bffc17 	ldw	r2,-16(fp)
 4008fc4:	1007883a 	mov	r3,r2
 4008fc8:	e0bffe17 	ldw	r2,-8(fp)
 4008fcc:	1885883a 	add	r2,r3,r2
 4008fd0:	10800003 	ldbu	r2,0(r2)
 4008fd4:	10803fcc 	andi	r2,r2,255
 4008fd8:	1080201c 	xori	r2,r2,128
 4008fdc:	10bfe004 	addi	r2,r2,-128
 4008fe0:	10800be0 	cmpeqi	r2,r2,47
 4008fe4:	10000a1e 	bne	r2,zero,4009010 <alt_find_file+0xc0>
 4008fe8:	e0bffc17 	ldw	r2,-16(fp)
 4008fec:	1007883a 	mov	r3,r2
 4008ff0:	e0bffe17 	ldw	r2,-8(fp)
 4008ff4:	1885883a 	add	r2,r3,r2
 4008ff8:	10800003 	ldbu	r2,0(r2)
 4008ffc:	10803fcc 	andi	r2,r2,255
 4009000:	1080201c 	xori	r2,r2,128
 4009004:	10bfe004 	addi	r2,r2,-128
 4009008:	1004c03a 	cmpne	r2,r2,zero
 400900c:	10000a1e 	bne	r2,zero,4009038 <alt_find_file+0xe8>
 4009010:	e0bffd17 	ldw	r2,-12(fp)
 4009014:	11000217 	ldw	r4,8(r2)
 4009018:	e1bffc17 	ldw	r6,-16(fp)
 400901c:	e17ffe17 	ldw	r5,-8(fp)
 4009020:	40092780 	call	4009278 <memcmp>
 4009024:	1004c03a 	cmpne	r2,r2,zero
 4009028:	1000031e 	bne	r2,zero,4009038 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 400902c:	e0bffd17 	ldw	r2,-12(fp)
 4009030:	e0bfff15 	stw	r2,-4(fp)
 4009034:	00000806 	br	4009058 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 4009038:	e0bffd17 	ldw	r2,-12(fp)
 400903c:	10800017 	ldw	r2,0(r2)
 4009040:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 4009044:	00c10074 	movhi	r3,1025
 4009048:	18e79b04 	addi	r3,r3,-24980
 400904c:	e0bffd17 	ldw	r2,-12(fp)
 4009050:	10ffc91e 	bne	r2,r3,4008f78 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 4009054:	e03fff15 	stw	zero,-4(fp)
 4009058:	e0bfff17 	ldw	r2,-4(fp)
}
 400905c:	e037883a 	mov	sp,fp
 4009060:	dfc00117 	ldw	ra,4(sp)
 4009064:	df000017 	ldw	fp,0(sp)
 4009068:	dec00204 	addi	sp,sp,8
 400906c:	f800283a 	ret

04009070 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 4009070:	defffa04 	addi	sp,sp,-24
 4009074:	dfc00515 	stw	ra,20(sp)
 4009078:	df000415 	stw	fp,16(sp)
 400907c:	dc000315 	stw	r16,12(sp)
 4009080:	df000304 	addi	fp,sp,12
 4009084:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 4009088:	00bffa04 	movi	r2,-24
 400908c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 4009090:	e03ffe15 	stw	zero,-8(fp)
 4009094:	00002006 	br	4009118 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
 4009098:	e13ffe17 	ldw	r4,-8(fp)
 400909c:	04010074 	movhi	r16,1025
 40090a0:	84273404 	addi	r16,r16,-25392
 40090a4:	01400304 	movi	r5,12
 40090a8:	400195c0 	call	400195c <__mulsi3>
 40090ac:	1405883a 	add	r2,r2,r16
 40090b0:	10800017 	ldw	r2,0(r2)
 40090b4:	1004c03a 	cmpne	r2,r2,zero
 40090b8:	1000141e 	bne	r2,zero,400910c <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
 40090bc:	e13ffe17 	ldw	r4,-8(fp)
 40090c0:	04010074 	movhi	r16,1025
 40090c4:	84273404 	addi	r16,r16,-25392
 40090c8:	01400304 	movi	r5,12
 40090cc:	400195c0 	call	400195c <__mulsi3>
 40090d0:	1407883a 	add	r3,r2,r16
 40090d4:	e0bfff17 	ldw	r2,-4(fp)
 40090d8:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 40090dc:	00810074 	movhi	r2,1025
 40090e0:	10a79f04 	addi	r2,r2,-24964
 40090e4:	10c00017 	ldw	r3,0(r2)
 40090e8:	e0bffe17 	ldw	r2,-8(fp)
 40090ec:	1880040e 	bge	r3,r2,4009100 <alt_get_fd+0x90>
      {
        alt_max_fd = i;
 40090f0:	00c10074 	movhi	r3,1025
 40090f4:	18e79f04 	addi	r3,r3,-24964
 40090f8:	e0bffe17 	ldw	r2,-8(fp)
 40090fc:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 4009100:	e0bffe17 	ldw	r2,-8(fp)
 4009104:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 4009108:	00000606 	br	4009124 <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 400910c:	e0bffe17 	ldw	r2,-8(fp)
 4009110:	10800044 	addi	r2,r2,1
 4009114:	e0bffe15 	stw	r2,-8(fp)
 4009118:	e0bffe17 	ldw	r2,-8(fp)
 400911c:	10800810 	cmplti	r2,r2,32
 4009120:	103fdd1e 	bne	r2,zero,4009098 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 4009124:	e0bffd17 	ldw	r2,-12(fp)
}
 4009128:	e037883a 	mov	sp,fp
 400912c:	dfc00217 	ldw	ra,8(sp)
 4009130:	df000117 	ldw	fp,4(sp)
 4009134:	dc000017 	ldw	r16,0(sp)
 4009138:	dec00304 	addi	sp,sp,12
 400913c:	f800283a 	ret

04009140 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 4009140:	defffb04 	addi	sp,sp,-20
 4009144:	df000415 	stw	fp,16(sp)
 4009148:	df000404 	addi	fp,sp,16
 400914c:	e13ffe15 	stw	r4,-8(fp)
 4009150:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 4009154:	e0bfff17 	ldw	r2,-4(fp)
 4009158:	10820070 	cmpltui	r2,r2,2049
 400915c:	1000021e 	bne	r2,zero,4009168 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 4009160:	00820004 	movi	r2,2048
 4009164:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 4009168:	e0fffe17 	ldw	r3,-8(fp)
 400916c:	e0bfff17 	ldw	r2,-4(fp)
 4009170:	1885883a 	add	r2,r3,r2
 4009174:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 4009178:	e0bffe17 	ldw	r2,-8(fp)
 400917c:	e0bffd15 	stw	r2,-12(fp)
 4009180:	00000506 	br	4009198 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 4009184:	e0bffd17 	ldw	r2,-12(fp)
 4009188:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 400918c:	e0bffd17 	ldw	r2,-12(fp)
 4009190:	10800804 	addi	r2,r2,32
 4009194:	e0bffd15 	stw	r2,-12(fp)
 4009198:	e0fffd17 	ldw	r3,-12(fp)
 400919c:	e0bffc17 	ldw	r2,-16(fp)
 40091a0:	18bff836 	bltu	r3,r2,4009184 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 40091a4:	e0bffe17 	ldw	r2,-8(fp)
 40091a8:	108007cc 	andi	r2,r2,31
 40091ac:	1005003a 	cmpeq	r2,r2,zero
 40091b0:	1000021e 	bne	r2,zero,40091bc <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 40091b4:	e0bffd17 	ldw	r2,-12(fp)
 40091b8:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 40091bc:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 40091c0:	e037883a 	mov	sp,fp
 40091c4:	df000017 	ldw	fp,0(sp)
 40091c8:	dec00104 	addi	sp,sp,4
 40091cc:	f800283a 	ret

040091d0 <exit>:
 40091d0:	defffe04 	addi	sp,sp,-8
 40091d4:	dc400015 	stw	r17,0(sp)
 40091d8:	000b883a 	mov	r5,zero
 40091dc:	2023883a 	mov	r17,r4
 40091e0:	dfc00115 	stw	ra,4(sp)
 40091e4:	40092b80 	call	40092b8 <__call_exitprocs>
 40091e8:	8809883a 	mov	r4,r17
 40091ec:	40094b40 	call	40094b4 <_exit>

040091f0 <fputs>:
 40091f0:	defffd04 	addi	sp,sp,-12
 40091f4:	dfc00215 	stw	ra,8(sp)
 40091f8:	dcc00115 	stw	r19,4(sp)
 40091fc:	dc400015 	stw	r17,0(sp)
 4009200:	2027883a 	mov	r19,r4
 4009204:	2823883a 	mov	r17,r5
 4009208:	4002cec0 	call	4002cec <strlen>
 400920c:	00c10074 	movhi	r3,1025
 4009210:	18e79404 	addi	r3,r3,-25008
 4009214:	19000017 	ldw	r4,0(r3)
 4009218:	01410034 	movhi	r5,1024
 400921c:	294f0604 	addi	r5,r5,15384
 4009220:	89400115 	stw	r5,4(r17)
 4009224:	980d883a 	mov	r6,r19
 4009228:	880b883a 	mov	r5,r17
 400922c:	100f883a 	mov	r7,r2
 4009230:	4003c180 	call	4003c18 <__sfvwrite_small_dev>
 4009234:	1007883a 	mov	r3,r2
 4009238:	00bfffc4 	movi	r2,-1
 400923c:	0009883a 	mov	r4,zero
 4009240:	18800626 	beq	r3,r2,400925c <fputs+0x6c>
 4009244:	2005883a 	mov	r2,r4
 4009248:	dfc00217 	ldw	ra,8(sp)
 400924c:	dcc00117 	ldw	r19,4(sp)
 4009250:	dc400017 	ldw	r17,0(sp)
 4009254:	dec00304 	addi	sp,sp,12
 4009258:	f800283a 	ret
 400925c:	1809883a 	mov	r4,r3
 4009260:	2005883a 	mov	r2,r4
 4009264:	dfc00217 	ldw	ra,8(sp)
 4009268:	dcc00117 	ldw	r19,4(sp)
 400926c:	dc400017 	ldw	r17,0(sp)
 4009270:	dec00304 	addi	sp,sp,12
 4009274:	f800283a 	ret

04009278 <memcmp>:
 4009278:	31ffffc4 	addi	r7,r6,-1
 400927c:	3000061e 	bne	r6,zero,4009298 <memcmp+0x20>
 4009280:	00000a06 	br	40092ac <memcmp+0x34>
 4009284:	39ffffc4 	addi	r7,r7,-1
 4009288:	00bfffc4 	movi	r2,-1
 400928c:	21000044 	addi	r4,r4,1
 4009290:	29400044 	addi	r5,r5,1
 4009294:	38800526 	beq	r7,r2,40092ac <memcmp+0x34>
 4009298:	20c00003 	ldbu	r3,0(r4)
 400929c:	28800003 	ldbu	r2,0(r5)
 40092a0:	18bff826 	beq	r3,r2,4009284 <memcmp+0xc>
 40092a4:	1885c83a 	sub	r2,r3,r2
 40092a8:	f800283a 	ret
 40092ac:	0005883a 	mov	r2,zero
 40092b0:	f800283a 	ret

040092b4 <register_fini>:
 40092b4:	f800283a 	ret

040092b8 <__call_exitprocs>:
 40092b8:	defff304 	addi	sp,sp,-52
 40092bc:	00810074 	movhi	r2,1025
 40092c0:	10a79504 	addi	r2,r2,-25004
 40092c4:	df000b15 	stw	fp,44(sp)
 40092c8:	17000017 	ldw	fp,0(r2)
 40092cc:	00810034 	movhi	r2,1024
 40092d0:	10891404 	addi	r2,r2,9296
 40092d4:	1005003a 	cmpeq	r2,r2,zero
 40092d8:	d8800215 	stw	r2,8(sp)
 40092dc:	e0800c04 	addi	r2,fp,48
 40092e0:	dd800915 	stw	r22,36(sp)
 40092e4:	dd400815 	stw	r21,32(sp)
 40092e8:	dfc00c15 	stw	ra,48(sp)
 40092ec:	ddc00a15 	stw	r23,40(sp)
 40092f0:	dd000715 	stw	r20,28(sp)
 40092f4:	dcc00615 	stw	r19,24(sp)
 40092f8:	dc800515 	stw	r18,20(sp)
 40092fc:	dc400415 	stw	r17,16(sp)
 4009300:	dc000315 	stw	r16,12(sp)
 4009304:	282d883a 	mov	r22,r5
 4009308:	d9000115 	stw	r4,4(sp)
 400930c:	d8800015 	stw	r2,0(sp)
 4009310:	282b003a 	cmpeq	r21,r5,zero
 4009314:	e4400c17 	ldw	r17,48(fp)
 4009318:	88001226 	beq	r17,zero,4009364 <__call_exitprocs+0xac>
 400931c:	ddc00017 	ldw	r23,0(sp)
 4009320:	88800117 	ldw	r2,4(r17)
 4009324:	8c802217 	ldw	r18,136(r17)
 4009328:	143fffc4 	addi	r16,r2,-1
 400932c:	80000b16 	blt	r16,zero,400935c <__call_exitprocs+0xa4>
 4009330:	9027003a 	cmpeq	r19,r18,zero
 4009334:	a800171e 	bne	r21,zero,4009394 <__call_exitprocs+0xdc>
 4009338:	9800051e 	bne	r19,zero,4009350 <__call_exitprocs+0x98>
 400933c:	8409883a 	add	r4,r16,r16
 4009340:	2105883a 	add	r2,r4,r4
 4009344:	1485883a 	add	r2,r2,r18
 4009348:	10c02017 	ldw	r3,128(r2)
 400934c:	b0c01226 	beq	r22,r3,4009398 <__call_exitprocs+0xe0>
 4009350:	843fffc4 	addi	r16,r16,-1
 4009354:	00bfffc4 	movi	r2,-1
 4009358:	80bff61e 	bne	r16,r2,4009334 <__call_exitprocs+0x7c>
 400935c:	d8800217 	ldw	r2,8(sp)
 4009360:	10003226 	beq	r2,zero,400942c <__call_exitprocs+0x174>
 4009364:	dfc00c17 	ldw	ra,48(sp)
 4009368:	df000b17 	ldw	fp,44(sp)
 400936c:	ddc00a17 	ldw	r23,40(sp)
 4009370:	dd800917 	ldw	r22,36(sp)
 4009374:	dd400817 	ldw	r21,32(sp)
 4009378:	dd000717 	ldw	r20,28(sp)
 400937c:	dcc00617 	ldw	r19,24(sp)
 4009380:	dc800517 	ldw	r18,20(sp)
 4009384:	dc400417 	ldw	r17,16(sp)
 4009388:	dc000317 	ldw	r16,12(sp)
 400938c:	dec00d04 	addi	sp,sp,52
 4009390:	f800283a 	ret
 4009394:	8409883a 	add	r4,r16,r16
 4009398:	88c00117 	ldw	r3,4(r17)
 400939c:	2105883a 	add	r2,r4,r4
 40093a0:	1445883a 	add	r2,r2,r17
 40093a4:	18ffffc4 	addi	r3,r3,-1
 40093a8:	11800217 	ldw	r6,8(r2)
 40093ac:	1c001826 	beq	r3,r16,4009410 <__call_exitprocs+0x158>
 40093b0:	10000215 	stw	zero,8(r2)
 40093b4:	303fe626 	beq	r6,zero,4009350 <__call_exitprocs+0x98>
 40093b8:	8d000117 	ldw	r20,4(r17)
 40093bc:	9800121e 	bne	r19,zero,4009408 <__call_exitprocs+0x150>
 40093c0:	00c00044 	movi	r3,1
 40093c4:	1c06983a 	sll	r3,r3,r16
 40093c8:	90804017 	ldw	r2,256(r18)
 40093cc:	1884703a 	and	r2,r3,r2
 40093d0:	10000d26 	beq	r2,zero,4009408 <__call_exitprocs+0x150>
 40093d4:	90804117 	ldw	r2,260(r18)
 40093d8:	1884703a 	and	r2,r3,r2
 40093dc:	10000e1e 	bne	r2,zero,4009418 <__call_exitprocs+0x160>
 40093e0:	2105883a 	add	r2,r4,r4
 40093e4:	1485883a 	add	r2,r2,r18
 40093e8:	11400017 	ldw	r5,0(r2)
 40093ec:	d9000117 	ldw	r4,4(sp)
 40093f0:	303ee83a 	callr	r6
 40093f4:	88800117 	ldw	r2,4(r17)
 40093f8:	a0bfc61e 	bne	r20,r2,4009314 <__call_exitprocs+0x5c>
 40093fc:	b8800017 	ldw	r2,0(r23)
 4009400:	147fd326 	beq	r2,r17,4009350 <__call_exitprocs+0x98>
 4009404:	003fc306 	br	4009314 <__call_exitprocs+0x5c>
 4009408:	303ee83a 	callr	r6
 400940c:	003ff906 	br	40093f4 <__call_exitprocs+0x13c>
 4009410:	8c000115 	stw	r16,4(r17)
 4009414:	003fe706 	br	40093b4 <__call_exitprocs+0xfc>
 4009418:	2105883a 	add	r2,r4,r4
 400941c:	1485883a 	add	r2,r2,r18
 4009420:	11000017 	ldw	r4,0(r2)
 4009424:	303ee83a 	callr	r6
 4009428:	003ff206 	br	40093f4 <__call_exitprocs+0x13c>
 400942c:	88800117 	ldw	r2,4(r17)
 4009430:	10000b1e 	bne	r2,zero,4009460 <__call_exitprocs+0x1a8>
 4009434:	89000017 	ldw	r4,0(r17)
 4009438:	20000a26 	beq	r4,zero,4009464 <__call_exitprocs+0x1ac>
 400943c:	b9000015 	stw	r4,0(r23)
 4009440:	90000226 	beq	r18,zero,400944c <__call_exitprocs+0x194>
 4009444:	9009883a 	mov	r4,r18
 4009448:	40024500 	call	4002450 <free>
 400944c:	8809883a 	mov	r4,r17
 4009450:	40024500 	call	4002450 <free>
 4009454:	bc400017 	ldw	r17,0(r23)
 4009458:	883fb11e 	bne	r17,zero,4009320 <__call_exitprocs+0x68>
 400945c:	003fc106 	br	4009364 <__call_exitprocs+0xac>
 4009460:	89000017 	ldw	r4,0(r17)
 4009464:	882f883a 	mov	r23,r17
 4009468:	2023883a 	mov	r17,r4
 400946c:	883fac1e 	bne	r17,zero,4009320 <__call_exitprocs+0x68>
 4009470:	003fbc06 	br	4009364 <__call_exitprocs+0xac>

04009474 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 4009474:	defffd04 	addi	sp,sp,-12
 4009478:	df000215 	stw	fp,8(sp)
 400947c:	df000204 	addi	fp,sp,8
 4009480:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 4009484:	e0bfff17 	ldw	r2,-4(fp)
 4009488:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 400948c:	e0bffe17 	ldw	r2,-8(fp)
 4009490:	1005003a 	cmpeq	r2,r2,zero
 4009494:	1000021e 	bne	r2,zero,40094a0 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 4009498:	002af070 	cmpltui	zero,zero,43969
 400949c:	00000106 	br	40094a4 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 40094a0:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 40094a4:	e037883a 	mov	sp,fp
 40094a8:	df000017 	ldw	fp,0(sp)
 40094ac:	dec00104 	addi	sp,sp,4
 40094b0:	f800283a 	ret

040094b4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 40094b4:	defffd04 	addi	sp,sp,-12
 40094b8:	dfc00215 	stw	ra,8(sp)
 40094bc:	df000115 	stw	fp,4(sp)
 40094c0:	df000104 	addi	fp,sp,4
 40094c4:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 40094c8:	e13fff17 	ldw	r4,-4(fp)
 40094cc:	40094740 	call	4009474 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 40094d0:	003fff06 	br	40094d0 <_exit+0x1c>
 40094d4:	040092b4 	movhi	r16,586
