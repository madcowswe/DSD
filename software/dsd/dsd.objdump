
dsd.elf:     file format elf32-littlenios2
dsd.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800184

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x000022fc memsz 0x000022fc flags r-x
    LOAD off    0x0000331c vaddr 0x0080231c paddr 0x008025fc align 2**12
         filesz 0x000002e0 memsz 0x000002e0 flags rw-
    LOAD off    0x000038dc vaddr 0x008028dc paddr 0x008028dc align 2**12
         filesz 0x00000000 memsz 0x00000124 flags rw-
    LOAD off    0x00004000 vaddr 0x00e00000 paddr 0x00e00000 align 2**12
         filesz 0x001d6490 memsz 0x001d6490 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000164  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 beeth         001d6490  00e00000  00e00000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .text         0000206c  00800184  00800184  00001184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       0000012c  008021f0  008021f0  000031f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .rwdata       000002e0  0080231c  008025fc  0000331c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  6 .bss          00000124  008028dc  008028dc  000038dc  2**2
                  ALLOC, SMALL_DATA
  7 .comment      00000023  00000000  00000000  001da490  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000270  00000000  00000000  001da4b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 0000030a  00000000  00000000  001da728  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0000333e  00000000  00000000  001daa32  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000151f  00000000  00000000  001ddd70  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00002798  00000000  00000000  001df28f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  0000037c  00000000  00000000  001e1a28  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000009a7  00000000  00000000  001e1da4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00000bd6  00000000  00000000  001e274b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000030  00000000  00000000  001e3324  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000240  00000000  00000000  001e3358  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  001e5068  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  001e506b  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  001e506e  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  001e506f  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  001e5070  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  001e5074  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  001e5078  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  001e507c  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  001e5085  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  001e508e  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000012  00000000  00000000  001e5097  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000001c  00000000  00000000  001e50a9  2**0
                  CONTENTS, READONLY
 30 .jdi          000053f2  00000000  00000000  001e50c5  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00050a42  00000000  00000000  001ea4b7  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00e00000 l    d  beeth	00000000 beeth
00800184 l    d  .text	00000000 .text
008021f0 l    d  .rodata	00000000 .rodata
0080231c l    d  .rwdata	00000000 .rwdata
008028dc l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
008001cc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 fp-bit.c
00800938 l     F .text	000001e4 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0080231c l     O .rwdata	0000002c jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00801820 l     F .text	0000003c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_close.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00801964 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00000000 l    df *ABS*	00000000 alt_open.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00802018 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 impure.c
008024f0 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 alt_exit.c
0080163c g     F .text	00000050 alt_main
00802900 g     O .bss	00000100 alt_irq
008025fc g       *ABS*	00000000 __flash_rwdata_start
00800dd0 g     F .text	00000174 __divsf3
00000000  w      *UND*	00000000 __errno
00e00000 g       beeth	00000000 _binary_beeth5_noise_bin_start
00800000 g     F .entry	0000001c __reset
00800020 g       *ABS*	00000000 __flash_exceptions_start
008028fc g     O .bss	00000004 errno
008028ec g     O .bss	00000004 alt_argv
0080a5d0 g       *ABS*	00000000 _gp
00800b1c g     F .text	00000070 __subsf3
00802370 g     O .rwdata	00000180 alt_fd_list
008001d0 g     F .text	00000028 det_status
00801dc0 g     F .text	00000094 alt_find_dev
008019f4 g     F .text	00000104 alt_io_redirect
00801708 g     F .text	0000008c altera_avalon_jtag_uart_read
00801f64 g     F .text	00000038 alt_icache_flush
008028dc g     O .bss	00000004 irqcommunicationtest
0080143c g     F .text	00000028 alt_dcache_flush
008025e4 g     O .rwdata	00000004 alt_max_fd
00800f44 g     F .text	00000078 __nesf2
008025f8 g     O .rwdata	00000004 _global_impure_ptr
00802a00 g       *ABS*	00000000 __bss_end
00801500 g     F .text	00000088 alt_iic_isr_register
00801cd0 g     F .text	000000e8 alt_tick
00801464 g     F .text	00000018 alt_ic_irq_enabled
0080022c g     F .text	00000034 det_done_isr
00801c9c g     F .text	00000034 alt_alarm_stop
008028e4 g     O .bss	00000004 alt_irq_active
008000ec g     F .exceptions	00000098 alt_irq_handler
00802348 g     O .rwdata	00000028 alt_dev_null
008012cc g     F .text	000000c8 __unpack_f
0080194c g     F .text	00000018 alt_dcache_flush_all
008025fc g       *ABS*	00000000 __ram_rwdata_end
008025dc g     O .rwdata	00000008 alt_dev_list
001d6490 g       *ABS*	00000000 _binary_beeth5_noise_bin_size
0080231c g       *ABS*	00000000 __ram_rodata_end
008028e0 g     O .bss	00000004 tempmat
00802a00 g       *ABS*	00000000 end
0080116c g     F .text	00000160 __pack_f
00c00000 g       *ABS*	00000000 __alt_stack_pointer
008017d0 g     F .text	00000050 alt_avalon_timer_sc_init
008010ec g     F .text	00000080 __clzsi2
00801794 g     F .text	0000003c altera_avalon_jtag_uart_write
0080201c g     F .text	000001bc __call_exitprocs
008001f8 g     F .text	00000034 det_result
00fd6490 g       beeth	00000000 _binary_beeth5_noise_bin_end
00800184 g     F .text	0000004c _start
008028f4 g     O .bss	00000004 _alt_tick_rate
00800548 g     F .text	000003ac detmat
008028f8 g     O .bss	00000004 _alt_nticks
0080168c g     F .text	0000003c alt_sys_init
00800fbc g     F .text	00000098 __floatsisf
0080231c g       *ABS*	00000000 __ram_rwdata_start
008021f0 g       *ABS*	00000000 __ram_rodata_start
008016f8 g     F .text	00000010 altera_avalon_jtag_uart_read_fd
00801f04 g     F .text	00000060 alt_get_fd
00801fbc g     F .text	0000003c memcmp
00802a00 g       *ABS*	00000000 __alt_stack_base
008021f0 g     O .rodata	00000010 __thenan_sf
00801e54 g     F .text	000000b0 alt_find_file
0080196c g     F .text	0000007c alt_dev_llist_insert
008028dc g       *ABS*	00000000 __bss_start
008008f4 g     F .text	00000044 main
008028f0 g     O .bss	00000004 alt_envp
008016e8 g     F .text	00000010 altera_avalon_jtag_uart_write_fd
008004a8 g     F .text	000000a0 rswap
008025e8 g     O .rwdata	00000004 alt_errno
00800bf0 g     F .text	000001e0 __mulsf3
008021f0 g       *ABS*	00000000 __flash_rodata_start
008016c8 g     F .text	00000020 alt_irq_init
00801c78 g     F .text	00000024 alt_release_fd
00802200 g     O .rodata	00000100 __clz_tab
008025f4 g     O .rwdata	00000004 _impure_ptr
008028e8 g     O .bss	00000004 alt_argc
00800000 g       *ABS*	00000000 __alt_mem_sdram_0
00800020 g       .exceptions	00000000 alt_irq_entry
008025d4 g     O .rwdata	00000008 alt_fs_list
00800020 g       *ABS*	00000000 __ram_exceptions_start
008014fc g     F .text	00000004 alt_ic_isr_register
008025fc g       *ABS*	00000000 _edata
00802a00 g       *ABS*	00000000 _end
00800184 g       *ABS*	00000000 __ram_exceptions_end
008014bc g     F .text	00000040 alt_ic_irq_disable
00800260 g     F .text	00000040 reg_isr
00801db8 g     F .text	00000008 altera_nios2_qsys_irq_init
00801f9c g     F .text	00000020 exit
00c00000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00801394 g     F .text	000000a8 __fpcmp_parts_f
008021d8 g     F .text	00000014 _exit
00801054 g     F .text	00000098 __muldi3
00801ff8 g     F .text	00000020 strlen
00801af8 g     F .text	00000180 open
008002a0 g     F .text	0000006c det_start
008019e8 g     F .text	0000000c alt_icache_flush_all
008025d0 g     O .rwdata	00000004 alt_priority_mask
0080147c g     F .text	00000040 alt_ic_irq_enable
008025ec g     O .rwdata	00000008 alt_alarm_list
0080185c g     F .text	000000f0 close
00800b8c g     F .text	00000064 __addsf3
00801588 g     F .text	000000b4 alt_load
0080030c g     F .text	0000019c det3x3
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08406114 	ori	at,at,388
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <_binary_beeth5_noise_bin_size-0x1d6490>

Disassembly of section .exceptions:

00800020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  800044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000ec0 	call	8000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000306 	br	800098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  80008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  800094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  800098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  80009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  8000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  8000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000e8:	ef80083a 	eret

008000ec <alt_irq_handler>:
  8000ec:	defffe04 	addi	sp,sp,-8
  8000f0:	dfc00115 	stw	ra,4(sp)
  8000f4:	dc000015 	stw	r16,0(sp)
  8000f8:	000b313a 	rdctl	r5,ipending
  8000fc:	2880004c 	andi	r2,r5,1
  800100:	1005003a 	cmpeq	r2,r2,zero
  800104:	04002034 	movhi	r16,128
  800108:	840a4004 	addi	r16,r16,10496
  80010c:	10001126 	beq	r2,zero,800154 <alt_irq_handler+0x68>
  800110:	00c00044 	movi	r3,1
  800114:	0009883a 	mov	r4,zero
  800118:	18c7883a 	add	r3,r3,r3
  80011c:	28c4703a 	and	r2,r5,r3
  800120:	21000044 	addi	r4,r4,1
  800124:	103ffc26 	beq	r2,zero,800118 <alt_irq_handler+0x2c>
  800128:	200490fa 	slli	r2,r4,3
  80012c:	1405883a 	add	r2,r2,r16
  800130:	11000117 	ldw	r4,4(r2)
  800134:	10c00017 	ldw	r3,0(r2)
  800138:	183ee83a 	callr	r3
  80013c:	0005313a 	rdctl	r2,ipending
  800140:	10000c26 	beq	r2,zero,800174 <alt_irq_handler+0x88>
  800144:	100b883a 	mov	r5,r2
  800148:	2880004c 	andi	r2,r5,1
  80014c:	1005003a 	cmpeq	r2,r2,zero
  800150:	103fef1e 	bne	r2,zero,800110 <alt_irq_handler+0x24>
  800154:	0009883a 	mov	r4,zero
  800158:	200490fa 	slli	r2,r4,3
  80015c:	1405883a 	add	r2,r2,r16
  800160:	11000117 	ldw	r4,4(r2)
  800164:	10c00017 	ldw	r3,0(r2)
  800168:	183ee83a 	callr	r3
  80016c:	0005313a 	rdctl	r2,ipending
  800170:	103ff41e 	bne	r2,zero,800144 <alt_irq_handler+0x58>
  800174:	dfc00117 	ldw	ra,4(sp)
  800178:	dc000017 	ldw	r16,0(sp)
  80017c:	dec00204 	addi	sp,sp,8
  800180:	f800283a 	ret

Disassembly of section .text:

00800184 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  800184:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  800188:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  80018c:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  800190:	00bffd16 	blt	zero,r2,800188 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800194:	06c03034 	movhi	sp,192
    ori sp, sp, %lo(__alt_stack_pointer)
  800198:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  80019c:	06802034 	movhi	gp,128
    ori gp, gp, %lo(_gp)
  8001a0:	d6a97414 	ori	gp,gp,42448
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  8001a4:	00802034 	movhi	r2,128
    ori r2, r2, %lo(__bss_start)
  8001a8:	108a3714 	ori	r2,r2,10460

    movhi r3, %hi(__bss_end)
  8001ac:	00c02034 	movhi	r3,128
    ori r3, r3, %lo(__bss_end)
  8001b0:	18ca8014 	ori	r3,r3,10752

    beq r2, r3, 1f
  8001b4:	10c00326 	beq	r2,r3,8001c4 <_start+0x40>

0:
    stw zero, (r2)
  8001b8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001bc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001c0:	10fffd36 	bltu	r2,r3,8001b8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  8001c4:	08015880 	call	801588 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8001c8:	080163c0 	call	80163c <alt_main>

008001cc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  8001cc:	003fff06 	br	8001cc <alt_after_alt_main>

008001d0 <det_status>:
#define DET_STATUS_READY 0
#define DET_STATUS_BUSY 1

int irqcommunicationtest = 0;

inline int det_status(){
  8001d0:	deffff04 	addi	sp,sp,-4
  8001d4:	df000015 	stw	fp,0(sp)
  8001d8:	d839883a 	mov	fp,sp
	return IORD(DETERMINANT_0_BASE, DET_STATUS_OFFSET);
  8001dc:	00804034 	movhi	r2,256
  8001e0:	10840f04 	addi	r2,r2,4156
  8001e4:	10800037 	ldwio	r2,0(r2)
}
  8001e8:	e037883a 	mov	sp,fp
  8001ec:	df000017 	ldw	fp,0(sp)
  8001f0:	dec00104 	addi	sp,sp,4
  8001f4:	f800283a 	ret

008001f8 <det_result>:

inline float det_result(){
  8001f8:	defffe04 	addi	sp,sp,-8
  8001fc:	dfc00115 	stw	ra,4(sp)
  800200:	df000015 	stw	fp,0(sp)
  800204:	d839883a 	mov	fp,sp
	return IORD(DETERMINANT_0_BASE, DET_RESULT_OFFSET);
  800208:	00804034 	movhi	r2,256
  80020c:	10840e04 	addi	r2,r2,4152
  800210:	11000037 	ldwio	r4,0(r2)
  800214:	0800fbc0 	call	800fbc <__floatsisf>
}
  800218:	e037883a 	mov	sp,fp
  80021c:	dfc00117 	ldw	ra,4(sp)
  800220:	df000017 	ldw	fp,0(sp)
  800224:	dec00204 	addi	sp,sp,8
  800228:	f800283a 	ret

0080022c <det_done_isr>:

void det_done_isr(void* context){
  80022c:	defffd04 	addi	sp,sp,-12
  800230:	dfc00215 	stw	ra,8(sp)
  800234:	df000115 	stw	fp,4(sp)
  800238:	df000104 	addi	fp,sp,4
  80023c:	e13fff15 	stw	r4,-4(fp)
	det_result();
  800240:	08001f80 	call	8001f8 <det_result>
	irqcommunicationtest = 1;
  800244:	00800044 	movi	r2,1
  800248:	d0a0c315 	stw	r2,-31988(gp)
}
  80024c:	e037883a 	mov	sp,fp
  800250:	dfc00117 	ldw	ra,4(sp)
  800254:	df000017 	ldw	fp,0(sp)
  800258:	dec00204 	addi	sp,sp,8
  80025c:	f800283a 	ret

00800260 <reg_isr>:

inline int reg_isr(){
  800260:	defffd04 	addi	sp,sp,-12
  800264:	dfc00215 	stw	ra,8(sp)
  800268:	df000115 	stw	fp,4(sp)
  80026c:	df000104 	addi	fp,sp,4
	return alt_ic_isr_register(DETERMINANT_0_IRQ_INTERRUPT_CONTROLLER_ID,
  800270:	d8000015 	stw	zero,0(sp)
  800274:	0009883a 	mov	r4,zero
  800278:	01400504 	movi	r5,20
  80027c:	01802034 	movhi	r6,128
  800280:	31808b04 	addi	r6,r6,556
  800284:	000f883a 	mov	r7,zero
  800288:	08014fc0 	call	8014fc <alt_ic_isr_register>
						DETERMINANT_0_IRQ,
	                    &det_done_isr,
	                    NULL,
	                    NULL);
}
  80028c:	e037883a 	mov	sp,fp
  800290:	dfc00117 	ldw	ra,4(sp)
  800294:	df000017 	ldw	fp,0(sp)
  800298:	dec00204 	addi	sp,sp,8
  80029c:	f800283a 	ret

008002a0 <det_start>:



inline void det_start(float* ptr, int N){
  8002a0:	defffc04 	addi	sp,sp,-16
  8002a4:	dfc00315 	stw	ra,12(sp)
  8002a8:	df000215 	stw	fp,8(sp)
  8002ac:	df000204 	addi	fp,sp,8
  8002b0:	e13ffe15 	stw	r4,-8(fp)
  8002b4:	e17fff15 	stw	r5,-4(fp)
	alt_dcache_flush (ptr, N * N * sizeof(float));
  8002b8:	e0ffff17 	ldw	r3,-4(fp)
  8002bc:	e0bfff17 	ldw	r2,-4(fp)
  8002c0:	1885383a 	mul	r2,r3,r2
  8002c4:	1085883a 	add	r2,r2,r2
  8002c8:	1085883a 	add	r2,r2,r2
  8002cc:	100b883a 	mov	r5,r2
  8002d0:	e13ffe17 	ldw	r4,-8(fp)
  8002d4:	080143c0 	call	80143c <alt_dcache_flush>
	IOWR(DETERMINANT_0_BASE, DET_PTR_OFFSET, (int)ptr);
  8002d8:	e0fffe17 	ldw	r3,-8(fp)
  8002dc:	00804034 	movhi	r2,256
  8002e0:	10840e04 	addi	r2,r2,4152
  8002e4:	10c00035 	stwio	r3,0(r2)
	IOWR(DETERMINANT_0_BASE, DET_LEN_OFFSET, N);
  8002e8:	00c04034 	movhi	r3,256
  8002ec:	18c40f04 	addi	r3,r3,4156
  8002f0:	e0bfff17 	ldw	r2,-4(fp)
  8002f4:	18800035 	stwio	r2,0(r3)
}
  8002f8:	e037883a 	mov	sp,fp
  8002fc:	dfc00117 	ldw	ra,4(sp)
  800300:	df000017 	ldw	fp,0(sp)
  800304:	dec00204 	addi	sp,sp,8
  800308:	f800283a 	ret

0080030c <det3x3>:
#define MXSIZE 10

float **tempmat;

typedef float mat3x3[3][3];
float det3x3(volatile mat3x3 inmat){
  80030c:	defffa04 	addi	sp,sp,-24
  800310:	dfc00515 	stw	ra,20(sp)
  800314:	df000415 	stw	fp,16(sp)
  800318:	dc400315 	stw	r17,12(sp)
  80031c:	dc000215 	stw	r16,8(sp)
  800320:	df000204 	addi	fp,sp,8
  800324:	e13fff15 	stw	r4,-4(fp)
	float result = inmat[0][0] * (inmat[1][1] * inmat[2][2] - inmat[2][1] * inmat[1][2]);
  800328:	e0bfff17 	ldw	r2,-4(fp)
  80032c:	14000017 	ldw	r16,0(r2)
  800330:	e0bfff17 	ldw	r2,-4(fp)
  800334:	10800304 	addi	r2,r2,12
  800338:	10c00117 	ldw	r3,4(r2)
  80033c:	e0bfff17 	ldw	r2,-4(fp)
  800340:	10800604 	addi	r2,r2,24
  800344:	10800217 	ldw	r2,8(r2)
  800348:	1809883a 	mov	r4,r3
  80034c:	100b883a 	mov	r5,r2
  800350:	0800bf00 	call	800bf0 <__mulsf3>
  800354:	1023883a 	mov	r17,r2
  800358:	e0bfff17 	ldw	r2,-4(fp)
  80035c:	10800604 	addi	r2,r2,24
  800360:	10c00117 	ldw	r3,4(r2)
  800364:	e0bfff17 	ldw	r2,-4(fp)
  800368:	10800304 	addi	r2,r2,12
  80036c:	10800217 	ldw	r2,8(r2)
  800370:	1809883a 	mov	r4,r3
  800374:	100b883a 	mov	r5,r2
  800378:	0800bf00 	call	800bf0 <__mulsf3>
  80037c:	8809883a 	mov	r4,r17
  800380:	100b883a 	mov	r5,r2
  800384:	0800b1c0 	call	800b1c <__subsf3>
  800388:	8009883a 	mov	r4,r16
  80038c:	100b883a 	mov	r5,r2
  800390:	0800bf00 	call	800bf0 <__mulsf3>
  800394:	e0bffe15 	stw	r2,-8(fp)
	result -= inmat[1][0] * (inmat[0][1] * inmat[2][2] - inmat[2][1] * inmat[0][2]);
  800398:	e0bfff17 	ldw	r2,-4(fp)
  80039c:	10800304 	addi	r2,r2,12
  8003a0:	14000017 	ldw	r16,0(r2)
  8003a4:	e0bfff17 	ldw	r2,-4(fp)
  8003a8:	10c00117 	ldw	r3,4(r2)
  8003ac:	e0bfff17 	ldw	r2,-4(fp)
  8003b0:	10800604 	addi	r2,r2,24
  8003b4:	10800217 	ldw	r2,8(r2)
  8003b8:	1809883a 	mov	r4,r3
  8003bc:	100b883a 	mov	r5,r2
  8003c0:	0800bf00 	call	800bf0 <__mulsf3>
  8003c4:	1023883a 	mov	r17,r2
  8003c8:	e0bfff17 	ldw	r2,-4(fp)
  8003cc:	10800604 	addi	r2,r2,24
  8003d0:	10c00117 	ldw	r3,4(r2)
  8003d4:	e0bfff17 	ldw	r2,-4(fp)
  8003d8:	10800217 	ldw	r2,8(r2)
  8003dc:	1809883a 	mov	r4,r3
  8003e0:	100b883a 	mov	r5,r2
  8003e4:	0800bf00 	call	800bf0 <__mulsf3>
  8003e8:	8809883a 	mov	r4,r17
  8003ec:	100b883a 	mov	r5,r2
  8003f0:	0800b1c0 	call	800b1c <__subsf3>
  8003f4:	8009883a 	mov	r4,r16
  8003f8:	100b883a 	mov	r5,r2
  8003fc:	0800bf00 	call	800bf0 <__mulsf3>
  800400:	e13ffe17 	ldw	r4,-8(fp)
  800404:	100b883a 	mov	r5,r2
  800408:	0800b1c0 	call	800b1c <__subsf3>
  80040c:	e0bffe15 	stw	r2,-8(fp)
	result += inmat[2][0] * (inmat[0][1] * inmat[1][2] - inmat[1][1] * inmat[0][2]);
  800410:	e0bfff17 	ldw	r2,-4(fp)
  800414:	10800604 	addi	r2,r2,24
  800418:	14000017 	ldw	r16,0(r2)
  80041c:	e0bfff17 	ldw	r2,-4(fp)
  800420:	10c00117 	ldw	r3,4(r2)
  800424:	e0bfff17 	ldw	r2,-4(fp)
  800428:	10800304 	addi	r2,r2,12
  80042c:	10800217 	ldw	r2,8(r2)
  800430:	1809883a 	mov	r4,r3
  800434:	100b883a 	mov	r5,r2
  800438:	0800bf00 	call	800bf0 <__mulsf3>
  80043c:	1023883a 	mov	r17,r2
  800440:	e0bfff17 	ldw	r2,-4(fp)
  800444:	10800304 	addi	r2,r2,12
  800448:	10c00117 	ldw	r3,4(r2)
  80044c:	e0bfff17 	ldw	r2,-4(fp)
  800450:	10800217 	ldw	r2,8(r2)
  800454:	1809883a 	mov	r4,r3
  800458:	100b883a 	mov	r5,r2
  80045c:	0800bf00 	call	800bf0 <__mulsf3>
  800460:	8809883a 	mov	r4,r17
  800464:	100b883a 	mov	r5,r2
  800468:	0800b1c0 	call	800b1c <__subsf3>
  80046c:	8009883a 	mov	r4,r16
  800470:	100b883a 	mov	r5,r2
  800474:	0800bf00 	call	800bf0 <__mulsf3>
  800478:	e13ffe17 	ldw	r4,-8(fp)
  80047c:	100b883a 	mov	r5,r2
  800480:	0800b8c0 	call	800b8c <__addsf3>
  800484:	e0bffe15 	stw	r2,-8(fp)
	return result;
  800488:	e0bffe17 	ldw	r2,-8(fp)
}
  80048c:	e037883a 	mov	sp,fp
  800490:	dfc00317 	ldw	ra,12(sp)
  800494:	df000217 	ldw	fp,8(sp)
  800498:	dc400117 	ldw	r17,4(sp)
  80049c:	dc000017 	ldw	r16,0(sp)
  8004a0:	dec00404 	addi	sp,sp,16
  8004a4:	f800283a 	ret

008004a8 <rswap>:

void rswap (float **tempmat, size_t i, size_t j){
  8004a8:	defffb04 	addi	sp,sp,-20
  8004ac:	df000415 	stw	fp,16(sp)
  8004b0:	df000404 	addi	fp,sp,16
  8004b4:	e13ffd15 	stw	r4,-12(fp)
  8004b8:	e17ffe15 	stw	r5,-8(fp)
  8004bc:	e1bfff15 	stw	r6,-4(fp)
	float *tmp = tempmat[i];
  8004c0:	e0bffe17 	ldw	r2,-8(fp)
  8004c4:	1085883a 	add	r2,r2,r2
  8004c8:	1085883a 	add	r2,r2,r2
  8004cc:	1007883a 	mov	r3,r2
  8004d0:	e0bffd17 	ldw	r2,-12(fp)
  8004d4:	1885883a 	add	r2,r3,r2
  8004d8:	10800017 	ldw	r2,0(r2)
  8004dc:	e0bffc15 	stw	r2,-16(fp)
	tempmat[i] = tempmat[j]; tempmat[j] = tmp;
  8004e0:	e0bffe17 	ldw	r2,-8(fp)
  8004e4:	1085883a 	add	r2,r2,r2
  8004e8:	1085883a 	add	r2,r2,r2
  8004ec:	1007883a 	mov	r3,r2
  8004f0:	e0bffd17 	ldw	r2,-12(fp)
  8004f4:	1889883a 	add	r4,r3,r2
  8004f8:	e0bfff17 	ldw	r2,-4(fp)
  8004fc:	1085883a 	add	r2,r2,r2
  800500:	1085883a 	add	r2,r2,r2
  800504:	1007883a 	mov	r3,r2
  800508:	e0bffd17 	ldw	r2,-12(fp)
  80050c:	1885883a 	add	r2,r3,r2
  800510:	10800017 	ldw	r2,0(r2)
  800514:	20800015 	stw	r2,0(r4)
  800518:	e0bfff17 	ldw	r2,-4(fp)
  80051c:	1085883a 	add	r2,r2,r2
  800520:	1085883a 	add	r2,r2,r2
  800524:	1007883a 	mov	r3,r2
  800528:	e0bffd17 	ldw	r2,-12(fp)
  80052c:	1887883a 	add	r3,r3,r2
  800530:	e0bffc17 	ldw	r2,-16(fp)
  800534:	18800015 	stw	r2,0(r3)
}
  800538:	e037883a 	mov	sp,fp
  80053c:	df000017 	ldw	fp,0(sp)
  800540:	dec00104 	addi	sp,sp,4
  800544:	f800283a 	ret

00800548 <detmat>:

float detmat(float matrix[][MXSIZE]){
  800548:	defff004 	addi	sp,sp,-64
  80054c:	dfc00f15 	stw	ra,60(sp)
  800550:	df000e15 	stw	fp,56(sp)
  800554:	dc400d15 	stw	r17,52(sp)
  800558:	dc000c15 	stw	r16,48(sp)
  80055c:	df000c04 	addi	fp,sp,48
  800560:	e13ffe15 	stw	r4,-8(fp)
	float det = 1.0f;
  800564:	008fe034 	movhi	r2,16256
  800568:	e0bffd15 	stw	r2,-12(fp)

	//Copy Matrix to tempmat
	for(int i = 0; i != MXSIZE; ++i)
  80056c:	e03ffb15 	stw	zero,-20(fp)
  800570:	00002106 	br	8005f8 <detmat+0xb0>
		for(int j = 0; j != MXSIZE; j++)
  800574:	e03ffa15 	stw	zero,-24(fp)
  800578:	00001906 	br	8005e0 <detmat+0x98>
			tempmat[i][j] = matrix[i][j];
  80057c:	e0bffb17 	ldw	r2,-20(fp)
  800580:	1085883a 	add	r2,r2,r2
  800584:	1085883a 	add	r2,r2,r2
  800588:	1007883a 	mov	r3,r2
  80058c:	d0a0c417 	ldw	r2,-31984(gp)
  800590:	1885883a 	add	r2,r3,r2
  800594:	10c00017 	ldw	r3,0(r2)
  800598:	e0bffa17 	ldw	r2,-24(fp)
  80059c:	1085883a 	add	r2,r2,r2
  8005a0:	1085883a 	add	r2,r2,r2
  8005a4:	1889883a 	add	r4,r3,r2
  8005a8:	e0bffb17 	ldw	r2,-20(fp)
  8005ac:	10800a24 	muli	r2,r2,40
  8005b0:	1007883a 	mov	r3,r2
  8005b4:	e0bffe17 	ldw	r2,-8(fp)
  8005b8:	1887883a 	add	r3,r3,r2
  8005bc:	e0bffa17 	ldw	r2,-24(fp)
  8005c0:	1085883a 	add	r2,r2,r2
  8005c4:	1085883a 	add	r2,r2,r2
  8005c8:	10c5883a 	add	r2,r2,r3
  8005cc:	10800017 	ldw	r2,0(r2)
  8005d0:	20800015 	stw	r2,0(r4)
float detmat(float matrix[][MXSIZE]){
	float det = 1.0f;

	//Copy Matrix to tempmat
	for(int i = 0; i != MXSIZE; ++i)
		for(int j = 0; j != MXSIZE; j++)
  8005d4:	e0bffa17 	ldw	r2,-24(fp)
  8005d8:	10800044 	addi	r2,r2,1
  8005dc:	e0bffa15 	stw	r2,-24(fp)
  8005e0:	e0bffa17 	ldw	r2,-24(fp)
  8005e4:	10800298 	cmpnei	r2,r2,10
  8005e8:	103fe41e 	bne	r2,zero,80057c <detmat+0x34>

float detmat(float matrix[][MXSIZE]){
	float det = 1.0f;

	//Copy Matrix to tempmat
	for(int i = 0; i != MXSIZE; ++i)
  8005ec:	e0bffb17 	ldw	r2,-20(fp)
  8005f0:	10800044 	addi	r2,r2,1
  8005f4:	e0bffb15 	stw	r2,-20(fp)
  8005f8:	e0bffb17 	ldw	r2,-20(fp)
  8005fc:	10800298 	cmpnei	r2,r2,10
  800600:	103fdc1e 	bne	r2,zero,800574 <detmat+0x2c>
		for(int j = 0; j != MXSIZE; j++)
			tempmat[i][j] = matrix[i][j];

	// Fill Lower with 0's
	int rswapcount = 0;
  800604:	e03ffc15 	stw	zero,-16(fp)

	//iterate over columns
	for(int i =0; i < MXSIZE; ++i){
  800608:	e03ff915 	stw	zero,-28(fp)
  80060c:	00009306 	br	80085c <detmat+0x314>

		//swap or calculate
		if (tempmat[i][i] != 0){
  800610:	e0bff917 	ldw	r2,-28(fp)
  800614:	1085883a 	add	r2,r2,r2
  800618:	1085883a 	add	r2,r2,r2
  80061c:	1007883a 	mov	r3,r2
  800620:	d0a0c417 	ldw	r2,-31984(gp)
  800624:	1885883a 	add	r2,r3,r2
  800628:	10c00017 	ldw	r3,0(r2)
  80062c:	e0bff917 	ldw	r2,-28(fp)
  800630:	1085883a 	add	r2,r2,r2
  800634:	1085883a 	add	r2,r2,r2
  800638:	1885883a 	add	r2,r3,r2
  80063c:	10800017 	ldw	r2,0(r2)
  800640:	1009883a 	mov	r4,r2
  800644:	000b883a 	mov	r5,zero
  800648:	0800f440 	call	800f44 <__nesf2>
  80064c:	1004c03a 	cmpne	r2,r2,zero
  800650:	1000011e 	bne	r2,zero,800658 <detmat+0x110>
  800654:	00005a06 	br	8007c0 <detmat+0x278>

			//clear swap count
			rswapcount =0;
  800658:	e03ffc15 	stw	zero,-16(fp)

			//for each row (j) bleow diagonal of current column
			for(int j = i+1; j < MXSIZE; j++){
  80065c:	e0bff917 	ldw	r2,-28(fp)
  800660:	10800044 	addi	r2,r2,1
  800664:	e0bff815 	stw	r2,-32(fp)
  800668:	00005106 	br	8007b0 <detmat+0x268>

				//compute normalization factor
				float f = tempmat[j][i]/tempmat[i][i];
  80066c:	e0bff817 	ldw	r2,-32(fp)
  800670:	1085883a 	add	r2,r2,r2
  800674:	1085883a 	add	r2,r2,r2
  800678:	1007883a 	mov	r3,r2
  80067c:	d0a0c417 	ldw	r2,-31984(gp)
  800680:	1885883a 	add	r2,r3,r2
  800684:	10c00017 	ldw	r3,0(r2)
  800688:	e0bff917 	ldw	r2,-28(fp)
  80068c:	1085883a 	add	r2,r2,r2
  800690:	1085883a 	add	r2,r2,r2
  800694:	1885883a 	add	r2,r3,r2
  800698:	11000017 	ldw	r4,0(r2)
  80069c:	e0bff917 	ldw	r2,-28(fp)
  8006a0:	1085883a 	add	r2,r2,r2
  8006a4:	1085883a 	add	r2,r2,r2
  8006a8:	1007883a 	mov	r3,r2
  8006ac:	d0a0c417 	ldw	r2,-31984(gp)
  8006b0:	1885883a 	add	r2,r3,r2
  8006b4:	10c00017 	ldw	r3,0(r2)
  8006b8:	e0bff917 	ldw	r2,-28(fp)
  8006bc:	1085883a 	add	r2,r2,r2
  8006c0:	1085883a 	add	r2,r2,r2
  8006c4:	1885883a 	add	r2,r3,r2
  8006c8:	10800017 	ldw	r2,0(r2)
  8006cc:	100b883a 	mov	r5,r2
  8006d0:	0800dd00 	call	800dd0 <__divsf3>
  8006d4:	e0bff715 	stw	r2,-36(fp)

				//subtract f * i'th row from j'th row
				for (int k = i; k < MXSIZE; ++k)
  8006d8:	e0bff917 	ldw	r2,-28(fp)
  8006dc:	e0bff615 	stw	r2,-40(fp)
  8006e0:	00002d06 	br	800798 <detmat+0x250>
					tempmat[j][k] -= f*tempmat[i][k];
  8006e4:	e0bff817 	ldw	r2,-32(fp)
  8006e8:	1085883a 	add	r2,r2,r2
  8006ec:	1085883a 	add	r2,r2,r2
  8006f0:	1007883a 	mov	r3,r2
  8006f4:	d0a0c417 	ldw	r2,-31984(gp)
  8006f8:	1885883a 	add	r2,r3,r2
  8006fc:	10c00017 	ldw	r3,0(r2)
  800700:	e0bff617 	ldw	r2,-40(fp)
  800704:	1085883a 	add	r2,r2,r2
  800708:	1085883a 	add	r2,r2,r2
  80070c:	18a1883a 	add	r16,r3,r2
  800710:	e0bff817 	ldw	r2,-32(fp)
  800714:	1085883a 	add	r2,r2,r2
  800718:	1085883a 	add	r2,r2,r2
  80071c:	1007883a 	mov	r3,r2
  800720:	d0a0c417 	ldw	r2,-31984(gp)
  800724:	1885883a 	add	r2,r3,r2
  800728:	10c00017 	ldw	r3,0(r2)
  80072c:	e0bff617 	ldw	r2,-40(fp)
  800730:	1085883a 	add	r2,r2,r2
  800734:	1085883a 	add	r2,r2,r2
  800738:	1885883a 	add	r2,r3,r2
  80073c:	14400017 	ldw	r17,0(r2)
  800740:	e0bff917 	ldw	r2,-28(fp)
  800744:	1085883a 	add	r2,r2,r2
  800748:	1085883a 	add	r2,r2,r2
  80074c:	1007883a 	mov	r3,r2
  800750:	d0a0c417 	ldw	r2,-31984(gp)
  800754:	1885883a 	add	r2,r3,r2
  800758:	10c00017 	ldw	r3,0(r2)
  80075c:	e0bff617 	ldw	r2,-40(fp)
  800760:	1085883a 	add	r2,r2,r2
  800764:	1085883a 	add	r2,r2,r2
  800768:	1885883a 	add	r2,r3,r2
  80076c:	10800017 	ldw	r2,0(r2)
  800770:	1009883a 	mov	r4,r2
  800774:	e17ff717 	ldw	r5,-36(fp)
  800778:	0800bf00 	call	800bf0 <__mulsf3>
  80077c:	8809883a 	mov	r4,r17
  800780:	100b883a 	mov	r5,r2
  800784:	0800b1c0 	call	800b1c <__subsf3>
  800788:	80800015 	stw	r2,0(r16)

				//compute normalization factor
				float f = tempmat[j][i]/tempmat[i][i];

				//subtract f * i'th row from j'th row
				for (int k = i; k < MXSIZE; ++k)
  80078c:	e0bff617 	ldw	r2,-40(fp)
  800790:	10800044 	addi	r2,r2,1
  800794:	e0bff615 	stw	r2,-40(fp)
  800798:	e0bff617 	ldw	r2,-40(fp)
  80079c:	10800290 	cmplti	r2,r2,10
  8007a0:	103fd01e 	bne	r2,zero,8006e4 <detmat+0x19c>

			//clear swap count
			rswapcount =0;

			//for each row (j) bleow diagonal of current column
			for(int j = i+1; j < MXSIZE; j++){
  8007a4:	e0bff817 	ldw	r2,-32(fp)
  8007a8:	10800044 	addi	r2,r2,1
  8007ac:	e0bff815 	stw	r2,-32(fp)
  8007b0:	e0bff817 	ldw	r2,-32(fp)
  8007b4:	10800290 	cmplti	r2,r2,10
  8007b8:	103fac1e 	bne	r2,zero,80066c <detmat+0x124>
  8007bc:	00002406 	br	800850 <detmat+0x308>
					tempmat[j][k] -= f*tempmat[i][k];
			}
		} else {

			//if we have exhausted all swap options, we know it must be singular
			if ((MXSIZE - 1 - i) == rswapcount++){
  8007c0:	00c00244 	movi	r3,9
  8007c4:	e0bff917 	ldw	r2,-28(fp)
  8007c8:	1887c83a 	sub	r3,r3,r2
  8007cc:	e0bffc17 	ldw	r2,-16(fp)
  8007d0:	1885003a 	cmpeq	r2,r3,r2
  8007d4:	1007883a 	mov	r3,r2
  8007d8:	e0bffc17 	ldw	r2,-16(fp)
  8007dc:	10800044 	addi	r2,r2,1
  8007e0:	e0bffc15 	stw	r2,-16(fp)
  8007e4:	18803fcc 	andi	r2,r3,255
  8007e8:	1005003a 	cmpeq	r2,r2,zero
  8007ec:	1000031e 	bne	r2,zero,8007fc <detmat+0x2b4>
				return 0;
  8007f0:	0005883a 	mov	r2,zero
  8007f4:	e0bfff15 	stw	r2,-4(fp)
  8007f8:	00003506 	br	8008d0 <detmat+0x388>
			} else {

				//maintain a sorted list of swaps so we know we have tried all
				for (int k = i; k < MXSIZE - 1; ++k){
  8007fc:	e0bff917 	ldw	r2,-28(fp)
  800800:	e0bff515 	stw	r2,-44(fp)
  800804:	00000c06 	br	800838 <detmat+0x2f0>
					rswap(tempmat,k,k+1);
  800808:	d120c417 	ldw	r4,-31984(gp)
  80080c:	e17ff517 	ldw	r5,-44(fp)
  800810:	e0bff517 	ldw	r2,-44(fp)
  800814:	10800044 	addi	r2,r2,1
  800818:	100d883a 	mov	r6,r2
  80081c:	08004a80 	call	8004a8 <rswap>
					det *= -1;
  800820:	e0bffd17 	ldw	r2,-12(fp)
  800824:	10a0003c 	xorhi	r2,r2,32768
  800828:	e0bffd15 	stw	r2,-12(fp)
			if ((MXSIZE - 1 - i) == rswapcount++){
				return 0;
			} else {

				//maintain a sorted list of swaps so we know we have tried all
				for (int k = i; k < MXSIZE - 1; ++k){
  80082c:	e0bff517 	ldw	r2,-44(fp)
  800830:	10800044 	addi	r2,r2,1
  800834:	e0bff515 	stw	r2,-44(fp)
  800838:	e0bff517 	ldw	r2,-44(fp)
  80083c:	10800250 	cmplti	r2,r2,9
  800840:	103ff11e 	bne	r2,zero,800808 <detmat+0x2c0>
					rswap(tempmat,k,k+1);
					det *= -1;
				}

				//retry this column
				i--;
  800844:	e0bff917 	ldw	r2,-28(fp)
  800848:	10bfffc4 	addi	r2,r2,-1
  80084c:	e0bff915 	stw	r2,-28(fp)

	// Fill Lower with 0's
	int rswapcount = 0;

	//iterate over columns
	for(int i =0; i < MXSIZE; ++i){
  800850:	e0bff917 	ldw	r2,-28(fp)
  800854:	10800044 	addi	r2,r2,1
  800858:	e0bff915 	stw	r2,-28(fp)
  80085c:	e0bff917 	ldw	r2,-28(fp)
  800860:	10800290 	cmplti	r2,r2,10
  800864:	103f6a1e 	bne	r2,zero,800610 <detmat+0xc8>
				i--;
			}
		}
	}
	// Calculate Determinant
	for(int i=0; i < MXSIZE; ++i)
  800868:	e03ff415 	stw	zero,-48(fp)
  80086c:	00001306 	br	8008bc <detmat+0x374>
		det *= tempmat[i][i];
  800870:	e0bff417 	ldw	r2,-48(fp)
  800874:	1085883a 	add	r2,r2,r2
  800878:	1085883a 	add	r2,r2,r2
  80087c:	1007883a 	mov	r3,r2
  800880:	d0a0c417 	ldw	r2,-31984(gp)
  800884:	1885883a 	add	r2,r3,r2
  800888:	10c00017 	ldw	r3,0(r2)
  80088c:	e0bff417 	ldw	r2,-48(fp)
  800890:	1085883a 	add	r2,r2,r2
  800894:	1085883a 	add	r2,r2,r2
  800898:	1885883a 	add	r2,r3,r2
  80089c:	10800017 	ldw	r2,0(r2)
  8008a0:	e13ffd17 	ldw	r4,-12(fp)
  8008a4:	100b883a 	mov	r5,r2
  8008a8:	0800bf00 	call	800bf0 <__mulsf3>
  8008ac:	e0bffd15 	stw	r2,-12(fp)
				i--;
			}
		}
	}
	// Calculate Determinant
	for(int i=0; i < MXSIZE; ++i)
  8008b0:	e0bff417 	ldw	r2,-48(fp)
  8008b4:	10800044 	addi	r2,r2,1
  8008b8:	e0bff415 	stw	r2,-48(fp)
  8008bc:	e0bff417 	ldw	r2,-48(fp)
  8008c0:	10800290 	cmplti	r2,r2,10
  8008c4:	103fea1e 	bne	r2,zero,800870 <detmat+0x328>
		det *= tempmat[i][i];

	// return det
	return det;
  8008c8:	e0fffd17 	ldw	r3,-12(fp)
  8008cc:	e0ffff15 	stw	r3,-4(fp)
  8008d0:	e0ffff17 	ldw	r3,-4(fp)
  8008d4:	1805883a 	mov	r2,r3
}
  8008d8:	e037883a 	mov	sp,fp
  8008dc:	dfc00317 	ldw	ra,12(sp)
  8008e0:	df000217 	ldw	fp,8(sp)
  8008e4:	dc400117 	ldw	r17,4(sp)
  8008e8:	dc000017 	ldw	r16,0(sp)
  8008ec:	dec00404 	addi	sp,sp,16
  8008f0:	f800283a 	ret

008008f4 <main>:
extern short _binary_beeth5_noise_bin_start[];
//extern short _binary_beeth5_noise_bin_end[];
//extern int _binary_beeth5_noise_bin_size;

int main()
{
  8008f4:	deff7904 	addi	sp,sp,-540
  8008f8:	df008615 	stw	fp,536(sp)
  8008fc:	df008604 	addi	fp,sp,536

	IOWR(NOTCHFILTER_0_BASE, 0, _binary_beeth5_noise_bin_start);
  800900:	00c03834 	movhi	r3,224
  800904:	18c00004 	addi	r3,r3,0
  800908:	00804034 	movhi	r2,256
  80090c:	10840c04 	addi	r2,r2,4144
  800910:	10c00035 	stwio	r3,0(r2)
	IOWR(NOTCHFILTER_0_BASE, 1, (int)_binary_beeth5_noise_bin_start + 0x001d6490);
  800914:	00c03834 	movhi	r3,224
  800918:	18c00004 	addi	r3,r3,0
  80091c:	00800774 	movhi	r2,29
  800920:	10992404 	addi	r2,r2,25744
  800924:	1887883a 	add	r3,r3,r2
  800928:	00804034 	movhi	r2,256
  80092c:	10840d04 	addi	r2,r2,4148
  800930:	10c00035 	stwio	r3,0(r2)


	//barrier for old tests--------------------------------
	while(1);
  800934:	003fff06 	br	800934 <main+0x40>

00800938 <_fpadd_parts>:
  800938:	21c00017 	ldw	r7,0(r4)
  80093c:	02000044 	movi	r8,1
  800940:	41c0332e 	bgeu	r8,r7,800a10 <_fpadd_parts+0xd8>
  800944:	28800017 	ldw	r2,0(r5)
  800948:	4080462e 	bgeu	r8,r2,800a64 <_fpadd_parts+0x12c>
  80094c:	00c00104 	movi	r3,4
  800950:	38c06b26 	beq	r7,r3,800b00 <_fpadd_parts+0x1c8>
  800954:	10c04326 	beq	r2,r3,800a64 <_fpadd_parts+0x12c>
  800958:	00c00084 	movi	r3,2
  80095c:	10c02e26 	beq	r2,r3,800a18 <_fpadd_parts+0xe0>
  800960:	38c04026 	beq	r7,r3,800a64 <_fpadd_parts+0x12c>
  800964:	22800217 	ldw	r10,8(r4)
  800968:	28c00217 	ldw	r3,8(r5)
  80096c:	23000317 	ldw	r12,12(r4)
  800970:	2a400317 	ldw	r9,12(r5)
  800974:	50cfc83a 	sub	r7,r10,r3
  800978:	3817883a 	mov	r11,r7
  80097c:	38004f16 	blt	r7,zero,800abc <_fpadd_parts+0x184>
  800980:	008007c4 	movi	r2,31
  800984:	11c03316 	blt	r2,r7,800a54 <_fpadd_parts+0x11c>
  800988:	02c0540e 	bge	zero,r11,800adc <_fpadd_parts+0x1a4>
  80098c:	41c4983a 	sll	r2,r8,r7
  800990:	49c6d83a 	srl	r3,r9,r7
  800994:	10bfffc4 	addi	r2,r2,-1
  800998:	4884703a 	and	r2,r9,r2
  80099c:	1004c03a 	cmpne	r2,r2,zero
  8009a0:	1892b03a 	or	r9,r3,r2
  8009a4:	20c00117 	ldw	r3,4(r4)
  8009a8:	28800117 	ldw	r2,4(r5)
  8009ac:	18803c26 	beq	r3,r2,800aa0 <_fpadd_parts+0x168>
  8009b0:	18002f26 	beq	r3,zero,800a70 <_fpadd_parts+0x138>
  8009b4:	4b05c83a 	sub	r2,r9,r12
  8009b8:	10004216 	blt	r2,zero,800ac4 <_fpadd_parts+0x18c>
  8009bc:	32800215 	stw	r10,8(r6)
  8009c0:	30800315 	stw	r2,12(r6)
  8009c4:	30000115 	stw	zero,4(r6)
  8009c8:	31000317 	ldw	r4,12(r6)
  8009cc:	01d00034 	movhi	r7,16384
  8009d0:	39ffff84 	addi	r7,r7,-2
  8009d4:	20bfffc4 	addi	r2,r4,-1
  8009d8:	2007883a 	mov	r3,r4
  8009dc:	38800836 	bltu	r7,r2,800a00 <_fpadd_parts+0xc8>
  8009e0:	31400217 	ldw	r5,8(r6)
  8009e4:	18c9883a 	add	r4,r3,r3
  8009e8:	20bfffc4 	addi	r2,r4,-1
  8009ec:	297fffc4 	addi	r5,r5,-1
  8009f0:	2007883a 	mov	r3,r4
  8009f4:	38bffb2e 	bgeu	r7,r2,8009e4 <_fpadd_parts+0xac>
  8009f8:	31400215 	stw	r5,8(r6)
  8009fc:	31000315 	stw	r4,12(r6)
  800a00:	008000c4 	movi	r2,3
  800a04:	30800015 	stw	r2,0(r6)
  800a08:	20001b16 	blt	r4,zero,800a78 <_fpadd_parts+0x140>
  800a0c:	3009883a 	mov	r4,r6
  800a10:	2005883a 	mov	r2,r4
  800a14:	f800283a 	ret
  800a18:	38fffd1e 	bne	r7,r3,800a10 <_fpadd_parts+0xd8>
  800a1c:	31c00015 	stw	r7,0(r6)
  800a20:	20800117 	ldw	r2,4(r4)
  800a24:	30800115 	stw	r2,4(r6)
  800a28:	20c00217 	ldw	r3,8(r4)
  800a2c:	30c00215 	stw	r3,8(r6)
  800a30:	20800317 	ldw	r2,12(r4)
  800a34:	30800315 	stw	r2,12(r6)
  800a38:	20c00117 	ldw	r3,4(r4)
  800a3c:	28800117 	ldw	r2,4(r5)
  800a40:	3009883a 	mov	r4,r6
  800a44:	1886703a 	and	r3,r3,r2
  800a48:	2005883a 	mov	r2,r4
  800a4c:	30c00115 	stw	r3,4(r6)
  800a50:	f800283a 	ret
  800a54:	1a801716 	blt	r3,r10,800ab4 <_fpadd_parts+0x17c>
  800a58:	1815883a 	mov	r10,r3
  800a5c:	0019883a 	mov	r12,zero
  800a60:	003fd006 	br	8009a4 <_fpadd_parts+0x6c>
  800a64:	2809883a 	mov	r4,r5
  800a68:	2005883a 	mov	r2,r4
  800a6c:	f800283a 	ret
  800a70:	6245c83a 	sub	r2,r12,r9
  800a74:	003fd006 	br	8009b8 <_fpadd_parts+0x80>
  800a78:	30800217 	ldw	r2,8(r6)
  800a7c:	2006d07a 	srli	r3,r4,1
  800a80:	2100004c 	andi	r4,r4,1
  800a84:	10800044 	addi	r2,r2,1
  800a88:	1906b03a 	or	r3,r3,r4
  800a8c:	3009883a 	mov	r4,r6
  800a90:	30800215 	stw	r2,8(r6)
  800a94:	2005883a 	mov	r2,r4
  800a98:	30c00315 	stw	r3,12(r6)
  800a9c:	f800283a 	ret
  800aa0:	4b09883a 	add	r4,r9,r12
  800aa4:	30c00115 	stw	r3,4(r6)
  800aa8:	32800215 	stw	r10,8(r6)
  800aac:	31000315 	stw	r4,12(r6)
  800ab0:	003fd306 	br	800a00 <_fpadd_parts+0xc8>
  800ab4:	0013883a 	mov	r9,zero
  800ab8:	003fba06 	br	8009a4 <_fpadd_parts+0x6c>
  800abc:	01cfc83a 	sub	r7,zero,r7
  800ac0:	003faf06 	br	800980 <_fpadd_parts+0x48>
  800ac4:	0089c83a 	sub	r4,zero,r2
  800ac8:	00800044 	movi	r2,1
  800acc:	30800115 	stw	r2,4(r6)
  800ad0:	32800215 	stw	r10,8(r6)
  800ad4:	31000315 	stw	r4,12(r6)
  800ad8:	003fbb06 	br	8009c8 <_fpadd_parts+0x90>
  800adc:	583fb126 	beq	r11,zero,8009a4 <_fpadd_parts+0x6c>
  800ae0:	41c4983a 	sll	r2,r8,r7
  800ae4:	61c6d83a 	srl	r3,r12,r7
  800ae8:	51d5883a 	add	r10,r10,r7
  800aec:	10bfffc4 	addi	r2,r2,-1
  800af0:	6084703a 	and	r2,r12,r2
  800af4:	1004c03a 	cmpne	r2,r2,zero
  800af8:	1898b03a 	or	r12,r3,r2
  800afc:	003fa906 	br	8009a4 <_fpadd_parts+0x6c>
  800b00:	11ffc31e 	bne	r2,r7,800a10 <_fpadd_parts+0xd8>
  800b04:	28c00117 	ldw	r3,4(r5)
  800b08:	20800117 	ldw	r2,4(r4)
  800b0c:	10ffc026 	beq	r2,r3,800a10 <_fpadd_parts+0xd8>
  800b10:	01002034 	movhi	r4,128
  800b14:	21087c04 	addi	r4,r4,8688
  800b18:	003fbd06 	br	800a10 <_fpadd_parts+0xd8>

00800b1c <__subsf3>:
  800b1c:	deffef04 	addi	sp,sp,-68
  800b20:	dcc00f15 	stw	r19,60(sp)
  800b24:	dcc00204 	addi	r19,sp,8
  800b28:	dc400e15 	stw	r17,56(sp)
  800b2c:	d9000015 	stw	r4,0(sp)
  800b30:	d9400115 	stw	r5,4(sp)
  800b34:	d809883a 	mov	r4,sp
  800b38:	980b883a 	mov	r5,r19
  800b3c:	dc400604 	addi	r17,sp,24
  800b40:	dfc01015 	stw	ra,64(sp)
  800b44:	08012cc0 	call	8012cc <__unpack_f>
  800b48:	d9000104 	addi	r4,sp,4
  800b4c:	880b883a 	mov	r5,r17
  800b50:	08012cc0 	call	8012cc <__unpack_f>
  800b54:	d8800717 	ldw	r2,28(sp)
  800b58:	9809883a 	mov	r4,r19
  800b5c:	880b883a 	mov	r5,r17
  800b60:	d9800a04 	addi	r6,sp,40
  800b64:	1080005c 	xori	r2,r2,1
  800b68:	d8800715 	stw	r2,28(sp)
  800b6c:	08009380 	call	800938 <_fpadd_parts>
  800b70:	1009883a 	mov	r4,r2
  800b74:	080116c0 	call	80116c <__pack_f>
  800b78:	dfc01017 	ldw	ra,64(sp)
  800b7c:	dcc00f17 	ldw	r19,60(sp)
  800b80:	dc400e17 	ldw	r17,56(sp)
  800b84:	dec01104 	addi	sp,sp,68
  800b88:	f800283a 	ret

00800b8c <__addsf3>:
  800b8c:	deffef04 	addi	sp,sp,-68
  800b90:	dcc00f15 	stw	r19,60(sp)
  800b94:	dcc00204 	addi	r19,sp,8
  800b98:	dc400e15 	stw	r17,56(sp)
  800b9c:	d9000015 	stw	r4,0(sp)
  800ba0:	d9400115 	stw	r5,4(sp)
  800ba4:	d809883a 	mov	r4,sp
  800ba8:	980b883a 	mov	r5,r19
  800bac:	dc400604 	addi	r17,sp,24
  800bb0:	dfc01015 	stw	ra,64(sp)
  800bb4:	08012cc0 	call	8012cc <__unpack_f>
  800bb8:	d9000104 	addi	r4,sp,4
  800bbc:	880b883a 	mov	r5,r17
  800bc0:	08012cc0 	call	8012cc <__unpack_f>
  800bc4:	d9800a04 	addi	r6,sp,40
  800bc8:	9809883a 	mov	r4,r19
  800bcc:	880b883a 	mov	r5,r17
  800bd0:	08009380 	call	800938 <_fpadd_parts>
  800bd4:	1009883a 	mov	r4,r2
  800bd8:	080116c0 	call	80116c <__pack_f>
  800bdc:	dfc01017 	ldw	ra,64(sp)
  800be0:	dcc00f17 	ldw	r19,60(sp)
  800be4:	dc400e17 	ldw	r17,56(sp)
  800be8:	dec01104 	addi	sp,sp,68
  800bec:	f800283a 	ret

00800bf0 <__mulsf3>:
  800bf0:	deffef04 	addi	sp,sp,-68
  800bf4:	dc400f15 	stw	r17,60(sp)
  800bf8:	dc400204 	addi	r17,sp,8
  800bfc:	dc000e15 	stw	r16,56(sp)
  800c00:	d9000015 	stw	r4,0(sp)
  800c04:	d9400115 	stw	r5,4(sp)
  800c08:	d809883a 	mov	r4,sp
  800c0c:	880b883a 	mov	r5,r17
  800c10:	dc000604 	addi	r16,sp,24
  800c14:	dfc01015 	stw	ra,64(sp)
  800c18:	08012cc0 	call	8012cc <__unpack_f>
  800c1c:	d9000104 	addi	r4,sp,4
  800c20:	800b883a 	mov	r5,r16
  800c24:	08012cc0 	call	8012cc <__unpack_f>
  800c28:	d9000217 	ldw	r4,8(sp)
  800c2c:	00800044 	movi	r2,1
  800c30:	01400104 	movi	r5,4
  800c34:	1100142e 	bgeu	r2,r4,800c88 <__mulsf3+0x98>
  800c38:	d8c00617 	ldw	r3,24(sp)
  800c3c:	10c0052e 	bgeu	r2,r3,800c54 <__mulsf3+0x64>
  800c40:	21400f26 	beq	r4,r5,800c80 <__mulsf3+0x90>
  800c44:	19405d26 	beq	r3,r5,800dbc <__mulsf3+0x1cc>
  800c48:	00800084 	movi	r2,2
  800c4c:	20800e26 	beq	r4,r2,800c88 <__mulsf3+0x98>
  800c50:	1880181e 	bne	r3,r2,800cb4 <__mulsf3+0xc4>
  800c54:	d8c00717 	ldw	r3,28(sp)
  800c58:	d8800317 	ldw	r2,12(sp)
  800c5c:	8009883a 	mov	r4,r16
  800c60:	10c4c03a 	cmpne	r2,r2,r3
  800c64:	d8800715 	stw	r2,28(sp)
  800c68:	080116c0 	call	80116c <__pack_f>
  800c6c:	dfc01017 	ldw	ra,64(sp)
  800c70:	dc400f17 	ldw	r17,60(sp)
  800c74:	dc000e17 	ldw	r16,56(sp)
  800c78:	dec01104 	addi	sp,sp,68
  800c7c:	f800283a 	ret
  800c80:	00800084 	movi	r2,2
  800c84:	18804f26 	beq	r3,r2,800dc4 <__mulsf3+0x1d4>
  800c88:	d8800317 	ldw	r2,12(sp)
  800c8c:	d8c00717 	ldw	r3,28(sp)
  800c90:	8809883a 	mov	r4,r17
  800c94:	10c4c03a 	cmpne	r2,r2,r3
  800c98:	d8800315 	stw	r2,12(sp)
  800c9c:	080116c0 	call	80116c <__pack_f>
  800ca0:	dfc01017 	ldw	ra,64(sp)
  800ca4:	dc400f17 	ldw	r17,60(sp)
  800ca8:	dc000e17 	ldw	r16,56(sp)
  800cac:	dec01104 	addi	sp,sp,68
  800cb0:	f800283a 	ret
  800cb4:	d8800517 	ldw	r2,20(sp)
  800cb8:	da000917 	ldw	r8,36(sp)
  800cbc:	0013883a 	mov	r9,zero
  800cc0:	0007883a 	mov	r3,zero
  800cc4:	480f883a 	mov	r7,r9
  800cc8:	180b883a 	mov	r5,r3
  800ccc:	400d883a 	mov	r6,r8
  800cd0:	1009883a 	mov	r4,r2
  800cd4:	08010540 	call	801054 <__muldi3>
  800cd8:	da800417 	ldw	r10,16(sp)
  800cdc:	d9800817 	ldw	r6,32(sp)
  800ce0:	da400317 	ldw	r9,12(sp)
  800ce4:	52800084 	addi	r10,r10,2
  800ce8:	3295883a 	add	r10,r6,r10
  800cec:	d9800717 	ldw	r6,28(sp)
  800cf0:	180b883a 	mov	r5,r3
  800cf4:	180f883a 	mov	r7,r3
  800cf8:	4992c03a 	cmpne	r9,r9,r6
  800cfc:	da400b15 	stw	r9,44(sp)
  800d00:	1007883a 	mov	r3,r2
  800d04:	da800c15 	stw	r10,48(sp)
  800d08:	2800070e 	bge	r5,zero,800d28 <__mulsf3+0x138>
  800d0c:	2880004c 	andi	r2,r5,1
  800d10:	1005003a 	cmpeq	r2,r2,zero
  800d14:	500d883a 	mov	r6,r10
  800d18:	10001e26 	beq	r2,zero,800d94 <__mulsf3+0x1a4>
  800d1c:	380ed07a 	srli	r7,r7,1
  800d20:	31800044 	addi	r6,r6,1
  800d24:	d9800c15 	stw	r6,48(sp)
  800d28:	01100034 	movhi	r4,16384
  800d2c:	213fffc4 	addi	r4,r4,-1
  800d30:	21c00b36 	bltu	r4,r7,800d60 <__mulsf3+0x170>
  800d34:	d8800c17 	ldw	r2,48(sp)
  800d38:	00000206 	br	800d44 <__mulsf3+0x154>
  800d3c:	18c7883a 	add	r3,r3,r3
  800d40:	21c00636 	bltu	r4,r7,800d5c <__mulsf3+0x16c>
  800d44:	10bfffc4 	addi	r2,r2,-1
  800d48:	39cf883a 	add	r7,r7,r7
  800d4c:	183ffb0e 	bge	r3,zero,800d3c <__mulsf3+0x14c>
  800d50:	39c00054 	ori	r7,r7,1
  800d54:	18c7883a 	add	r3,r3,r3
  800d58:	21fffa2e 	bgeu	r4,r7,800d44 <__mulsf3+0x154>
  800d5c:	d8800c15 	stw	r2,48(sp)
  800d60:	39001fcc 	andi	r4,r7,127
  800d64:	00801004 	movi	r2,64
  800d68:	20800d26 	beq	r4,r2,800da0 <__mulsf3+0x1b0>
  800d6c:	008000c4 	movi	r2,3
  800d70:	d9000a04 	addi	r4,sp,40
  800d74:	d9c00d15 	stw	r7,52(sp)
  800d78:	d8800a15 	stw	r2,40(sp)
  800d7c:	080116c0 	call	80116c <__pack_f>
  800d80:	dfc01017 	ldw	ra,64(sp)
  800d84:	dc400f17 	ldw	r17,60(sp)
  800d88:	dc000e17 	ldw	r16,56(sp)
  800d8c:	dec01104 	addi	sp,sp,68
  800d90:	f800283a 	ret
  800d94:	1804d07a 	srli	r2,r3,1
  800d98:	10e00034 	orhi	r3,r2,32768
  800d9c:	003fdf06 	br	800d1c <__mulsf3+0x12c>
  800da0:	3880200c 	andi	r2,r7,128
  800da4:	103ff11e 	bne	r2,zero,800d6c <__mulsf3+0x17c>
  800da8:	183ff026 	beq	r3,zero,800d6c <__mulsf3+0x17c>
  800dac:	3907883a 	add	r3,r7,r4
  800db0:	00bfe004 	movi	r2,-128
  800db4:	188e703a 	and	r7,r3,r2
  800db8:	003fec06 	br	800d6c <__mulsf3+0x17c>
  800dbc:	00800084 	movi	r2,2
  800dc0:	20bfa41e 	bne	r4,r2,800c54 <__mulsf3+0x64>
  800dc4:	01002034 	movhi	r4,128
  800dc8:	21087c04 	addi	r4,r4,8688
  800dcc:	003fb306 	br	800c9c <__mulsf3+0xac>

00800dd0 <__divsf3>:
  800dd0:	defff304 	addi	sp,sp,-52
  800dd4:	dc400b15 	stw	r17,44(sp)
  800dd8:	dc400204 	addi	r17,sp,8
  800ddc:	dc000a15 	stw	r16,40(sp)
  800de0:	d9000015 	stw	r4,0(sp)
  800de4:	d9400115 	stw	r5,4(sp)
  800de8:	d809883a 	mov	r4,sp
  800dec:	880b883a 	mov	r5,r17
  800df0:	dc000604 	addi	r16,sp,24
  800df4:	dfc00c15 	stw	ra,48(sp)
  800df8:	08012cc0 	call	8012cc <__unpack_f>
  800dfc:	d9000104 	addi	r4,sp,4
  800e00:	800b883a 	mov	r5,r16
  800e04:	08012cc0 	call	8012cc <__unpack_f>
  800e08:	d9000217 	ldw	r4,8(sp)
  800e0c:	00800044 	movi	r2,1
  800e10:	01800104 	movi	r6,4
  800e14:	11000a2e 	bgeu	r2,r4,800e40 <__divsf3+0x70>
  800e18:	d9400617 	ldw	r5,24(sp)
  800e1c:	1140432e 	bgeu	r2,r5,800f2c <__divsf3+0x15c>
  800e20:	d8800317 	ldw	r2,12(sp)
  800e24:	d8c00717 	ldw	r3,28(sp)
  800e28:	10c4f03a 	xor	r2,r2,r3
  800e2c:	d8800315 	stw	r2,12(sp)
  800e30:	21800226 	beq	r4,r6,800e3c <__divsf3+0x6c>
  800e34:	00800084 	movi	r2,2
  800e38:	2080101e 	bne	r4,r2,800e7c <__divsf3+0xac>
  800e3c:	29000726 	beq	r5,r4,800e5c <__divsf3+0x8c>
  800e40:	8809883a 	mov	r4,r17
  800e44:	080116c0 	call	80116c <__pack_f>
  800e48:	dfc00c17 	ldw	ra,48(sp)
  800e4c:	dc400b17 	ldw	r17,44(sp)
  800e50:	dc000a17 	ldw	r16,40(sp)
  800e54:	dec00d04 	addi	sp,sp,52
  800e58:	f800283a 	ret
  800e5c:	01002034 	movhi	r4,128
  800e60:	21087c04 	addi	r4,r4,8688
  800e64:	080116c0 	call	80116c <__pack_f>
  800e68:	dfc00c17 	ldw	ra,48(sp)
  800e6c:	dc400b17 	ldw	r17,44(sp)
  800e70:	dc000a17 	ldw	r16,40(sp)
  800e74:	dec00d04 	addi	sp,sp,52
  800e78:	f800283a 	ret
  800e7c:	29802d26 	beq	r5,r6,800f34 <__divsf3+0x164>
  800e80:	28801a26 	beq	r5,r2,800eec <__divsf3+0x11c>
  800e84:	d8c00417 	ldw	r3,16(sp)
  800e88:	d8800817 	ldw	r2,32(sp)
  800e8c:	d9000517 	ldw	r4,20(sp)
  800e90:	d9800917 	ldw	r6,36(sp)
  800e94:	1885c83a 	sub	r2,r3,r2
  800e98:	d8800415 	stw	r2,16(sp)
  800e9c:	2180032e 	bgeu	r4,r6,800eac <__divsf3+0xdc>
  800ea0:	10bfffc4 	addi	r2,r2,-1
  800ea4:	d8800415 	stw	r2,16(sp)
  800ea8:	2109883a 	add	r4,r4,r4
  800eac:	01500034 	movhi	r5,16384
  800eb0:	0007883a 	mov	r3,zero
  800eb4:	0005883a 	mov	r2,zero
  800eb8:	01c007c4 	movi	r7,31
  800ebc:	10800044 	addi	r2,r2,1
  800ec0:	21800236 	bltu	r4,r6,800ecc <__divsf3+0xfc>
  800ec4:	1946b03a 	or	r3,r3,r5
  800ec8:	2189c83a 	sub	r4,r4,r6
  800ecc:	280ad07a 	srli	r5,r5,1
  800ed0:	2109883a 	add	r4,r4,r4
  800ed4:	11fff91e 	bne	r2,r7,800ebc <__divsf3+0xec>
  800ed8:	19401fcc 	andi	r5,r3,127
  800edc:	00801004 	movi	r2,64
  800ee0:	28800a26 	beq	r5,r2,800f0c <__divsf3+0x13c>
  800ee4:	d8c00515 	stw	r3,20(sp)
  800ee8:	003fd506 	br	800e40 <__divsf3+0x70>
  800eec:	8809883a 	mov	r4,r17
  800ef0:	d9800215 	stw	r6,8(sp)
  800ef4:	080116c0 	call	80116c <__pack_f>
  800ef8:	dfc00c17 	ldw	ra,48(sp)
  800efc:	dc400b17 	ldw	r17,44(sp)
  800f00:	dc000a17 	ldw	r16,40(sp)
  800f04:	dec00d04 	addi	sp,sp,52
  800f08:	f800283a 	ret
  800f0c:	1880200c 	andi	r2,r3,128
  800f10:	103ff41e 	bne	r2,zero,800ee4 <__divsf3+0x114>
  800f14:	203ff326 	beq	r4,zero,800ee4 <__divsf3+0x114>
  800f18:	1947883a 	add	r3,r3,r5
  800f1c:	00bfe004 	movi	r2,-128
  800f20:	1886703a 	and	r3,r3,r2
  800f24:	d8c00515 	stw	r3,20(sp)
  800f28:	003fc506 	br	800e40 <__divsf3+0x70>
  800f2c:	8009883a 	mov	r4,r16
  800f30:	003fc406 	br	800e44 <__divsf3+0x74>
  800f34:	8809883a 	mov	r4,r17
  800f38:	d8000515 	stw	zero,20(sp)
  800f3c:	d8000415 	stw	zero,16(sp)
  800f40:	003fc006 	br	800e44 <__divsf3+0x74>

00800f44 <__nesf2>:
  800f44:	defff304 	addi	sp,sp,-52
  800f48:	dc400b15 	stw	r17,44(sp)
  800f4c:	dc400204 	addi	r17,sp,8
  800f50:	dc000a15 	stw	r16,40(sp)
  800f54:	d9000015 	stw	r4,0(sp)
  800f58:	d9400115 	stw	r5,4(sp)
  800f5c:	d809883a 	mov	r4,sp
  800f60:	880b883a 	mov	r5,r17
  800f64:	dc000604 	addi	r16,sp,24
  800f68:	dfc00c15 	stw	ra,48(sp)
  800f6c:	08012cc0 	call	8012cc <__unpack_f>
  800f70:	d9000104 	addi	r4,sp,4
  800f74:	800b883a 	mov	r5,r16
  800f78:	08012cc0 	call	8012cc <__unpack_f>
  800f7c:	d8800217 	ldw	r2,8(sp)
  800f80:	00c00044 	movi	r3,1
  800f84:	180d883a 	mov	r6,r3
  800f88:	1880062e 	bgeu	r3,r2,800fa4 <__nesf2+0x60>
  800f8c:	d8800617 	ldw	r2,24(sp)
  800f90:	8809883a 	mov	r4,r17
  800f94:	800b883a 	mov	r5,r16
  800f98:	1880022e 	bgeu	r3,r2,800fa4 <__nesf2+0x60>
  800f9c:	08013940 	call	801394 <__fpcmp_parts_f>
  800fa0:	100d883a 	mov	r6,r2
  800fa4:	3005883a 	mov	r2,r6
  800fa8:	dfc00c17 	ldw	ra,48(sp)
  800fac:	dc400b17 	ldw	r17,44(sp)
  800fb0:	dc000a17 	ldw	r16,40(sp)
  800fb4:	dec00d04 	addi	sp,sp,52
  800fb8:	f800283a 	ret

00800fbc <__floatsisf>:
  800fbc:	2006d7fa 	srli	r3,r4,31
  800fc0:	defffa04 	addi	sp,sp,-24
  800fc4:	008000c4 	movi	r2,3
  800fc8:	dfc00515 	stw	ra,20(sp)
  800fcc:	dc000415 	stw	r16,16(sp)
  800fd0:	d8800015 	stw	r2,0(sp)
  800fd4:	d8c00115 	stw	r3,4(sp)
  800fd8:	2000081e 	bne	r4,zero,800ffc <__floatsisf+0x40>
  800fdc:	00800084 	movi	r2,2
  800fe0:	d8800015 	stw	r2,0(sp)
  800fe4:	d809883a 	mov	r4,sp
  800fe8:	080116c0 	call	80116c <__pack_f>
  800fec:	dfc00517 	ldw	ra,20(sp)
  800ff0:	dc000417 	ldw	r16,16(sp)
  800ff4:	dec00604 	addi	sp,sp,24
  800ff8:	f800283a 	ret
  800ffc:	00800784 	movi	r2,30
  801000:	1807003a 	cmpeq	r3,r3,zero
  801004:	d8800215 	stw	r2,8(sp)
  801008:	18000e1e 	bne	r3,zero,801044 <__floatsisf+0x88>
  80100c:	00a00034 	movhi	r2,32768
  801010:	20800e26 	beq	r4,r2,80104c <__floatsisf+0x90>
  801014:	0121c83a 	sub	r16,zero,r4
  801018:	8009883a 	mov	r4,r16
  80101c:	dc000315 	stw	r16,12(sp)
  801020:	08010ec0 	call	8010ec <__clzsi2>
  801024:	117fffc4 	addi	r5,r2,-1
  801028:	017fee0e 	bge	zero,r5,800fe4 <__floatsisf+0x28>
  80102c:	d8800217 	ldw	r2,8(sp)
  801030:	8146983a 	sll	r3,r16,r5
  801034:	1145c83a 	sub	r2,r2,r5
  801038:	d8c00315 	stw	r3,12(sp)
  80103c:	d8800215 	stw	r2,8(sp)
  801040:	003fe806 	br	800fe4 <__floatsisf+0x28>
  801044:	2021883a 	mov	r16,r4
  801048:	003ff306 	br	801018 <__floatsisf+0x5c>
  80104c:	00b3c034 	movhi	r2,52992
  801050:	003fe606 	br	800fec <__floatsisf+0x30>

00801054 <__muldi3>:
  801054:	2011883a 	mov	r8,r4
  801058:	427fffcc 	andi	r9,r8,65535
  80105c:	4018d43a 	srli	r12,r8,16
  801060:	32bfffcc 	andi	r10,r6,65535
  801064:	3016d43a 	srli	r11,r6,16
  801068:	4a85383a 	mul	r2,r9,r10
  80106c:	6295383a 	mul	r10,r12,r10
  801070:	4ad3383a 	mul	r9,r9,r11
  801074:	113fffcc 	andi	r4,r2,65535
  801078:	1004d43a 	srli	r2,r2,16
  80107c:	4a93883a 	add	r9,r9,r10
  801080:	3807883a 	mov	r3,r7
  801084:	1245883a 	add	r2,r2,r9
  801088:	280f883a 	mov	r7,r5
  80108c:	180b883a 	mov	r5,r3
  801090:	1006943a 	slli	r3,r2,16
  801094:	defffd04 	addi	sp,sp,-12
  801098:	dc800215 	stw	r18,8(sp)
  80109c:	1907883a 	add	r3,r3,r4
  8010a0:	dc400115 	stw	r17,4(sp)
  8010a4:	dc000015 	stw	r16,0(sp)
  8010a8:	4165383a 	mul	r18,r8,r5
  8010ac:	31e3383a 	mul	r17,r6,r7
  8010b0:	1012d43a 	srli	r9,r2,16
  8010b4:	62d9383a 	mul	r12,r12,r11
  8010b8:	181f883a 	mov	r15,r3
  8010bc:	1280022e 	bgeu	r2,r10,8010c8 <__muldi3+0x74>
  8010c0:	00800074 	movhi	r2,1
  8010c4:	6099883a 	add	r12,r12,r2
  8010c8:	624d883a 	add	r6,r12,r9
  8010cc:	9187883a 	add	r3,r18,r6
  8010d0:	88c7883a 	add	r3,r17,r3
  8010d4:	7805883a 	mov	r2,r15
  8010d8:	dc800217 	ldw	r18,8(sp)
  8010dc:	dc400117 	ldw	r17,4(sp)
  8010e0:	dc000017 	ldw	r16,0(sp)
  8010e4:	dec00304 	addi	sp,sp,12
  8010e8:	f800283a 	ret

008010ec <__clzsi2>:
  8010ec:	00bfffd4 	movui	r2,65535
  8010f0:	11000e36 	bltu	r2,r4,80112c <__clzsi2+0x40>
  8010f4:	00803fc4 	movi	r2,255
  8010f8:	01400204 	movi	r5,8
  8010fc:	0007883a 	mov	r3,zero
  801100:	11001036 	bltu	r2,r4,801144 <__clzsi2+0x58>
  801104:	000b883a 	mov	r5,zero
  801108:	20c6d83a 	srl	r3,r4,r3
  80110c:	00802034 	movhi	r2,128
  801110:	10888004 	addi	r2,r2,8704
  801114:	1887883a 	add	r3,r3,r2
  801118:	18800003 	ldbu	r2,0(r3)
  80111c:	00c00804 	movi	r3,32
  801120:	2885883a 	add	r2,r5,r2
  801124:	1885c83a 	sub	r2,r3,r2
  801128:	f800283a 	ret
  80112c:	01400404 	movi	r5,16
  801130:	00804034 	movhi	r2,256
  801134:	10bfffc4 	addi	r2,r2,-1
  801138:	2807883a 	mov	r3,r5
  80113c:	113ff22e 	bgeu	r2,r4,801108 <__clzsi2+0x1c>
  801140:	01400604 	movi	r5,24
  801144:	2807883a 	mov	r3,r5
  801148:	20c6d83a 	srl	r3,r4,r3
  80114c:	00802034 	movhi	r2,128
  801150:	10888004 	addi	r2,r2,8704
  801154:	1887883a 	add	r3,r3,r2
  801158:	18800003 	ldbu	r2,0(r3)
  80115c:	00c00804 	movi	r3,32
  801160:	2885883a 	add	r2,r5,r2
  801164:	1885c83a 	sub	r2,r3,r2
  801168:	f800283a 	ret

0080116c <__pack_f>:
  80116c:	20c00017 	ldw	r3,0(r4)
  801170:	01c00044 	movi	r7,1
  801174:	21800317 	ldw	r6,12(r4)
  801178:	21400117 	ldw	r5,4(r4)
  80117c:	38c02d2e 	bgeu	r7,r3,801234 <__pack_f+0xc8>
  801180:	00800104 	movi	r2,4
  801184:	18802826 	beq	r3,r2,801228 <__pack_f+0xbc>
  801188:	00800084 	movi	r2,2
  80118c:	18800126 	beq	r3,r2,801194 <__pack_f+0x28>
  801190:	3000101e 	bne	r6,zero,8011d4 <__pack_f+0x68>
  801194:	000d883a 	mov	r6,zero
  801198:	0007883a 	mov	r3,zero
  80119c:	19003fcc 	andi	r4,r3,255
  8011a0:	200895fa 	slli	r4,r4,23
  8011a4:	00c02034 	movhi	r3,128
  8011a8:	18ffffc4 	addi	r3,r3,-1
  8011ac:	30c6703a 	and	r3,r6,r3
  8011b0:	10a0002c 	andhi	r2,r2,32768
  8011b4:	10c4b03a 	or	r2,r2,r3
  8011b8:	280a97fa 	slli	r5,r5,31
  8011bc:	1104b03a 	or	r2,r2,r4
  8011c0:	00e00034 	movhi	r3,32768
  8011c4:	18ffffc4 	addi	r3,r3,-1
  8011c8:	10c4703a 	and	r2,r2,r3
  8011cc:	1144b03a 	or	r2,r2,r5
  8011d0:	f800283a 	ret
  8011d4:	21000217 	ldw	r4,8(r4)
  8011d8:	00bfe084 	movi	r2,-126
  8011dc:	20801b16 	blt	r4,r2,80124c <__pack_f+0xe0>
  8011e0:	00801fc4 	movi	r2,127
  8011e4:	11001016 	blt	r2,r4,801228 <__pack_f+0xbc>
  8011e8:	308e703a 	and	r7,r6,r2
  8011ec:	2087883a 	add	r3,r4,r2
  8011f0:	00801004 	movi	r2,64
  8011f4:	38800526 	beq	r7,r2,80120c <__pack_f+0xa0>
  8011f8:	31800fc4 	addi	r6,r6,63
  8011fc:	30000716 	blt	r6,zero,80121c <__pack_f+0xb0>
  801200:	300490ba 	slli	r2,r6,2
  801204:	100cd27a 	srli	r6,r2,9
  801208:	003fe406 	br	80119c <__pack_f+0x30>
  80120c:	3080200c 	andi	r2,r6,128
  801210:	103ffa26 	beq	r2,zero,8011fc <__pack_f+0x90>
  801214:	31cd883a 	add	r6,r6,r7
  801218:	003ff806 	br	8011fc <__pack_f+0x90>
  80121c:	300cd07a 	srli	r6,r6,1
  801220:	18c00044 	addi	r3,r3,1
  801224:	003ff606 	br	801200 <__pack_f+0x94>
  801228:	000d883a 	mov	r6,zero
  80122c:	00ffffc4 	movi	r3,-1
  801230:	003fda06 	br	80119c <__pack_f+0x30>
  801234:	31800434 	orhi	r6,r6,16
  801238:	00802034 	movhi	r2,128
  80123c:	10bfffc4 	addi	r2,r2,-1
  801240:	308c703a 	and	r6,r6,r2
  801244:	00ffffc4 	movi	r3,-1
  801248:	003fd406 	br	80119c <__pack_f+0x30>
  80124c:	1109c83a 	sub	r4,r2,r4
  801250:	00800644 	movi	r2,25
  801254:	11001216 	blt	r2,r4,8012a0 <__pack_f+0x134>
  801258:	3904983a 	sll	r2,r7,r4
  80125c:	3106d83a 	srl	r3,r6,r4
  801260:	10bfffc4 	addi	r2,r2,-1
  801264:	3084703a 	and	r2,r6,r2
  801268:	1004c03a 	cmpne	r2,r2,zero
  80126c:	1886b03a 	or	r3,r3,r2
  801270:	19001fcc 	andi	r4,r3,127
  801274:	00801004 	movi	r2,64
  801278:	20800c26 	beq	r4,r2,8012ac <__pack_f+0x140>
  80127c:	18c00fc4 	addi	r3,r3,63
  801280:	00900034 	movhi	r2,16384
  801284:	10bfffc4 	addi	r2,r2,-1
  801288:	180cd1fa 	srli	r6,r3,7
  80128c:	10c7803a 	cmpltu	r3,r2,r3
  801290:	00802034 	movhi	r2,128
  801294:	10bfffc4 	addi	r2,r2,-1
  801298:	308c703a 	and	r6,r6,r2
  80129c:	003fbf06 	br	80119c <__pack_f+0x30>
  8012a0:	0007883a 	mov	r3,zero
  8012a4:	000d883a 	mov	r6,zero
  8012a8:	003ff906 	br	801290 <__pack_f+0x124>
  8012ac:	1880200c 	andi	r2,r3,128
  8012b0:	10000126 	beq	r2,zero,8012b8 <__pack_f+0x14c>
  8012b4:	1907883a 	add	r3,r3,r4
  8012b8:	180cd1fa 	srli	r6,r3,7
  8012bc:	00900034 	movhi	r2,16384
  8012c0:	10bfffc4 	addi	r2,r2,-1
  8012c4:	10c7803a 	cmpltu	r3,r2,r3
  8012c8:	003ff106 	br	801290 <__pack_f+0x124>

008012cc <__unpack_f>:
  8012cc:	21800017 	ldw	r6,0(r4)
  8012d0:	00c02034 	movhi	r3,128
  8012d4:	18ffffc4 	addi	r3,r3,-1
  8012d8:	3004d5fa 	srli	r2,r6,23
  8012dc:	3008d7fa 	srli	r4,r6,31
  8012e0:	30ce703a 	and	r7,r6,r3
  8012e4:	10c03fcc 	andi	r3,r2,255
  8012e8:	29000115 	stw	r4,4(r5)
  8012ec:	1800131e 	bne	r3,zero,80133c <__unpack_f+0x70>
  8012f0:	38000f26 	beq	r7,zero,801330 <__unpack_f+0x64>
  8012f4:	380691fa 	slli	r3,r7,7
  8012f8:	01bfe084 	movi	r6,-126
  8012fc:	008000c4 	movi	r2,3
  801300:	01100034 	movhi	r4,16384
  801304:	213fffc4 	addi	r4,r4,-1
  801308:	28800015 	stw	r2,0(r5)
  80130c:	29800215 	stw	r6,8(r5)
  801310:	20c00536 	bltu	r4,r3,801328 <__unpack_f+0x5c>
  801314:	3005883a 	mov	r2,r6
  801318:	18c7883a 	add	r3,r3,r3
  80131c:	10bfffc4 	addi	r2,r2,-1
  801320:	20fffd2e 	bgeu	r4,r3,801318 <__unpack_f+0x4c>
  801324:	28800215 	stw	r2,8(r5)
  801328:	28c00315 	stw	r3,12(r5)
  80132c:	f800283a 	ret
  801330:	00800084 	movi	r2,2
  801334:	28800015 	stw	r2,0(r5)
  801338:	f800283a 	ret
  80133c:	00803fc4 	movi	r2,255
  801340:	18800826 	beq	r3,r2,801364 <__unpack_f+0x98>
  801344:	380491fa 	slli	r2,r7,7
  801348:	18ffe044 	addi	r3,r3,-127
  80134c:	28c00215 	stw	r3,8(r5)
  801350:	10900034 	orhi	r2,r2,16384
  801354:	28800315 	stw	r2,12(r5)
  801358:	008000c4 	movi	r2,3
  80135c:	28800015 	stw	r2,0(r5)
  801360:	f800283a 	ret
  801364:	3800031e 	bne	r7,zero,801374 <__unpack_f+0xa8>
  801368:	00800104 	movi	r2,4
  80136c:	28800015 	stw	r2,0(r5)
  801370:	f800283a 	ret
  801374:	3080042c 	andhi	r2,r6,16
  801378:	10000426 	beq	r2,zero,80138c <__unpack_f+0xc0>
  80137c:	00800044 	movi	r2,1
  801380:	28800015 	stw	r2,0(r5)
  801384:	29c00315 	stw	r7,12(r5)
  801388:	f800283a 	ret
  80138c:	28000015 	stw	zero,0(r5)
  801390:	003ffc06 	br	801384 <__unpack_f+0xb8>

00801394 <__fpcmp_parts_f>:
  801394:	21800017 	ldw	r6,0(r4)
  801398:	00c00044 	movi	r3,1
  80139c:	19800a2e 	bgeu	r3,r6,8013c8 <__fpcmp_parts_f+0x34>
  8013a0:	28800017 	ldw	r2,0(r5)
  8013a4:	1880082e 	bgeu	r3,r2,8013c8 <__fpcmp_parts_f+0x34>
  8013a8:	00c00104 	movi	r3,4
  8013ac:	30c01e26 	beq	r6,r3,801428 <__fpcmp_parts_f+0x94>
  8013b0:	10c01a26 	beq	r2,r3,80141c <__fpcmp_parts_f+0x88>
  8013b4:	00c00084 	movi	r3,2
  8013b8:	30c00526 	beq	r6,r3,8013d0 <__fpcmp_parts_f+0x3c>
  8013bc:	10c0071e 	bne	r2,r3,8013dc <__fpcmp_parts_f+0x48>
  8013c0:	20800117 	ldw	r2,4(r4)
  8013c4:	1000091e 	bne	r2,zero,8013ec <__fpcmp_parts_f+0x58>
  8013c8:	00800044 	movi	r2,1
  8013cc:	f800283a 	ret
  8013d0:	10c0121e 	bne	r2,r3,80141c <__fpcmp_parts_f+0x88>
  8013d4:	0005883a 	mov	r2,zero
  8013d8:	f800283a 	ret
  8013dc:	20c00117 	ldw	r3,4(r4)
  8013e0:	28800117 	ldw	r2,4(r5)
  8013e4:	18800326 	beq	r3,r2,8013f4 <__fpcmp_parts_f+0x60>
  8013e8:	183ff726 	beq	r3,zero,8013c8 <__fpcmp_parts_f+0x34>
  8013ec:	00bfffc4 	movi	r2,-1
  8013f0:	f800283a 	ret
  8013f4:	21800217 	ldw	r6,8(r4)
  8013f8:	28800217 	ldw	r2,8(r5)
  8013fc:	11bffa16 	blt	r2,r6,8013e8 <__fpcmp_parts_f+0x54>
  801400:	30800416 	blt	r6,r2,801414 <__fpcmp_parts_f+0x80>
  801404:	21000317 	ldw	r4,12(r4)
  801408:	29400317 	ldw	r5,12(r5)
  80140c:	293ff636 	bltu	r5,r4,8013e8 <__fpcmp_parts_f+0x54>
  801410:	217ff02e 	bgeu	r4,r5,8013d4 <__fpcmp_parts_f+0x40>
  801414:	183fec1e 	bne	r3,zero,8013c8 <__fpcmp_parts_f+0x34>
  801418:	003ff406 	br	8013ec <__fpcmp_parts_f+0x58>
  80141c:	28800117 	ldw	r2,4(r5)
  801420:	103fe91e 	bne	r2,zero,8013c8 <__fpcmp_parts_f+0x34>
  801424:	003ff106 	br	8013ec <__fpcmp_parts_f+0x58>
  801428:	11bfe51e 	bne	r2,r6,8013c0 <__fpcmp_parts_f+0x2c>
  80142c:	28c00117 	ldw	r3,4(r5)
  801430:	20800117 	ldw	r2,4(r4)
  801434:	1885c83a 	sub	r2,r3,r2
  801438:	f800283a 	ret

0080143c <alt_dcache_flush>:
  80143c:	2145883a 	add	r2,r4,r5
  801440:	2007883a 	mov	r3,r4
  801444:	2080032e 	bgeu	r4,r2,801454 <alt_dcache_flush+0x18>
  801448:	1800001b 	flushda	0(r3)
  80144c:	18c00804 	addi	r3,r3,32
  801450:	18bffd36 	bltu	r3,r2,801448 <alt_dcache_flush+0xc>
  801454:	208007cc 	andi	r2,r4,31
  801458:	10000126 	beq	r2,zero,801460 <alt_dcache_flush+0x24>
  80145c:	1800001b 	flushda	0(r3)
  801460:	f800283a 	ret

00801464 <alt_ic_irq_enabled>:
  801464:	000530fa 	rdctl	r2,ienable
  801468:	00c00044 	movi	r3,1
  80146c:	1946983a 	sll	r3,r3,r5
  801470:	10c4703a 	and	r2,r2,r3
  801474:	1004c03a 	cmpne	r2,r2,zero
  801478:	f800283a 	ret

0080147c <alt_ic_irq_enable>:
  80147c:	000d303a 	rdctl	r6,status
  801480:	00bfff84 	movi	r2,-2
  801484:	3084703a 	and	r2,r6,r2
  801488:	1001703a 	wrctl	status,r2
  80148c:	01002034 	movhi	r4,128
  801490:	210a3904 	addi	r4,r4,10468
  801494:	00800044 	movi	r2,1
  801498:	20c00017 	ldw	r3,0(r4)
  80149c:	1144983a 	sll	r2,r2,r5
  8014a0:	10c4b03a 	or	r2,r2,r3
  8014a4:	20800015 	stw	r2,0(r4)
  8014a8:	20c00017 	ldw	r3,0(r4)
  8014ac:	180170fa 	wrctl	ienable,r3
  8014b0:	3001703a 	wrctl	status,r6
  8014b4:	0005883a 	mov	r2,zero
  8014b8:	f800283a 	ret

008014bc <alt_ic_irq_disable>:
  8014bc:	000d303a 	rdctl	r6,status
  8014c0:	00bfff84 	movi	r2,-2
  8014c4:	3084703a 	and	r2,r6,r2
  8014c8:	1001703a 	wrctl	status,r2
  8014cc:	01002034 	movhi	r4,128
  8014d0:	210a3904 	addi	r4,r4,10468
  8014d4:	00bfff84 	movi	r2,-2
  8014d8:	20c00017 	ldw	r3,0(r4)
  8014dc:	1144183a 	rol	r2,r2,r5
  8014e0:	10c4703a 	and	r2,r2,r3
  8014e4:	20800015 	stw	r2,0(r4)
  8014e8:	20c00017 	ldw	r3,0(r4)
  8014ec:	180170fa 	wrctl	ienable,r3
  8014f0:	3001703a 	wrctl	status,r6
  8014f4:	0005883a 	mov	r2,zero
  8014f8:	f800283a 	ret

008014fc <alt_ic_isr_register>:
  8014fc:	08015001 	jmpi	801500 <alt_iic_isr_register>

00801500 <alt_iic_isr_register>:
  801500:	defffe04 	addi	sp,sp,-8
  801504:	008007c4 	movi	r2,31
  801508:	dfc00115 	stw	ra,4(sp)
  80150c:	dc000015 	stw	r16,0(sp)
  801510:	023ffa84 	movi	r8,-22
  801514:	1140050e 	bge	r2,r5,80152c <alt_iic_isr_register+0x2c>
  801518:	4005883a 	mov	r2,r8
  80151c:	dfc00117 	ldw	ra,4(sp)
  801520:	dc000017 	ldw	r16,0(sp)
  801524:	dec00204 	addi	sp,sp,8
  801528:	f800283a 	ret
  80152c:	0021303a 	rdctl	r16,status
  801530:	00bfff84 	movi	r2,-2
  801534:	8084703a 	and	r2,r16,r2
  801538:	1001703a 	wrctl	status,r2
  80153c:	280690fa 	slli	r3,r5,3
  801540:	00802034 	movhi	r2,128
  801544:	108a4004 	addi	r2,r2,10496
  801548:	1887883a 	add	r3,r3,r2
  80154c:	19c00115 	stw	r7,4(r3)
  801550:	19800015 	stw	r6,0(r3)
  801554:	30000826 	beq	r6,zero,801578 <alt_iic_isr_register+0x78>
  801558:	080147c0 	call	80147c <alt_ic_irq_enable>
  80155c:	1011883a 	mov	r8,r2
  801560:	8001703a 	wrctl	status,r16
  801564:	4005883a 	mov	r2,r8
  801568:	dfc00117 	ldw	ra,4(sp)
  80156c:	dc000017 	ldw	r16,0(sp)
  801570:	dec00204 	addi	sp,sp,8
  801574:	f800283a 	ret
  801578:	08014bc0 	call	8014bc <alt_ic_irq_disable>
  80157c:	1011883a 	mov	r8,r2
  801580:	8001703a 	wrctl	status,r16
  801584:	003ff706 	br	801564 <alt_iic_isr_register+0x64>

00801588 <alt_load>:
  801588:	deffff04 	addi	sp,sp,-4
  80158c:	01002034 	movhi	r4,128
  801590:	21097f04 	addi	r4,r4,9724
  801594:	00c02034 	movhi	r3,128
  801598:	18c8c704 	addi	r3,r3,8988
  80159c:	dfc00015 	stw	ra,0(sp)
  8015a0:	20c00826 	beq	r4,r3,8015c4 <alt_load+0x3c>
  8015a4:	01402034 	movhi	r5,128
  8015a8:	29497f04 	addi	r5,r5,9724
  8015ac:	19400526 	beq	r3,r5,8015c4 <alt_load+0x3c>
  8015b0:	20800017 	ldw	r2,0(r4)
  8015b4:	21000104 	addi	r4,r4,4
  8015b8:	18800015 	stw	r2,0(r3)
  8015bc:	18c00104 	addi	r3,r3,4
  8015c0:	28fffb1e 	bne	r5,r3,8015b0 <alt_load+0x28>
  8015c4:	01002034 	movhi	r4,128
  8015c8:	21000804 	addi	r4,r4,32
  8015cc:	00c02034 	movhi	r3,128
  8015d0:	18c00804 	addi	r3,r3,32
  8015d4:	20c00826 	beq	r4,r3,8015f8 <alt_load+0x70>
  8015d8:	01402034 	movhi	r5,128
  8015dc:	29406104 	addi	r5,r5,388
  8015e0:	19400526 	beq	r3,r5,8015f8 <alt_load+0x70>
  8015e4:	20800017 	ldw	r2,0(r4)
  8015e8:	21000104 	addi	r4,r4,4
  8015ec:	18800015 	stw	r2,0(r3)
  8015f0:	18c00104 	addi	r3,r3,4
  8015f4:	28fffb1e 	bne	r5,r3,8015e4 <alt_load+0x5c>
  8015f8:	01002034 	movhi	r4,128
  8015fc:	21087c04 	addi	r4,r4,8688
  801600:	00c02034 	movhi	r3,128
  801604:	18c87c04 	addi	r3,r3,8688
  801608:	20c00826 	beq	r4,r3,80162c <alt_load+0xa4>
  80160c:	01402034 	movhi	r5,128
  801610:	2948c704 	addi	r5,r5,8988
  801614:	19400526 	beq	r3,r5,80162c <alt_load+0xa4>
  801618:	20800017 	ldw	r2,0(r4)
  80161c:	21000104 	addi	r4,r4,4
  801620:	18800015 	stw	r2,0(r3)
  801624:	18c00104 	addi	r3,r3,4
  801628:	28fffb1e 	bne	r5,r3,801618 <alt_load+0x90>
  80162c:	080194c0 	call	80194c <alt_dcache_flush_all>
  801630:	dfc00017 	ldw	ra,0(sp)
  801634:	dec00104 	addi	sp,sp,4
  801638:	08019e81 	jmpi	8019e8 <alt_icache_flush_all>

0080163c <alt_main>:
  80163c:	defffe04 	addi	sp,sp,-8
  801640:	0009883a 	mov	r4,zero
  801644:	dfc00115 	stw	ra,4(sp)
  801648:	dc400015 	stw	r17,0(sp)
  80164c:	08016c80 	call	8016c8 <alt_irq_init>
  801650:	080168c0 	call	80168c <alt_sys_init>
  801654:	01002034 	movhi	r4,128
  801658:	2108c004 	addi	r4,r4,8960
  80165c:	200b883a 	mov	r5,r4
  801660:	200d883a 	mov	r6,r4
  801664:	08019f40 	call	8019f4 <alt_io_redirect>
  801668:	d120c617 	ldw	r4,-31976(gp)
  80166c:	d160c717 	ldw	r5,-31972(gp)
  801670:	d1a0c817 	ldw	r6,-31968(gp)
  801674:	08008f40 	call	8008f4 <main>
  801678:	1023883a 	mov	r17,r2
  80167c:	01000044 	movi	r4,1
  801680:	080185c0 	call	80185c <close>
  801684:	8809883a 	mov	r4,r17
  801688:	0801f9c0 	call	801f9c <exit>

0080168c <alt_sys_init>:
  80168c:	deffff04 	addi	sp,sp,-4
  801690:	01004034 	movhi	r4,256
  801694:	21040004 	addi	r4,r4,4096
  801698:	000b883a 	mov	r5,zero
  80169c:	01800404 	movi	r6,16
  8016a0:	01c0fa04 	movi	r7,1000
  8016a4:	dfc00015 	stw	ra,0(sp)
  8016a8:	08017d00 	call	8017d0 <alt_avalon_timer_sc_init>
  8016ac:	01002034 	movhi	r4,128
  8016b0:	2108c704 	addi	r4,r4,8988
  8016b4:	01402034 	movhi	r5,128
  8016b8:	29497704 	addi	r5,r5,9692
  8016bc:	dfc00017 	ldw	ra,0(sp)
  8016c0:	dec00104 	addi	sp,sp,4
  8016c4:	080196c1 	jmpi	80196c <alt_dev_llist_insert>

008016c8 <alt_irq_init>:
  8016c8:	deffff04 	addi	sp,sp,-4
  8016cc:	dfc00015 	stw	ra,0(sp)
  8016d0:	0801db80 	call	801db8 <altera_nios2_qsys_irq_init>
  8016d4:	00800044 	movi	r2,1
  8016d8:	1001703a 	wrctl	status,r2
  8016dc:	dfc00017 	ldw	ra,0(sp)
  8016e0:	dec00104 	addi	sp,sp,4
  8016e4:	f800283a 	ret

008016e8 <altera_avalon_jtag_uart_write_fd>:
  8016e8:	20800017 	ldw	r2,0(r4)
  8016ec:	21c00217 	ldw	r7,8(r4)
  8016f0:	11000a04 	addi	r4,r2,40
  8016f4:	08017941 	jmpi	801794 <altera_avalon_jtag_uart_write>

008016f8 <altera_avalon_jtag_uart_read_fd>:
  8016f8:	20800017 	ldw	r2,0(r4)
  8016fc:	21c00217 	ldw	r7,8(r4)
  801700:	11000a04 	addi	r4,r2,40
  801704:	08017081 	jmpi	801708 <altera_avalon_jtag_uart_read>

00801708 <altera_avalon_jtag_uart_read>:
  801708:	2991883a 	add	r8,r5,r6
  80170c:	21000017 	ldw	r4,0(r4)
  801710:	2a00102e 	bgeu	r5,r8,801754 <altera_avalon_jtag_uart_read+0x4c>
  801714:	39d0000c 	andi	r7,r7,16384
  801718:	3800141e 	bne	r7,zero,80176c <altera_avalon_jtag_uart_read+0x64>
  80171c:	2807883a 	mov	r3,r5
  801720:	21800037 	ldwio	r6,0(r4)
  801724:	30a0000c 	andi	r2,r6,32768
  801728:	1000061e 	bne	r2,zero,801744 <altera_avalon_jtag_uart_read+0x3c>
  80172c:	28c0031e 	bne	r5,r3,80173c <altera_avalon_jtag_uart_read+0x34>
  801730:	2807883a 	mov	r3,r5
  801734:	1a3ffa36 	bltu	r3,r8,801720 <altera_avalon_jtag_uart_read+0x18>
  801738:	28c00726 	beq	r5,r3,801758 <altera_avalon_jtag_uart_read+0x50>
  80173c:	1945c83a 	sub	r2,r3,r5
  801740:	f800283a 	ret
  801744:	19800005 	stb	r6,0(r3)
  801748:	18c00044 	addi	r3,r3,1
  80174c:	1a3ff436 	bltu	r3,r8,801720 <altera_avalon_jtag_uart_read+0x18>
  801750:	003ff906 	br	801738 <altera_avalon_jtag_uart_read+0x30>
  801754:	39d0000c 	andi	r7,r7,16384
  801758:	38000226 	beq	r7,zero,801764 <altera_avalon_jtag_uart_read+0x5c>
  80175c:	00bffd44 	movi	r2,-11
  801760:	f800283a 	ret
  801764:	00bffec4 	movi	r2,-5
  801768:	f800283a 	ret
  80176c:	2807883a 	mov	r3,r5
  801770:	21800037 	ldwio	r6,0(r4)
  801774:	30a0000c 	andi	r2,r6,32768
  801778:	10000426 	beq	r2,zero,80178c <altera_avalon_jtag_uart_read+0x84>
  80177c:	19800005 	stb	r6,0(r3)
  801780:	18c00044 	addi	r3,r3,1
  801784:	1a3ffa1e 	bne	r3,r8,801770 <altera_avalon_jtag_uart_read+0x68>
  801788:	003feb06 	br	801738 <altera_avalon_jtag_uart_read+0x30>
  80178c:	28fff326 	beq	r5,r3,80175c <altera_avalon_jtag_uart_read+0x54>
  801790:	003fea06 	br	80173c <altera_avalon_jtag_uart_read+0x34>

00801794 <altera_avalon_jtag_uart_write>:
  801794:	314f883a 	add	r7,r6,r5
  801798:	21000017 	ldw	r4,0(r4)
  80179c:	29c0052e 	bgeu	r5,r7,8017b4 <altera_avalon_jtag_uart_write+0x20>
  8017a0:	20c00104 	addi	r3,r4,4
  8017a4:	18800037 	ldwio	r2,0(r3)
  8017a8:	10bfffec 	andhi	r2,r2,65535
  8017ac:	1000031e 	bne	r2,zero,8017bc <altera_avalon_jtag_uart_write+0x28>
  8017b0:	29fffc36 	bltu	r5,r7,8017a4 <altera_avalon_jtag_uart_write+0x10>
  8017b4:	3005883a 	mov	r2,r6
  8017b8:	f800283a 	ret
  8017bc:	28800007 	ldb	r2,0(r5)
  8017c0:	29400044 	addi	r5,r5,1
  8017c4:	20800035 	stwio	r2,0(r4)
  8017c8:	29fff636 	bltu	r5,r7,8017a4 <altera_avalon_jtag_uart_write+0x10>
  8017cc:	003ff906 	br	8017b4 <altera_avalon_jtag_uart_write+0x20>

008017d0 <alt_avalon_timer_sc_init>:
  8017d0:	02002034 	movhi	r8,128
  8017d4:	420a3d04 	addi	r8,r8,10484
  8017d8:	40800017 	ldw	r2,0(r8)
  8017dc:	defffe04 	addi	sp,sp,-8
  8017e0:	3807883a 	mov	r3,r7
  8017e4:	dfc00115 	stw	ra,4(sp)
  8017e8:	200f883a 	mov	r7,r4
  8017ec:	1000011e 	bne	r2,zero,8017f4 <alt_avalon_timer_sc_init+0x24>
  8017f0:	40c00015 	stw	r3,0(r8)
  8017f4:	008001c4 	movi	r2,7
  8017f8:	38800135 	stwio	r2,4(r7)
  8017fc:	2809883a 	mov	r4,r5
  801800:	300b883a 	mov	r5,r6
  801804:	01802034 	movhi	r6,128
  801808:	31860804 	addi	r6,r6,6176
  80180c:	d8000015 	stw	zero,0(sp)
  801810:	08014fc0 	call	8014fc <alt_ic_isr_register>
  801814:	dfc00117 	ldw	ra,4(sp)
  801818:	dec00204 	addi	sp,sp,8
  80181c:	f800283a 	ret

00801820 <alt_avalon_timer_sc_irq>:
  801820:	defffe04 	addi	sp,sp,-8
  801824:	dfc00115 	stw	ra,4(sp)
  801828:	dc000015 	stw	r16,0(sp)
  80182c:	20000035 	stwio	zero,0(r4)
  801830:	20800137 	ldwio	r2,4(r4)
  801834:	0021303a 	rdctl	r16,status
  801838:	00bfff84 	movi	r2,-2
  80183c:	8084703a 	and	r2,r16,r2
  801840:	1001703a 	wrctl	status,r2
  801844:	0801cd00 	call	801cd0 <alt_tick>
  801848:	8001703a 	wrctl	status,r16
  80184c:	dfc00117 	ldw	ra,4(sp)
  801850:	dc000017 	ldw	r16,0(sp)
  801854:	dec00204 	addi	sp,sp,8
  801858:	f800283a 	ret

0080185c <close>:
  80185c:	defffd04 	addi	sp,sp,-12
  801860:	dc000015 	stw	r16,0(sp)
  801864:	dfc00215 	stw	ra,8(sp)
  801868:	dc400115 	stw	r17,4(sp)
  80186c:	2021883a 	mov	r16,r4
  801870:	20001516 	blt	r4,zero,8018c8 <close+0x6c>
  801874:	20c00324 	muli	r3,r4,12
  801878:	00802034 	movhi	r2,128
  80187c:	1088dc04 	addi	r2,r2,9072
  801880:	1887883a 	add	r3,r3,r2
  801884:	18001026 	beq	r3,zero,8018c8 <close+0x6c>
  801888:	18800017 	ldw	r2,0(r3)
  80188c:	10800417 	ldw	r2,16(r2)
  801890:	10001c26 	beq	r2,zero,801904 <close+0xa8>
  801894:	1809883a 	mov	r4,r3
  801898:	103ee83a 	callr	r2
  80189c:	1023883a 	mov	r17,r2
  8018a0:	8009883a 	mov	r4,r16
  8018a4:	0801c780 	call	801c78 <alt_release_fd>
  8018a8:	88001b16 	blt	r17,zero,801918 <close+0xbc>
  8018ac:	0007883a 	mov	r3,zero
  8018b0:	1805883a 	mov	r2,r3
  8018b4:	dfc00217 	ldw	ra,8(sp)
  8018b8:	dc400117 	ldw	r17,4(sp)
  8018bc:	dc000017 	ldw	r16,0(sp)
  8018c0:	dec00304 	addi	sp,sp,12
  8018c4:	f800283a 	ret
  8018c8:	00802034 	movhi	r2,128
  8018cc:	10897a04 	addi	r2,r2,9704
  8018d0:	10800017 	ldw	r2,0(r2)
  8018d4:	10000d26 	beq	r2,zero,80190c <close+0xb0>
  8018d8:	103ee83a 	callr	r2
  8018dc:	1009883a 	mov	r4,r2
  8018e0:	00ffffc4 	movi	r3,-1
  8018e4:	00801444 	movi	r2,81
  8018e8:	20800015 	stw	r2,0(r4)
  8018ec:	1805883a 	mov	r2,r3
  8018f0:	dfc00217 	ldw	ra,8(sp)
  8018f4:	dc400117 	ldw	r17,4(sp)
  8018f8:	dc000017 	ldw	r16,0(sp)
  8018fc:	dec00304 	addi	sp,sp,12
  801900:	f800283a 	ret
  801904:	0801c780 	call	801c78 <alt_release_fd>
  801908:	003fe806 	br	8018ac <close+0x50>
  80190c:	01002034 	movhi	r4,128
  801910:	210a3f04 	addi	r4,r4,10492
  801914:	003ff206 	br	8018e0 <close+0x84>
  801918:	00802034 	movhi	r2,128
  80191c:	10897a04 	addi	r2,r2,9704
  801920:	10800017 	ldw	r2,0(r2)
  801924:	10000626 	beq	r2,zero,801940 <close+0xe4>
  801928:	103ee83a 	callr	r2
  80192c:	1009883a 	mov	r4,r2
  801930:	0445c83a 	sub	r2,zero,r17
  801934:	00ffffc4 	movi	r3,-1
  801938:	20800015 	stw	r2,0(r4)
  80193c:	003fdc06 	br	8018b0 <close+0x54>
  801940:	01002034 	movhi	r4,128
  801944:	210a3f04 	addi	r4,r4,10492
  801948:	003ff906 	br	801930 <close+0xd4>

0080194c <alt_dcache_flush_all>:
  80194c:	0005883a 	mov	r2,zero
  801950:	00c20004 	movi	r3,2048
  801954:	1000003b 	flushd	0(r2)
  801958:	10800804 	addi	r2,r2,32
  80195c:	10fffd1e 	bne	r2,r3,801954 <alt_dcache_flush_all+0x8>
  801960:	f800283a 	ret

00801964 <alt_dev_null_write>:
  801964:	3005883a 	mov	r2,r6
  801968:	f800283a 	ret

0080196c <alt_dev_llist_insert>:
  80196c:	deffff04 	addi	sp,sp,-4
  801970:	dfc00015 	stw	ra,0(sp)
  801974:	20000d26 	beq	r4,zero,8019ac <alt_dev_llist_insert+0x40>
  801978:	20800217 	ldw	r2,8(r4)
  80197c:	000d883a 	mov	r6,zero
  801980:	10000a26 	beq	r2,zero,8019ac <alt_dev_llist_insert+0x40>
  801984:	28c00017 	ldw	r3,0(r5)
  801988:	21400115 	stw	r5,4(r4)
  80198c:	20c00015 	stw	r3,0(r4)
  801990:	28800017 	ldw	r2,0(r5)
  801994:	29000015 	stw	r4,0(r5)
  801998:	11000115 	stw	r4,4(r2)
  80199c:	3005883a 	mov	r2,r6
  8019a0:	dfc00017 	ldw	ra,0(sp)
  8019a4:	dec00104 	addi	sp,sp,4
  8019a8:	f800283a 	ret
  8019ac:	00802034 	movhi	r2,128
  8019b0:	10897a04 	addi	r2,r2,9704
  8019b4:	10800017 	ldw	r2,0(r2)
  8019b8:	00c02034 	movhi	r3,128
  8019bc:	18ca3f04 	addi	r3,r3,10492
  8019c0:	10000226 	beq	r2,zero,8019cc <alt_dev_llist_insert+0x60>
  8019c4:	103ee83a 	callr	r2
  8019c8:	1007883a 	mov	r3,r2
  8019cc:	01bffa84 	movi	r6,-22
  8019d0:	00800584 	movi	r2,22
  8019d4:	18800015 	stw	r2,0(r3)
  8019d8:	3005883a 	mov	r2,r6
  8019dc:	dfc00017 	ldw	ra,0(sp)
  8019e0:	dec00104 	addi	sp,sp,4
  8019e4:	f800283a 	ret

008019e8 <alt_icache_flush_all>:
  8019e8:	0009883a 	mov	r4,zero
  8019ec:	01420004 	movi	r5,2048
  8019f0:	0801f641 	jmpi	801f64 <alt_icache_flush>

008019f4 <alt_io_redirect>:
  8019f4:	defffd04 	addi	sp,sp,-12
  8019f8:	dc400115 	stw	r17,4(sp)
  8019fc:	dc000015 	stw	r16,0(sp)
  801a00:	3023883a 	mov	r17,r6
  801a04:	2821883a 	mov	r16,r5
  801a08:	01807fc4 	movi	r6,511
  801a0c:	01400044 	movi	r5,1
  801a10:	dfc00215 	stw	ra,8(sp)
  801a14:	0801af80 	call	801af8 <open>
  801a18:	10c00324 	muli	r3,r2,12
  801a1c:	01802034 	movhi	r6,128
  801a20:	3188dc04 	addi	r6,r6,9072
  801a24:	1009883a 	mov	r4,r2
  801a28:	198b883a 	add	r5,r3,r6
  801a2c:	10000716 	blt	r2,zero,801a4c <alt_io_redirect+0x58>
  801a30:	28800217 	ldw	r2,8(r5)
  801a34:	28c00017 	ldw	r3,0(r5)
  801a38:	29400117 	ldw	r5,4(r5)
  801a3c:	30800515 	stw	r2,20(r6)
  801a40:	30c00315 	stw	r3,12(r6)
  801a44:	31400415 	stw	r5,16(r6)
  801a48:	0801c780 	call	801c78 <alt_release_fd>
  801a4c:	8009883a 	mov	r4,r16
  801a50:	000b883a 	mov	r5,zero
  801a54:	01807fc4 	movi	r6,511
  801a58:	0801af80 	call	801af8 <open>
  801a5c:	10c00324 	muli	r3,r2,12
  801a60:	01802034 	movhi	r6,128
  801a64:	3188dc04 	addi	r6,r6,9072
  801a68:	1009883a 	mov	r4,r2
  801a6c:	198b883a 	add	r5,r3,r6
  801a70:	10000716 	blt	r2,zero,801a90 <alt_io_redirect+0x9c>
  801a74:	28800217 	ldw	r2,8(r5)
  801a78:	28c00017 	ldw	r3,0(r5)
  801a7c:	29400117 	ldw	r5,4(r5)
  801a80:	30800215 	stw	r2,8(r6)
  801a84:	30c00015 	stw	r3,0(r6)
  801a88:	31400115 	stw	r5,4(r6)
  801a8c:	0801c780 	call	801c78 <alt_release_fd>
  801a90:	8809883a 	mov	r4,r17
  801a94:	01400044 	movi	r5,1
  801a98:	01807fc4 	movi	r6,511
  801a9c:	0801af80 	call	801af8 <open>
  801aa0:	10c00324 	muli	r3,r2,12
  801aa4:	01802034 	movhi	r6,128
  801aa8:	3188dc04 	addi	r6,r6,9072
  801aac:	1009883a 	mov	r4,r2
  801ab0:	198b883a 	add	r5,r3,r6
  801ab4:	10000b16 	blt	r2,zero,801ae4 <alt_io_redirect+0xf0>
  801ab8:	28800217 	ldw	r2,8(r5)
  801abc:	28c00017 	ldw	r3,0(r5)
  801ac0:	29400117 	ldw	r5,4(r5)
  801ac4:	30800815 	stw	r2,32(r6)
  801ac8:	30c00615 	stw	r3,24(r6)
  801acc:	31400715 	stw	r5,28(r6)
  801ad0:	dfc00217 	ldw	ra,8(sp)
  801ad4:	dc400117 	ldw	r17,4(sp)
  801ad8:	dc000017 	ldw	r16,0(sp)
  801adc:	dec00304 	addi	sp,sp,12
  801ae0:	0801c781 	jmpi	801c78 <alt_release_fd>
  801ae4:	dfc00217 	ldw	ra,8(sp)
  801ae8:	dc400117 	ldw	r17,4(sp)
  801aec:	dc000017 	ldw	r16,0(sp)
  801af0:	dec00304 	addi	sp,sp,12
  801af4:	f800283a 	ret

00801af8 <open>:
  801af8:	defff904 	addi	sp,sp,-28
  801afc:	dcc00315 	stw	r19,12(sp)
  801b00:	2827883a 	mov	r19,r5
  801b04:	01402034 	movhi	r5,128
  801b08:	29497704 	addi	r5,r5,9692
  801b0c:	dd400515 	stw	r21,20(sp)
  801b10:	dd000415 	stw	r20,16(sp)
  801b14:	dc400115 	stw	r17,4(sp)
  801b18:	dfc00615 	stw	ra,24(sp)
  801b1c:	dc800215 	stw	r18,8(sp)
  801b20:	dc000015 	stw	r16,0(sp)
  801b24:	302b883a 	mov	r21,r6
  801b28:	2029883a 	mov	r20,r4
  801b2c:	0801dc00 	call	801dc0 <alt_find_dev>
  801b30:	1023883a 	mov	r17,r2
  801b34:	10004726 	beq	r2,zero,801c54 <open+0x15c>
  801b38:	0025883a 	mov	r18,zero
  801b3c:	8809883a 	mov	r4,r17
  801b40:	0801f040 	call	801f04 <alt_get_fd>
  801b44:	1021883a 	mov	r16,r2
  801b48:	10002d16 	blt	r2,zero,801c00 <open+0x108>
  801b4c:	10800324 	muli	r2,r2,12
  801b50:	01402034 	movhi	r5,128
  801b54:	2948dc04 	addi	r5,r5,9072
  801b58:	00d00034 	movhi	r3,16384
  801b5c:	18ffffc4 	addi	r3,r3,-1
  801b60:	1149883a 	add	r4,r2,r5
  801b64:	98c6703a 	and	r3,r19,r3
  801b68:	9004c03a 	cmpne	r2,r18,zero
  801b6c:	20c00215 	stw	r3,8(r4)
  801b70:	1000121e 	bne	r2,zero,801bbc <open+0xc4>
  801b74:	00802034 	movhi	r2,128
  801b78:	10897904 	addi	r2,r2,9700
  801b7c:	11c00017 	ldw	r7,0(r2)
  801b80:	21800017 	ldw	r6,0(r4)
  801b84:	18900034 	orhi	r2,r3,16384
  801b88:	0007883a 	mov	r3,zero
  801b8c:	20800215 	stw	r2,8(r4)
  801b90:	00000206 	br	801b9c <open+0xa4>
  801b94:	29400304 	addi	r5,r5,12
  801b98:	38c00836 	bltu	r7,r3,801bbc <open+0xc4>
  801b9c:	28800017 	ldw	r2,0(r5)
  801ba0:	18c00044 	addi	r3,r3,1
  801ba4:	11bffb1e 	bne	r2,r6,801b94 <open+0x9c>
  801ba8:	28800217 	ldw	r2,8(r5)
  801bac:	103ff90e 	bge	r2,zero,801b94 <open+0x9c>
  801bb0:	293ff826 	beq	r5,r4,801b94 <open+0x9c>
  801bb4:	04400344 	movi	r17,13
  801bb8:	00001206 	br	801c04 <open+0x10c>
  801bbc:	88800317 	ldw	r2,12(r17)
  801bc0:	10000526 	beq	r2,zero,801bd8 <open+0xe0>
  801bc4:	a00b883a 	mov	r5,r20
  801bc8:	980d883a 	mov	r6,r19
  801bcc:	a80f883a 	mov	r7,r21
  801bd0:	103ee83a 	callr	r2
  801bd4:	10001516 	blt	r2,zero,801c2c <open+0x134>
  801bd8:	8005883a 	mov	r2,r16
  801bdc:	dfc00617 	ldw	ra,24(sp)
  801be0:	dd400517 	ldw	r21,20(sp)
  801be4:	dd000417 	ldw	r20,16(sp)
  801be8:	dcc00317 	ldw	r19,12(sp)
  801bec:	dc800217 	ldw	r18,8(sp)
  801bf0:	dc400117 	ldw	r17,4(sp)
  801bf4:	dc000017 	ldw	r16,0(sp)
  801bf8:	dec00704 	addi	sp,sp,28
  801bfc:	f800283a 	ret
  801c00:	00a3c83a 	sub	r17,zero,r2
  801c04:	8009883a 	mov	r4,r16
  801c08:	0801c780 	call	801c78 <alt_release_fd>
  801c0c:	00802034 	movhi	r2,128
  801c10:	10897a04 	addi	r2,r2,9704
  801c14:	10800017 	ldw	r2,0(r2)
  801c18:	10000b26 	beq	r2,zero,801c48 <open+0x150>
  801c1c:	103ee83a 	callr	r2
  801c20:	043fffc4 	movi	r16,-1
  801c24:	14400015 	stw	r17,0(r2)
  801c28:	003feb06 	br	801bd8 <open+0xe0>
  801c2c:	8009883a 	mov	r4,r16
  801c30:	00a3c83a 	sub	r17,zero,r2
  801c34:	0801c780 	call	801c78 <alt_release_fd>
  801c38:	00802034 	movhi	r2,128
  801c3c:	10897a04 	addi	r2,r2,9704
  801c40:	10800017 	ldw	r2,0(r2)
  801c44:	103ff51e 	bne	r2,zero,801c1c <open+0x124>
  801c48:	00802034 	movhi	r2,128
  801c4c:	108a3f04 	addi	r2,r2,10492
  801c50:	003ff306 	br	801c20 <open+0x128>
  801c54:	a009883a 	mov	r4,r20
  801c58:	0801e540 	call	801e54 <alt_find_file>
  801c5c:	1023883a 	mov	r17,r2
  801c60:	10000226 	beq	r2,zero,801c6c <open+0x174>
  801c64:	04800044 	movi	r18,1
  801c68:	003fb406 	br	801b3c <open+0x44>
  801c6c:	043fffc4 	movi	r16,-1
  801c70:	044004c4 	movi	r17,19
  801c74:	003fe306 	br	801c04 <open+0x10c>

00801c78 <alt_release_fd>:
  801c78:	00800084 	movi	r2,2
  801c7c:	20c00324 	muli	r3,r4,12
  801c80:	1100050e 	bge	r2,r4,801c98 <alt_release_fd+0x20>
  801c84:	00802034 	movhi	r2,128
  801c88:	1088dc04 	addi	r2,r2,9072
  801c8c:	1885883a 	add	r2,r3,r2
  801c90:	10000015 	stw	zero,0(r2)
  801c94:	10000215 	stw	zero,8(r2)
  801c98:	f800283a 	ret

00801c9c <alt_alarm_stop>:
  801c9c:	000d303a 	rdctl	r6,status
  801ca0:	00bfff84 	movi	r2,-2
  801ca4:	3084703a 	and	r2,r6,r2
  801ca8:	1001703a 	wrctl	status,r2
  801cac:	21400017 	ldw	r5,0(r4)
  801cb0:	20800117 	ldw	r2,4(r4)
  801cb4:	28800115 	stw	r2,4(r5)
  801cb8:	20c00117 	ldw	r3,4(r4)
  801cbc:	21000115 	stw	r4,4(r4)
  801cc0:	19400015 	stw	r5,0(r3)
  801cc4:	21000015 	stw	r4,0(r4)
  801cc8:	3001703a 	wrctl	status,r6
  801ccc:	f800283a 	ret

00801cd0 <alt_tick>:
  801cd0:	defffc04 	addi	sp,sp,-16
  801cd4:	d0a0ca17 	ldw	r2,-31960(gp)
  801cd8:	dc000015 	stw	r16,0(sp)
  801cdc:	d4200717 	ldw	r16,-32740(gp)
  801ce0:	dc800215 	stw	r18,8(sp)
  801ce4:	10800044 	addi	r2,r2,1
  801ce8:	d4a00704 	addi	r18,gp,-32740
  801cec:	dfc00315 	stw	ra,12(sp)
  801cf0:	dc400115 	stw	r17,4(sp)
  801cf4:	d0a0ca15 	stw	r2,-31960(gp)
  801cf8:	84800d26 	beq	r16,r18,801d30 <alt_tick+0x60>
  801cfc:	80800403 	ldbu	r2,16(r16)
  801d00:	84400017 	ldw	r17,0(r16)
  801d04:	10000326 	beq	r2,zero,801d14 <alt_tick+0x44>
  801d08:	d0a0ca17 	ldw	r2,-31960(gp)
  801d0c:	1000011e 	bne	r2,zero,801d14 <alt_tick+0x44>
  801d10:	80000405 	stb	zero,16(r16)
  801d14:	d0e0ca17 	ldw	r3,-31960(gp)
  801d18:	80800217 	ldw	r2,8(r16)
  801d1c:	18800236 	bltu	r3,r2,801d28 <alt_tick+0x58>
  801d20:	80800403 	ldbu	r2,16(r16)
  801d24:	10000826 	beq	r2,zero,801d48 <alt_tick+0x78>
  801d28:	8821883a 	mov	r16,r17
  801d2c:	84bff31e 	bne	r16,r18,801cfc <alt_tick+0x2c>
  801d30:	dfc00317 	ldw	ra,12(sp)
  801d34:	dc800217 	ldw	r18,8(sp)
  801d38:	dc400117 	ldw	r17,4(sp)
  801d3c:	dc000017 	ldw	r16,0(sp)
  801d40:	dec00404 	addi	sp,sp,16
  801d44:	f800283a 	ret
  801d48:	81000517 	ldw	r4,20(r16)
  801d4c:	80c00317 	ldw	r3,12(r16)
  801d50:	183ee83a 	callr	r3
  801d54:	1009883a 	mov	r4,r2
  801d58:	10000926 	beq	r2,zero,801d80 <alt_tick+0xb0>
  801d5c:	80800217 	ldw	r2,8(r16)
  801d60:	d0e0ca17 	ldw	r3,-31960(gp)
  801d64:	2085883a 	add	r2,r4,r2
  801d68:	80800215 	stw	r2,8(r16)
  801d6c:	10ffee2e 	bgeu	r2,r3,801d28 <alt_tick+0x58>
  801d70:	00800044 	movi	r2,1
  801d74:	80800405 	stb	r2,16(r16)
  801d78:	8821883a 	mov	r16,r17
  801d7c:	003feb06 	br	801d2c <alt_tick+0x5c>
  801d80:	000b303a 	rdctl	r5,status
  801d84:	00bfff84 	movi	r2,-2
  801d88:	2884703a 	and	r2,r5,r2
  801d8c:	1001703a 	wrctl	status,r2
  801d90:	81000017 	ldw	r4,0(r16)
  801d94:	80800117 	ldw	r2,4(r16)
  801d98:	20800115 	stw	r2,4(r4)
  801d9c:	80c00117 	ldw	r3,4(r16)
  801da0:	84000115 	stw	r16,4(r16)
  801da4:	19000015 	stw	r4,0(r3)
  801da8:	84000015 	stw	r16,0(r16)
  801dac:	2801703a 	wrctl	status,r5
  801db0:	8821883a 	mov	r16,r17
  801db4:	003fdd06 	br	801d2c <alt_tick+0x5c>

00801db8 <altera_nios2_qsys_irq_init>:
  801db8:	000170fa 	wrctl	ienable,zero
  801dbc:	f800283a 	ret

00801dc0 <alt_find_dev>:
  801dc0:	defffb04 	addi	sp,sp,-20
  801dc4:	dc000015 	stw	r16,0(sp)
  801dc8:	2c000017 	ldw	r16,0(r5)
  801dcc:	dcc00315 	stw	r19,12(sp)
  801dd0:	dc400115 	stw	r17,4(sp)
  801dd4:	dfc00415 	stw	ra,16(sp)
  801dd8:	2823883a 	mov	r17,r5
  801ddc:	dc800215 	stw	r18,8(sp)
  801de0:	2027883a 	mov	r19,r4
  801de4:	0801ff80 	call	801ff8 <strlen>
  801de8:	84401126 	beq	r16,r17,801e30 <alt_find_dev+0x70>
  801dec:	14800044 	addi	r18,r2,1
  801df0:	00000206 	br	801dfc <alt_find_dev+0x3c>
  801df4:	84000017 	ldw	r16,0(r16)
  801df8:	84400d26 	beq	r16,r17,801e30 <alt_find_dev+0x70>
  801dfc:	81000217 	ldw	r4,8(r16)
  801e00:	980b883a 	mov	r5,r19
  801e04:	900d883a 	mov	r6,r18
  801e08:	0801fbc0 	call	801fbc <memcmp>
  801e0c:	103ff91e 	bne	r2,zero,801df4 <alt_find_dev+0x34>
  801e10:	8005883a 	mov	r2,r16
  801e14:	dfc00417 	ldw	ra,16(sp)
  801e18:	dcc00317 	ldw	r19,12(sp)
  801e1c:	dc800217 	ldw	r18,8(sp)
  801e20:	dc400117 	ldw	r17,4(sp)
  801e24:	dc000017 	ldw	r16,0(sp)
  801e28:	dec00504 	addi	sp,sp,20
  801e2c:	f800283a 	ret
  801e30:	0021883a 	mov	r16,zero
  801e34:	8005883a 	mov	r2,r16
  801e38:	dfc00417 	ldw	ra,16(sp)
  801e3c:	dcc00317 	ldw	r19,12(sp)
  801e40:	dc800217 	ldw	r18,8(sp)
  801e44:	dc400117 	ldw	r17,4(sp)
  801e48:	dc000017 	ldw	r16,0(sp)
  801e4c:	dec00504 	addi	sp,sp,20
  801e50:	f800283a 	ret

00801e54 <alt_find_file>:
  801e54:	defffa04 	addi	sp,sp,-24
  801e58:	00802034 	movhi	r2,128
  801e5c:	10897504 	addi	r2,r2,9684
  801e60:	dc000015 	stw	r16,0(sp)
  801e64:	14000017 	ldw	r16,0(r2)
  801e68:	dd000415 	stw	r20,16(sp)
  801e6c:	dc800215 	stw	r18,8(sp)
  801e70:	dfc00515 	stw	ra,20(sp)
  801e74:	dcc00315 	stw	r19,12(sp)
  801e78:	dc400115 	stw	r17,4(sp)
  801e7c:	1029883a 	mov	r20,r2
  801e80:	2025883a 	mov	r18,r4
  801e84:	80801526 	beq	r16,r2,801edc <alt_find_file+0x88>
  801e88:	04c00bc4 	movi	r19,47
  801e8c:	00000806 	br	801eb0 <alt_find_file+0x5c>
  801e90:	3485883a 	add	r2,r6,r18
  801e94:	10800007 	ldb	r2,0(r2)
  801e98:	14c00126 	beq	r2,r19,801ea0 <alt_find_file+0x4c>
  801e9c:	1000021e 	bne	r2,zero,801ea8 <alt_find_file+0x54>
  801ea0:	0801fbc0 	call	801fbc <memcmp>
  801ea4:	10000e26 	beq	r2,zero,801ee0 <alt_find_file+0x8c>
  801ea8:	84000017 	ldw	r16,0(r16)
  801eac:	85000b26 	beq	r16,r20,801edc <alt_find_file+0x88>
  801eb0:	84400217 	ldw	r17,8(r16)
  801eb4:	8809883a 	mov	r4,r17
  801eb8:	0801ff80 	call	801ff8 <strlen>
  801ebc:	100d883a 	mov	r6,r2
  801ec0:	8885883a 	add	r2,r17,r2
  801ec4:	10ffffc7 	ldb	r3,-1(r2)
  801ec8:	8809883a 	mov	r4,r17
  801ecc:	900b883a 	mov	r5,r18
  801ed0:	1cffef1e 	bne	r3,r19,801e90 <alt_find_file+0x3c>
  801ed4:	31bfffc4 	addi	r6,r6,-1
  801ed8:	003fed06 	br	801e90 <alt_find_file+0x3c>
  801edc:	0021883a 	mov	r16,zero
  801ee0:	8005883a 	mov	r2,r16
  801ee4:	dfc00517 	ldw	ra,20(sp)
  801ee8:	dd000417 	ldw	r20,16(sp)
  801eec:	dcc00317 	ldw	r19,12(sp)
  801ef0:	dc800217 	ldw	r18,8(sp)
  801ef4:	dc400117 	ldw	r17,4(sp)
  801ef8:	dc000017 	ldw	r16,0(sp)
  801efc:	dec00604 	addi	sp,sp,24
  801f00:	f800283a 	ret

00801f04 <alt_get_fd>:
  801f04:	01402034 	movhi	r5,128
  801f08:	2948dc04 	addi	r5,r5,9072
  801f0c:	0007883a 	mov	r3,zero
  801f10:	01c00804 	movi	r7,32
  801f14:	280d883a 	mov	r6,r5
  801f18:	00000306 	br	801f28 <alt_get_fd+0x24>
  801f1c:	18c00044 	addi	r3,r3,1
  801f20:	31800304 	addi	r6,r6,12
  801f24:	19c00d26 	beq	r3,r7,801f5c <alt_get_fd+0x58>
  801f28:	28800017 	ldw	r2,0(r5)
  801f2c:	29400304 	addi	r5,r5,12
  801f30:	103ffa1e 	bne	r2,zero,801f1c <alt_get_fd+0x18>
  801f34:	01402034 	movhi	r5,128
  801f38:	29497904 	addi	r5,r5,9700
  801f3c:	28800017 	ldw	r2,0(r5)
  801f40:	31000015 	stw	r4,0(r6)
  801f44:	10c0030e 	bge	r2,r3,801f54 <alt_get_fd+0x50>
  801f48:	1805883a 	mov	r2,r3
  801f4c:	28c00015 	stw	r3,0(r5)
  801f50:	f800283a 	ret
  801f54:	1805883a 	mov	r2,r3
  801f58:	f800283a 	ret
  801f5c:	00bffa04 	movi	r2,-24
  801f60:	f800283a 	ret

00801f64 <alt_icache_flush>:
  801f64:	00820004 	movi	r2,2048
  801f68:	2007883a 	mov	r3,r4
  801f6c:	1140012e 	bgeu	r2,r5,801f74 <alt_icache_flush+0x10>
  801f70:	100b883a 	mov	r5,r2
  801f74:	194b883a 	add	r5,r3,r5
  801f78:	1940032e 	bgeu	r3,r5,801f88 <alt_icache_flush+0x24>
  801f7c:	1800603a 	flushi	r3
  801f80:	18c00804 	addi	r3,r3,32
  801f84:	197ffd36 	bltu	r3,r5,801f7c <alt_icache_flush+0x18>
  801f88:	208007cc 	andi	r2,r4,31
  801f8c:	10000126 	beq	r2,zero,801f94 <alt_icache_flush+0x30>
  801f90:	1800603a 	flushi	r3
  801f94:	0000203a 	flushp
  801f98:	f800283a 	ret

00801f9c <exit>:
  801f9c:	defffe04 	addi	sp,sp,-8
  801fa0:	dc400015 	stw	r17,0(sp)
  801fa4:	000b883a 	mov	r5,zero
  801fa8:	2023883a 	mov	r17,r4
  801fac:	dfc00115 	stw	ra,4(sp)
  801fb0:	080201c0 	call	80201c <__call_exitprocs>
  801fb4:	8809883a 	mov	r4,r17
  801fb8:	08021d80 	call	8021d8 <_exit>

00801fbc <memcmp>:
  801fbc:	31ffffc4 	addi	r7,r6,-1
  801fc0:	3000061e 	bne	r6,zero,801fdc <memcmp+0x20>
  801fc4:	00000a06 	br	801ff0 <memcmp+0x34>
  801fc8:	39ffffc4 	addi	r7,r7,-1
  801fcc:	00bfffc4 	movi	r2,-1
  801fd0:	21000044 	addi	r4,r4,1
  801fd4:	29400044 	addi	r5,r5,1
  801fd8:	38800526 	beq	r7,r2,801ff0 <memcmp+0x34>
  801fdc:	20c00003 	ldbu	r3,0(r4)
  801fe0:	28800003 	ldbu	r2,0(r5)
  801fe4:	18bff826 	beq	r3,r2,801fc8 <memcmp+0xc>
  801fe8:	1885c83a 	sub	r2,r3,r2
  801fec:	f800283a 	ret
  801ff0:	0005883a 	mov	r2,zero
  801ff4:	f800283a 	ret

00801ff8 <strlen>:
  801ff8:	20800007 	ldb	r2,0(r4)
  801ffc:	10000526 	beq	r2,zero,802014 <strlen+0x1c>
  802000:	2007883a 	mov	r3,r4
  802004:	18c00044 	addi	r3,r3,1
  802008:	18800007 	ldb	r2,0(r3)
  80200c:	103ffd1e 	bne	r2,zero,802004 <strlen+0xc>
  802010:	1905c83a 	sub	r2,r3,r4
  802014:	f800283a 	ret

00802018 <register_fini>:
  802018:	f800283a 	ret

0080201c <__call_exitprocs>:
  80201c:	defff304 	addi	sp,sp,-52
  802020:	00802034 	movhi	r2,128
  802024:	10897e04 	addi	r2,r2,9720
  802028:	df000b15 	stw	fp,44(sp)
  80202c:	17000017 	ldw	fp,0(r2)
  802030:	00800034 	movhi	r2,0
  802034:	10800004 	addi	r2,r2,0
  802038:	1005003a 	cmpeq	r2,r2,zero
  80203c:	d8800215 	stw	r2,8(sp)
  802040:	e0800c04 	addi	r2,fp,48
  802044:	dd800915 	stw	r22,36(sp)
  802048:	dd400815 	stw	r21,32(sp)
  80204c:	dfc00c15 	stw	ra,48(sp)
  802050:	ddc00a15 	stw	r23,40(sp)
  802054:	dd000715 	stw	r20,28(sp)
  802058:	dcc00615 	stw	r19,24(sp)
  80205c:	dc800515 	stw	r18,20(sp)
  802060:	dc400415 	stw	r17,16(sp)
  802064:	dc000315 	stw	r16,12(sp)
  802068:	282d883a 	mov	r22,r5
  80206c:	d9000115 	stw	r4,4(sp)
  802070:	d8800015 	stw	r2,0(sp)
  802074:	282b003a 	cmpeq	r21,r5,zero
  802078:	e4400c17 	ldw	r17,48(fp)
  80207c:	88001226 	beq	r17,zero,8020c8 <__call_exitprocs+0xac>
  802080:	ddc00017 	ldw	r23,0(sp)
  802084:	88800117 	ldw	r2,4(r17)
  802088:	8c802217 	ldw	r18,136(r17)
  80208c:	143fffc4 	addi	r16,r2,-1
  802090:	80000b16 	blt	r16,zero,8020c0 <__call_exitprocs+0xa4>
  802094:	9027003a 	cmpeq	r19,r18,zero
  802098:	a800171e 	bne	r21,zero,8020f8 <__call_exitprocs+0xdc>
  80209c:	9800051e 	bne	r19,zero,8020b4 <__call_exitprocs+0x98>
  8020a0:	8409883a 	add	r4,r16,r16
  8020a4:	2105883a 	add	r2,r4,r4
  8020a8:	1485883a 	add	r2,r2,r18
  8020ac:	10c02017 	ldw	r3,128(r2)
  8020b0:	b0c01226 	beq	r22,r3,8020fc <__call_exitprocs+0xe0>
  8020b4:	843fffc4 	addi	r16,r16,-1
  8020b8:	00bfffc4 	movi	r2,-1
  8020bc:	80bff61e 	bne	r16,r2,802098 <__call_exitprocs+0x7c>
  8020c0:	d8800217 	ldw	r2,8(sp)
  8020c4:	10003226 	beq	r2,zero,802190 <__call_exitprocs+0x174>
  8020c8:	dfc00c17 	ldw	ra,48(sp)
  8020cc:	df000b17 	ldw	fp,44(sp)
  8020d0:	ddc00a17 	ldw	r23,40(sp)
  8020d4:	dd800917 	ldw	r22,36(sp)
  8020d8:	dd400817 	ldw	r21,32(sp)
  8020dc:	dd000717 	ldw	r20,28(sp)
  8020e0:	dcc00617 	ldw	r19,24(sp)
  8020e4:	dc800517 	ldw	r18,20(sp)
  8020e8:	dc400417 	ldw	r17,16(sp)
  8020ec:	dc000317 	ldw	r16,12(sp)
  8020f0:	dec00d04 	addi	sp,sp,52
  8020f4:	f800283a 	ret
  8020f8:	8409883a 	add	r4,r16,r16
  8020fc:	88c00117 	ldw	r3,4(r17)
  802100:	2105883a 	add	r2,r4,r4
  802104:	1445883a 	add	r2,r2,r17
  802108:	18ffffc4 	addi	r3,r3,-1
  80210c:	11800217 	ldw	r6,8(r2)
  802110:	1c001826 	beq	r3,r16,802174 <__call_exitprocs+0x158>
  802114:	10000215 	stw	zero,8(r2)
  802118:	303fe626 	beq	r6,zero,8020b4 <__call_exitprocs+0x98>
  80211c:	8d000117 	ldw	r20,4(r17)
  802120:	9800121e 	bne	r19,zero,80216c <__call_exitprocs+0x150>
  802124:	00c00044 	movi	r3,1
  802128:	1c06983a 	sll	r3,r3,r16
  80212c:	90804017 	ldw	r2,256(r18)
  802130:	1884703a 	and	r2,r3,r2
  802134:	10000d26 	beq	r2,zero,80216c <__call_exitprocs+0x150>
  802138:	90804117 	ldw	r2,260(r18)
  80213c:	1884703a 	and	r2,r3,r2
  802140:	10000e1e 	bne	r2,zero,80217c <__call_exitprocs+0x160>
  802144:	2105883a 	add	r2,r4,r4
  802148:	1485883a 	add	r2,r2,r18
  80214c:	11400017 	ldw	r5,0(r2)
  802150:	d9000117 	ldw	r4,4(sp)
  802154:	303ee83a 	callr	r6
  802158:	88800117 	ldw	r2,4(r17)
  80215c:	a0bfc61e 	bne	r20,r2,802078 <__call_exitprocs+0x5c>
  802160:	b8800017 	ldw	r2,0(r23)
  802164:	147fd326 	beq	r2,r17,8020b4 <__call_exitprocs+0x98>
  802168:	003fc306 	br	802078 <__call_exitprocs+0x5c>
  80216c:	303ee83a 	callr	r6
  802170:	003ff906 	br	802158 <__call_exitprocs+0x13c>
  802174:	8c000115 	stw	r16,4(r17)
  802178:	003fe706 	br	802118 <__call_exitprocs+0xfc>
  80217c:	2105883a 	add	r2,r4,r4
  802180:	1485883a 	add	r2,r2,r18
  802184:	11000017 	ldw	r4,0(r2)
  802188:	303ee83a 	callr	r6
  80218c:	003ff206 	br	802158 <__call_exitprocs+0x13c>
  802190:	88800117 	ldw	r2,4(r17)
  802194:	10000b1e 	bne	r2,zero,8021c4 <__call_exitprocs+0x1a8>
  802198:	89000017 	ldw	r4,0(r17)
  80219c:	20000a26 	beq	r4,zero,8021c8 <__call_exitprocs+0x1ac>
  8021a0:	b9000015 	stw	r4,0(r23)
  8021a4:	90000226 	beq	r18,zero,8021b0 <__call_exitprocs+0x194>
  8021a8:	9009883a 	mov	r4,r18
  8021ac:	00000000 	call	0 <_binary_beeth5_noise_bin_size-0x1d6490>
  8021b0:	8809883a 	mov	r4,r17
  8021b4:	00000000 	call	0 <_binary_beeth5_noise_bin_size-0x1d6490>
  8021b8:	bc400017 	ldw	r17,0(r23)
  8021bc:	883fb11e 	bne	r17,zero,802084 <__call_exitprocs+0x68>
  8021c0:	003fc106 	br	8020c8 <__call_exitprocs+0xac>
  8021c4:	89000017 	ldw	r4,0(r17)
  8021c8:	882f883a 	mov	r23,r17
  8021cc:	2023883a 	mov	r17,r4
  8021d0:	883fac1e 	bne	r17,zero,802084 <__call_exitprocs+0x68>
  8021d4:	003fbc06 	br	8020c8 <__call_exitprocs+0xac>

008021d8 <_exit>:
  8021d8:	20000226 	beq	r4,zero,8021e4 <_exit+0xc>
  8021dc:	002af070 	cmpltui	zero,zero,43969
  8021e0:	003fff06 	br	8021e0 <_exit+0x8>
  8021e4:	002af0b0 	cmpltui	zero,zero,43970
  8021e8:	003ffd06 	br	8021e0 <_exit+0x8>
  8021ec:	00802018 	cmpnei	r2,zero,128
