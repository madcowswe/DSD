
RUN_ON_HDL_SIMULATOR_ONLY_dsd.elf:     file format elf32-littlenios2
RUN_ON_HDL_SIMULATOR_ONLY_dsd.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800184

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x00001778 memsz 0x00001778 flags r-x
    LOAD off    0x00002798 vaddr 0x00801798 paddr 0x0080179c align 2**12
         filesz 0x00000004 memsz 0x00000004 flags rw-
    LOAD off    0x000027a0 vaddr 0x008017a0 paddr 0x008017a0 align 2**12
         filesz 0x00000000 memsz 0x0000010c flags rw-
    LOAD off    0x00003000 vaddr 0x00e00000 paddr 0x00e00000 align 2**12
         filesz 0x001d6490 memsz 0x001d6490 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000164  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 beeth         001d6490  00e00000  00e00000  00003000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .text         00001504  00800184  00800184  00001184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000110  00801688  00801688  00002688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .rwdata       00000004  00801798  0080179c  00002798  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  6 .bss          0000010c  008017a0  008017a0  000027a0  2**2
                  ALLOC, SMALL_DATA
  7 .comment      00000023  00000000  00000000  001d9490  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000001f0  00000000  00000000  001d94b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 00000246  00000000  00000000  001d96a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00002374  00000000  00000000  001d98ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000109b  00000000  00000000  001dbc62  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00001984  00000000  00000000  001dccfd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000002e0  00000000  00000000  001de684  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000037b  00000000  00000000  001de964  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00000975  00000000  00000000  001decdf  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000228  00000000  00000000  001df658  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  001e0a98  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  001e0a9b  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  001e0a9e  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  001e0a9f  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  001e0aa0  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  001e0aa4  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  001e0aa8  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  001e0aac  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  001e0ab5  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  001e0abe  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000012  00000000  00000000  001e0ac7  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000001c  00000000  00000000  001e0ad9  2**0
                  CONTENTS, READONLY
 29 .jdi          000053f2  00000000  00000000  001e0af5  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00050a42  00000000  00000000  001e5ee7  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00e00000 l    d  beeth	00000000 beeth
00800184 l    d  .text	00000000 .text
00801688 l    d  .rodata	00000000 .rodata
00801798 l    d  .rwdata	00000000 .rwdata
008017a0 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
0080019c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 fp-bit.c
00800928 l     F .text	000001e4 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00800900 g     F .text	00000028 alt_main
008017ac g     O .bss	00000100 alt_irq
0080179c g       *ABS*	00000000 __flash_rwdata_start
00800dc0 g     F .text	00000174 __divsf3
00e00000 g       beeth	00000000 _binary_beeth5_noise_bin_start
00800000 g     F .entry	0000000c __reset
00800020 g       *ABS*	00000000 __flash_exceptions_start
00809798 g       *ABS*	00000000 _gp
00800b0c g     F .text	00000070 __subsf3
008001a0 g     F .text	00000028 det_status
00801650 g     F .text	00000038 alt_icache_flush
008017a0 g     O .bss	00000004 irqcommunicationtest
0080142c g     F .text	00000028 alt_dcache_flush
00800f34 g     F .text	00000078 __nesf2
008018ac g       *ABS*	00000000 __bss_end
008014f0 g     F .text	00000088 alt_iic_isr_register
00801454 g     F .text	00000018 alt_ic_irq_enabled
008001fc g     F .text	00000034 det_done_isr
008017a8 g     O .bss	00000004 alt_irq_active
008000ec g     F .exceptions	00000098 alt_irq_handler
008012bc g     F .text	000000c8 __unpack_f
0080162c g     F .text	00000018 alt_dcache_flush_all
0080179c g       *ABS*	00000000 __ram_rwdata_end
001d6490 g       *ABS*	00000000 _binary_beeth5_noise_bin_size
00801798 g       *ABS*	00000000 __ram_rodata_end
008017a4 g     O .bss	00000004 tempmat
008018ac g       *ABS*	00000000 end
0080115c g     F .text	00000160 __pack_f
00c00000 g       *ABS*	00000000 __alt_stack_pointer
008010dc g     F .text	00000080 __clzsi2
008001c8 g     F .text	00000034 det_result
00fd6490 g       beeth	00000000 _binary_beeth5_noise_bin_end
00800184 g     F .text	0000001c _start
00800518 g     F .text	000003ac detmat
00800fac g     F .text	00000098 __floatsisf
00801798 g       *ABS*	00000000 __ram_rwdata_start
00801688 g       *ABS*	00000000 __ram_rodata_start
008018ac g       *ABS*	00000000 __alt_stack_base
00801688 g     O .rodata	00000010 __thenan_sf
008017a0 g       *ABS*	00000000 __bss_start
008008c4 g     F .text	0000003c main
00800478 g     F .text	000000a0 rswap
00800be0 g     F .text	000001e0 __mulsf3
00801688 g       *ABS*	00000000 __flash_rodata_start
00801698 g     O .rodata	00000100 __clz_tab
00800000 g       *ABS*	00000000 __alt_mem_sdram_0
00800020 g       .exceptions	00000000 alt_irq_entry
00800020 g       *ABS*	00000000 __ram_exceptions_start
008014ec g     F .text	00000004 alt_ic_isr_register
0080179c g       *ABS*	00000000 _edata
008018ac g       *ABS*	00000000 _end
00800184 g       *ABS*	00000000 __ram_exceptions_end
008014ac g     F .text	00000040 alt_ic_irq_disable
00800230 g     F .text	00000040 reg_isr
00c00000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00801384 g     F .text	000000a8 __fpcmp_parts_f
00801044 g     F .text	00000098 __muldi3
00800270 g     F .text	0000006c det_start
00801644 g     F .text	0000000c alt_icache_flush_all
00801798 g     O .rwdata	00000004 alt_priority_mask
0080146c g     F .text	00000040 alt_ic_irq_enable
00800b7c g     F .text	00000064 __addsf3
00801578 g     F .text	000000b4 alt_load
008002dc g     F .text	0000019c det3x3



Disassembly of section .entry:

00800000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800000:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800004:	08406114 	ori	at,at,388
    jmp r1
  800008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00800020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  800044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000ec0 	call	8000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000306 	br	800098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  80008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  800094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  800098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  80009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  8000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  8000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000e8:	ef80083a 	eret

008000ec <alt_irq_handler>:
  8000ec:	defffe04 	addi	sp,sp,-8
  8000f0:	dfc00115 	stw	ra,4(sp)
  8000f4:	dc000015 	stw	r16,0(sp)
  8000f8:	000b313a 	rdctl	r5,ipending
  8000fc:	2880004c 	andi	r2,r5,1
  800100:	1005003a 	cmpeq	r2,r2,zero
  800104:	04002034 	movhi	r16,128
  800108:	8405eb04 	addi	r16,r16,6060
  80010c:	10001126 	beq	r2,zero,800154 <alt_irq_handler+0x68>
  800110:	00c00044 	movi	r3,1
  800114:	0009883a 	mov	r4,zero
  800118:	18c7883a 	add	r3,r3,r3
  80011c:	28c4703a 	and	r2,r5,r3
  800120:	21000044 	addi	r4,r4,1
  800124:	103ffc26 	beq	r2,zero,800118 <alt_irq_handler+0x2c>
  800128:	200490fa 	slli	r2,r4,3
  80012c:	1405883a 	add	r2,r2,r16
  800130:	11000117 	ldw	r4,4(r2)
  800134:	10c00017 	ldw	r3,0(r2)
  800138:	183ee83a 	callr	r3
  80013c:	0005313a 	rdctl	r2,ipending
  800140:	10000c26 	beq	r2,zero,800174 <alt_irq_handler+0x88>
  800144:	100b883a 	mov	r5,r2
  800148:	2880004c 	andi	r2,r5,1
  80014c:	1005003a 	cmpeq	r2,r2,zero
  800150:	103fef1e 	bne	r2,zero,800110 <alt_irq_handler+0x24>
  800154:	0009883a 	mov	r4,zero
  800158:	200490fa 	slli	r2,r4,3
  80015c:	1405883a 	add	r2,r2,r16
  800160:	11000117 	ldw	r4,4(r2)
  800164:	10c00017 	ldw	r3,0(r2)
  800168:	183ee83a 	callr	r3
  80016c:	0005313a 	rdctl	r2,ipending
  800170:	103ff41e 	bne	r2,zero,800144 <alt_irq_handler+0x58>
  800174:	dfc00117 	ldw	ra,4(sp)
  800178:	dc000017 	ldw	r16,0(sp)
  80017c:	dec00204 	addi	sp,sp,8
  800180:	f800283a 	ret

Disassembly of section .text:

00800184 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800184:	06c03034 	movhi	sp,192
    ori sp, sp, %lo(__alt_stack_pointer)
  800188:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  80018c:	06802034 	movhi	gp,128
    ori gp, gp, %lo(_gp)
  800190:	d6a5e614 	ori	gp,gp,38808
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  800194:	08015780 	call	801578 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  800198:	08009000 	call	800900 <alt_main>

0080019c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  80019c:	003fff06 	br	80019c <alt_after_alt_main>

008001a0 <det_status>:
#define DET_STATUS_READY 0
#define DET_STATUS_BUSY 1

int irqcommunicationtest = 0;

inline int det_status(){
  8001a0:	deffff04 	addi	sp,sp,-4
  8001a4:	df000015 	stw	fp,0(sp)
  8001a8:	d839883a 	mov	fp,sp
	return IORD(DETERMINANT_0_BASE, DET_STATUS_OFFSET);
  8001ac:	00804034 	movhi	r2,256
  8001b0:	10840f04 	addi	r2,r2,4156
  8001b4:	10800037 	ldwio	r2,0(r2)
}
  8001b8:	e037883a 	mov	sp,fp
  8001bc:	df000017 	ldw	fp,0(sp)
  8001c0:	dec00104 	addi	sp,sp,4
  8001c4:	f800283a 	ret

008001c8 <det_result>:

inline float det_result(){
  8001c8:	defffe04 	addi	sp,sp,-8
  8001cc:	dfc00115 	stw	ra,4(sp)
  8001d0:	df000015 	stw	fp,0(sp)
  8001d4:	d839883a 	mov	fp,sp
	return IORD(DETERMINANT_0_BASE, DET_RESULT_OFFSET);
  8001d8:	00804034 	movhi	r2,256
  8001dc:	10840e04 	addi	r2,r2,4152
  8001e0:	11000037 	ldwio	r4,0(r2)
  8001e4:	0800fac0 	call	800fac <__floatsisf>
}
  8001e8:	e037883a 	mov	sp,fp
  8001ec:	dfc00117 	ldw	ra,4(sp)
  8001f0:	df000017 	ldw	fp,0(sp)
  8001f4:	dec00204 	addi	sp,sp,8
  8001f8:	f800283a 	ret

008001fc <det_done_isr>:

void det_done_isr(void* context){
  8001fc:	defffd04 	addi	sp,sp,-12
  800200:	dfc00215 	stw	ra,8(sp)
  800204:	df000115 	stw	fp,4(sp)
  800208:	df000104 	addi	fp,sp,4
  80020c:	e13fff15 	stw	r4,-4(fp)
	det_result();
  800210:	08001c80 	call	8001c8 <det_result>
	irqcommunicationtest = 1;
  800214:	00800044 	movi	r2,1
  800218:	d0a00215 	stw	r2,-32760(gp)
}
  80021c:	e037883a 	mov	sp,fp
  800220:	dfc00117 	ldw	ra,4(sp)
  800224:	df000017 	ldw	fp,0(sp)
  800228:	dec00204 	addi	sp,sp,8
  80022c:	f800283a 	ret

00800230 <reg_isr>:

inline int reg_isr(){
  800230:	defffd04 	addi	sp,sp,-12
  800234:	dfc00215 	stw	ra,8(sp)
  800238:	df000115 	stw	fp,4(sp)
  80023c:	df000104 	addi	fp,sp,4
	return alt_ic_isr_register(DETERMINANT_0_IRQ_INTERRUPT_CONTROLLER_ID,
  800240:	d8000015 	stw	zero,0(sp)
  800244:	0009883a 	mov	r4,zero
  800248:	01400504 	movi	r5,20
  80024c:	01802034 	movhi	r6,128
  800250:	31807f04 	addi	r6,r6,508
  800254:	000f883a 	mov	r7,zero
  800258:	08014ec0 	call	8014ec <alt_ic_isr_register>
						DETERMINANT_0_IRQ,
	                    &det_done_isr,
	                    NULL,
	                    NULL);
}
  80025c:	e037883a 	mov	sp,fp
  800260:	dfc00117 	ldw	ra,4(sp)
  800264:	df000017 	ldw	fp,0(sp)
  800268:	dec00204 	addi	sp,sp,8
  80026c:	f800283a 	ret

00800270 <det_start>:



inline void det_start(float* ptr, int N){
  800270:	defffc04 	addi	sp,sp,-16
  800274:	dfc00315 	stw	ra,12(sp)
  800278:	df000215 	stw	fp,8(sp)
  80027c:	df000204 	addi	fp,sp,8
  800280:	e13ffe15 	stw	r4,-8(fp)
  800284:	e17fff15 	stw	r5,-4(fp)
	alt_dcache_flush (ptr, N * N * sizeof(float));
  800288:	e0ffff17 	ldw	r3,-4(fp)
  80028c:	e0bfff17 	ldw	r2,-4(fp)
  800290:	1885383a 	mul	r2,r3,r2
  800294:	1085883a 	add	r2,r2,r2
  800298:	1085883a 	add	r2,r2,r2
  80029c:	100b883a 	mov	r5,r2
  8002a0:	e13ffe17 	ldw	r4,-8(fp)
  8002a4:	080142c0 	call	80142c <alt_dcache_flush>
	IOWR(DETERMINANT_0_BASE, DET_PTR_OFFSET, (int)ptr);
  8002a8:	e0fffe17 	ldw	r3,-8(fp)
  8002ac:	00804034 	movhi	r2,256
  8002b0:	10840e04 	addi	r2,r2,4152
  8002b4:	10c00035 	stwio	r3,0(r2)
	IOWR(DETERMINANT_0_BASE, DET_LEN_OFFSET, N);
  8002b8:	00c04034 	movhi	r3,256
  8002bc:	18c40f04 	addi	r3,r3,4156
  8002c0:	e0bfff17 	ldw	r2,-4(fp)
  8002c4:	18800035 	stwio	r2,0(r3)
}
  8002c8:	e037883a 	mov	sp,fp
  8002cc:	dfc00117 	ldw	ra,4(sp)
  8002d0:	df000017 	ldw	fp,0(sp)
  8002d4:	dec00204 	addi	sp,sp,8
  8002d8:	f800283a 	ret

008002dc <det3x3>:
#define MXSIZE 10

float **tempmat;

typedef float mat3x3[3][3];
float det3x3(volatile mat3x3 inmat){
  8002dc:	defffa04 	addi	sp,sp,-24
  8002e0:	dfc00515 	stw	ra,20(sp)
  8002e4:	df000415 	stw	fp,16(sp)
  8002e8:	dc400315 	stw	r17,12(sp)
  8002ec:	dc000215 	stw	r16,8(sp)
  8002f0:	df000204 	addi	fp,sp,8
  8002f4:	e13fff15 	stw	r4,-4(fp)
	float result = inmat[0][0] * (inmat[1][1] * inmat[2][2] - inmat[2][1] * inmat[1][2]);
  8002f8:	e0bfff17 	ldw	r2,-4(fp)
  8002fc:	14000017 	ldw	r16,0(r2)
  800300:	e0bfff17 	ldw	r2,-4(fp)
  800304:	10800304 	addi	r2,r2,12
  800308:	10c00117 	ldw	r3,4(r2)
  80030c:	e0bfff17 	ldw	r2,-4(fp)
  800310:	10800604 	addi	r2,r2,24
  800314:	10800217 	ldw	r2,8(r2)
  800318:	1809883a 	mov	r4,r3
  80031c:	100b883a 	mov	r5,r2
  800320:	0800be00 	call	800be0 <__mulsf3>
  800324:	1023883a 	mov	r17,r2
  800328:	e0bfff17 	ldw	r2,-4(fp)
  80032c:	10800604 	addi	r2,r2,24
  800330:	10c00117 	ldw	r3,4(r2)
  800334:	e0bfff17 	ldw	r2,-4(fp)
  800338:	10800304 	addi	r2,r2,12
  80033c:	10800217 	ldw	r2,8(r2)
  800340:	1809883a 	mov	r4,r3
  800344:	100b883a 	mov	r5,r2
  800348:	0800be00 	call	800be0 <__mulsf3>
  80034c:	8809883a 	mov	r4,r17
  800350:	100b883a 	mov	r5,r2
  800354:	0800b0c0 	call	800b0c <__subsf3>
  800358:	8009883a 	mov	r4,r16
  80035c:	100b883a 	mov	r5,r2
  800360:	0800be00 	call	800be0 <__mulsf3>
  800364:	e0bffe15 	stw	r2,-8(fp)
	result -= inmat[1][0] * (inmat[0][1] * inmat[2][2] - inmat[2][1] * inmat[0][2]);
  800368:	e0bfff17 	ldw	r2,-4(fp)
  80036c:	10800304 	addi	r2,r2,12
  800370:	14000017 	ldw	r16,0(r2)
  800374:	e0bfff17 	ldw	r2,-4(fp)
  800378:	10c00117 	ldw	r3,4(r2)
  80037c:	e0bfff17 	ldw	r2,-4(fp)
  800380:	10800604 	addi	r2,r2,24
  800384:	10800217 	ldw	r2,8(r2)
  800388:	1809883a 	mov	r4,r3
  80038c:	100b883a 	mov	r5,r2
  800390:	0800be00 	call	800be0 <__mulsf3>
  800394:	1023883a 	mov	r17,r2
  800398:	e0bfff17 	ldw	r2,-4(fp)
  80039c:	10800604 	addi	r2,r2,24
  8003a0:	10c00117 	ldw	r3,4(r2)
  8003a4:	e0bfff17 	ldw	r2,-4(fp)
  8003a8:	10800217 	ldw	r2,8(r2)
  8003ac:	1809883a 	mov	r4,r3
  8003b0:	100b883a 	mov	r5,r2
  8003b4:	0800be00 	call	800be0 <__mulsf3>
  8003b8:	8809883a 	mov	r4,r17
  8003bc:	100b883a 	mov	r5,r2
  8003c0:	0800b0c0 	call	800b0c <__subsf3>
  8003c4:	8009883a 	mov	r4,r16
  8003c8:	100b883a 	mov	r5,r2
  8003cc:	0800be00 	call	800be0 <__mulsf3>
  8003d0:	e13ffe17 	ldw	r4,-8(fp)
  8003d4:	100b883a 	mov	r5,r2
  8003d8:	0800b0c0 	call	800b0c <__subsf3>
  8003dc:	e0bffe15 	stw	r2,-8(fp)
	result += inmat[2][0] * (inmat[0][1] * inmat[1][2] - inmat[1][1] * inmat[0][2]);
  8003e0:	e0bfff17 	ldw	r2,-4(fp)
  8003e4:	10800604 	addi	r2,r2,24
  8003e8:	14000017 	ldw	r16,0(r2)
  8003ec:	e0bfff17 	ldw	r2,-4(fp)
  8003f0:	10c00117 	ldw	r3,4(r2)
  8003f4:	e0bfff17 	ldw	r2,-4(fp)
  8003f8:	10800304 	addi	r2,r2,12
  8003fc:	10800217 	ldw	r2,8(r2)
  800400:	1809883a 	mov	r4,r3
  800404:	100b883a 	mov	r5,r2
  800408:	0800be00 	call	800be0 <__mulsf3>
  80040c:	1023883a 	mov	r17,r2
  800410:	e0bfff17 	ldw	r2,-4(fp)
  800414:	10800304 	addi	r2,r2,12
  800418:	10c00117 	ldw	r3,4(r2)
  80041c:	e0bfff17 	ldw	r2,-4(fp)
  800420:	10800217 	ldw	r2,8(r2)
  800424:	1809883a 	mov	r4,r3
  800428:	100b883a 	mov	r5,r2
  80042c:	0800be00 	call	800be0 <__mulsf3>
  800430:	8809883a 	mov	r4,r17
  800434:	100b883a 	mov	r5,r2
  800438:	0800b0c0 	call	800b0c <__subsf3>
  80043c:	8009883a 	mov	r4,r16
  800440:	100b883a 	mov	r5,r2
  800444:	0800be00 	call	800be0 <__mulsf3>
  800448:	e13ffe17 	ldw	r4,-8(fp)
  80044c:	100b883a 	mov	r5,r2
  800450:	0800b7c0 	call	800b7c <__addsf3>
  800454:	e0bffe15 	stw	r2,-8(fp)
	return result;
  800458:	e0bffe17 	ldw	r2,-8(fp)
}
  80045c:	e037883a 	mov	sp,fp
  800460:	dfc00317 	ldw	ra,12(sp)
  800464:	df000217 	ldw	fp,8(sp)
  800468:	dc400117 	ldw	r17,4(sp)
  80046c:	dc000017 	ldw	r16,0(sp)
  800470:	dec00404 	addi	sp,sp,16
  800474:	f800283a 	ret

00800478 <rswap>:

void rswap (float **tempmat, size_t i, size_t j){
  800478:	defffb04 	addi	sp,sp,-20
  80047c:	df000415 	stw	fp,16(sp)
  800480:	df000404 	addi	fp,sp,16
  800484:	e13ffd15 	stw	r4,-12(fp)
  800488:	e17ffe15 	stw	r5,-8(fp)
  80048c:	e1bfff15 	stw	r6,-4(fp)
	float *tmp = tempmat[i];
  800490:	e0bffe17 	ldw	r2,-8(fp)
  800494:	1085883a 	add	r2,r2,r2
  800498:	1085883a 	add	r2,r2,r2
  80049c:	1007883a 	mov	r3,r2
  8004a0:	e0bffd17 	ldw	r2,-12(fp)
  8004a4:	1885883a 	add	r2,r3,r2
  8004a8:	10800017 	ldw	r2,0(r2)
  8004ac:	e0bffc15 	stw	r2,-16(fp)
	tempmat[i] = tempmat[j]; tempmat[j] = tmp;
  8004b0:	e0bffe17 	ldw	r2,-8(fp)
  8004b4:	1085883a 	add	r2,r2,r2
  8004b8:	1085883a 	add	r2,r2,r2
  8004bc:	1007883a 	mov	r3,r2
  8004c0:	e0bffd17 	ldw	r2,-12(fp)
  8004c4:	1889883a 	add	r4,r3,r2
  8004c8:	e0bfff17 	ldw	r2,-4(fp)
  8004cc:	1085883a 	add	r2,r2,r2
  8004d0:	1085883a 	add	r2,r2,r2
  8004d4:	1007883a 	mov	r3,r2
  8004d8:	e0bffd17 	ldw	r2,-12(fp)
  8004dc:	1885883a 	add	r2,r3,r2
  8004e0:	10800017 	ldw	r2,0(r2)
  8004e4:	20800015 	stw	r2,0(r4)
  8004e8:	e0bfff17 	ldw	r2,-4(fp)
  8004ec:	1085883a 	add	r2,r2,r2
  8004f0:	1085883a 	add	r2,r2,r2
  8004f4:	1007883a 	mov	r3,r2
  8004f8:	e0bffd17 	ldw	r2,-12(fp)
  8004fc:	1887883a 	add	r3,r3,r2
  800500:	e0bffc17 	ldw	r2,-16(fp)
  800504:	18800015 	stw	r2,0(r3)
}
  800508:	e037883a 	mov	sp,fp
  80050c:	df000017 	ldw	fp,0(sp)
  800510:	dec00104 	addi	sp,sp,4
  800514:	f800283a 	ret

00800518 <detmat>:

float detmat(float matrix[][MXSIZE]){
  800518:	defff004 	addi	sp,sp,-64
  80051c:	dfc00f15 	stw	ra,60(sp)
  800520:	df000e15 	stw	fp,56(sp)
  800524:	dc400d15 	stw	r17,52(sp)
  800528:	dc000c15 	stw	r16,48(sp)
  80052c:	df000c04 	addi	fp,sp,48
  800530:	e13ffe15 	stw	r4,-8(fp)
	float det = 1.0f;
  800534:	008fe034 	movhi	r2,16256
  800538:	e0bffd15 	stw	r2,-12(fp)

	//Copy Matrix to tempmat
	for(int i = 0; i != MXSIZE; ++i)
  80053c:	e03ffb15 	stw	zero,-20(fp)
  800540:	00002106 	br	8005c8 <detmat+0xb0>
		for(int j = 0; j != MXSIZE; j++)
  800544:	e03ffa15 	stw	zero,-24(fp)
  800548:	00001906 	br	8005b0 <detmat+0x98>
			tempmat[i][j] = matrix[i][j];
  80054c:	e0bffb17 	ldw	r2,-20(fp)
  800550:	1085883a 	add	r2,r2,r2
  800554:	1085883a 	add	r2,r2,r2
  800558:	1007883a 	mov	r3,r2
  80055c:	d0a00317 	ldw	r2,-32756(gp)
  800560:	1885883a 	add	r2,r3,r2
  800564:	10c00017 	ldw	r3,0(r2)
  800568:	e0bffa17 	ldw	r2,-24(fp)
  80056c:	1085883a 	add	r2,r2,r2
  800570:	1085883a 	add	r2,r2,r2
  800574:	1889883a 	add	r4,r3,r2
  800578:	e0bffb17 	ldw	r2,-20(fp)
  80057c:	10800a24 	muli	r2,r2,40
  800580:	1007883a 	mov	r3,r2
  800584:	e0bffe17 	ldw	r2,-8(fp)
  800588:	1887883a 	add	r3,r3,r2
  80058c:	e0bffa17 	ldw	r2,-24(fp)
  800590:	1085883a 	add	r2,r2,r2
  800594:	1085883a 	add	r2,r2,r2
  800598:	10c5883a 	add	r2,r2,r3
  80059c:	10800017 	ldw	r2,0(r2)
  8005a0:	20800015 	stw	r2,0(r4)
float detmat(float matrix[][MXSIZE]){
	float det = 1.0f;

	//Copy Matrix to tempmat
	for(int i = 0; i != MXSIZE; ++i)
		for(int j = 0; j != MXSIZE; j++)
  8005a4:	e0bffa17 	ldw	r2,-24(fp)
  8005a8:	10800044 	addi	r2,r2,1
  8005ac:	e0bffa15 	stw	r2,-24(fp)
  8005b0:	e0bffa17 	ldw	r2,-24(fp)
  8005b4:	10800298 	cmpnei	r2,r2,10
  8005b8:	103fe41e 	bne	r2,zero,80054c <detmat+0x34>

float detmat(float matrix[][MXSIZE]){
	float det = 1.0f;

	//Copy Matrix to tempmat
	for(int i = 0; i != MXSIZE; ++i)
  8005bc:	e0bffb17 	ldw	r2,-20(fp)
  8005c0:	10800044 	addi	r2,r2,1
  8005c4:	e0bffb15 	stw	r2,-20(fp)
  8005c8:	e0bffb17 	ldw	r2,-20(fp)
  8005cc:	10800298 	cmpnei	r2,r2,10
  8005d0:	103fdc1e 	bne	r2,zero,800544 <detmat+0x2c>
		for(int j = 0; j != MXSIZE; j++)
			tempmat[i][j] = matrix[i][j];

	// Fill Lower with 0's
	int rswapcount = 0;
  8005d4:	e03ffc15 	stw	zero,-16(fp)

	//iterate over columns
	for(int i =0; i < MXSIZE; ++i){
  8005d8:	e03ff915 	stw	zero,-28(fp)
  8005dc:	00009306 	br	80082c <detmat+0x314>

		//swap or calculate
		if (tempmat[i][i] != 0){
  8005e0:	e0bff917 	ldw	r2,-28(fp)
  8005e4:	1085883a 	add	r2,r2,r2
  8005e8:	1085883a 	add	r2,r2,r2
  8005ec:	1007883a 	mov	r3,r2
  8005f0:	d0a00317 	ldw	r2,-32756(gp)
  8005f4:	1885883a 	add	r2,r3,r2
  8005f8:	10c00017 	ldw	r3,0(r2)
  8005fc:	e0bff917 	ldw	r2,-28(fp)
  800600:	1085883a 	add	r2,r2,r2
  800604:	1085883a 	add	r2,r2,r2
  800608:	1885883a 	add	r2,r3,r2
  80060c:	10800017 	ldw	r2,0(r2)
  800610:	1009883a 	mov	r4,r2
  800614:	000b883a 	mov	r5,zero
  800618:	0800f340 	call	800f34 <__nesf2>
  80061c:	1004c03a 	cmpne	r2,r2,zero
  800620:	1000011e 	bne	r2,zero,800628 <detmat+0x110>
  800624:	00005a06 	br	800790 <detmat+0x278>

			//clear swap count
			rswapcount =0;
  800628:	e03ffc15 	stw	zero,-16(fp)

			//for each row (j) bleow diagonal of current column
			for(int j = i+1; j < MXSIZE; j++){
  80062c:	e0bff917 	ldw	r2,-28(fp)
  800630:	10800044 	addi	r2,r2,1
  800634:	e0bff815 	stw	r2,-32(fp)
  800638:	00005106 	br	800780 <detmat+0x268>

				//compute normalization factor
				float f = tempmat[j][i]/tempmat[i][i];
  80063c:	e0bff817 	ldw	r2,-32(fp)
  800640:	1085883a 	add	r2,r2,r2
  800644:	1085883a 	add	r2,r2,r2
  800648:	1007883a 	mov	r3,r2
  80064c:	d0a00317 	ldw	r2,-32756(gp)
  800650:	1885883a 	add	r2,r3,r2
  800654:	10c00017 	ldw	r3,0(r2)
  800658:	e0bff917 	ldw	r2,-28(fp)
  80065c:	1085883a 	add	r2,r2,r2
  800660:	1085883a 	add	r2,r2,r2
  800664:	1885883a 	add	r2,r3,r2
  800668:	11000017 	ldw	r4,0(r2)
  80066c:	e0bff917 	ldw	r2,-28(fp)
  800670:	1085883a 	add	r2,r2,r2
  800674:	1085883a 	add	r2,r2,r2
  800678:	1007883a 	mov	r3,r2
  80067c:	d0a00317 	ldw	r2,-32756(gp)
  800680:	1885883a 	add	r2,r3,r2
  800684:	10c00017 	ldw	r3,0(r2)
  800688:	e0bff917 	ldw	r2,-28(fp)
  80068c:	1085883a 	add	r2,r2,r2
  800690:	1085883a 	add	r2,r2,r2
  800694:	1885883a 	add	r2,r3,r2
  800698:	10800017 	ldw	r2,0(r2)
  80069c:	100b883a 	mov	r5,r2
  8006a0:	0800dc00 	call	800dc0 <__divsf3>
  8006a4:	e0bff715 	stw	r2,-36(fp)

				//subtract f * i'th row from j'th row
				for (int k = i; k < MXSIZE; ++k)
  8006a8:	e0bff917 	ldw	r2,-28(fp)
  8006ac:	e0bff615 	stw	r2,-40(fp)
  8006b0:	00002d06 	br	800768 <detmat+0x250>
					tempmat[j][k] -= f*tempmat[i][k];
  8006b4:	e0bff817 	ldw	r2,-32(fp)
  8006b8:	1085883a 	add	r2,r2,r2
  8006bc:	1085883a 	add	r2,r2,r2
  8006c0:	1007883a 	mov	r3,r2
  8006c4:	d0a00317 	ldw	r2,-32756(gp)
  8006c8:	1885883a 	add	r2,r3,r2
  8006cc:	10c00017 	ldw	r3,0(r2)
  8006d0:	e0bff617 	ldw	r2,-40(fp)
  8006d4:	1085883a 	add	r2,r2,r2
  8006d8:	1085883a 	add	r2,r2,r2
  8006dc:	18a1883a 	add	r16,r3,r2
  8006e0:	e0bff817 	ldw	r2,-32(fp)
  8006e4:	1085883a 	add	r2,r2,r2
  8006e8:	1085883a 	add	r2,r2,r2
  8006ec:	1007883a 	mov	r3,r2
  8006f0:	d0a00317 	ldw	r2,-32756(gp)
  8006f4:	1885883a 	add	r2,r3,r2
  8006f8:	10c00017 	ldw	r3,0(r2)
  8006fc:	e0bff617 	ldw	r2,-40(fp)
  800700:	1085883a 	add	r2,r2,r2
  800704:	1085883a 	add	r2,r2,r2
  800708:	1885883a 	add	r2,r3,r2
  80070c:	14400017 	ldw	r17,0(r2)
  800710:	e0bff917 	ldw	r2,-28(fp)
  800714:	1085883a 	add	r2,r2,r2
  800718:	1085883a 	add	r2,r2,r2
  80071c:	1007883a 	mov	r3,r2
  800720:	d0a00317 	ldw	r2,-32756(gp)
  800724:	1885883a 	add	r2,r3,r2
  800728:	10c00017 	ldw	r3,0(r2)
  80072c:	e0bff617 	ldw	r2,-40(fp)
  800730:	1085883a 	add	r2,r2,r2
  800734:	1085883a 	add	r2,r2,r2
  800738:	1885883a 	add	r2,r3,r2
  80073c:	10800017 	ldw	r2,0(r2)
  800740:	1009883a 	mov	r4,r2
  800744:	e17ff717 	ldw	r5,-36(fp)
  800748:	0800be00 	call	800be0 <__mulsf3>
  80074c:	8809883a 	mov	r4,r17
  800750:	100b883a 	mov	r5,r2
  800754:	0800b0c0 	call	800b0c <__subsf3>
  800758:	80800015 	stw	r2,0(r16)

				//compute normalization factor
				float f = tempmat[j][i]/tempmat[i][i];

				//subtract f * i'th row from j'th row
				for (int k = i; k < MXSIZE; ++k)
  80075c:	e0bff617 	ldw	r2,-40(fp)
  800760:	10800044 	addi	r2,r2,1
  800764:	e0bff615 	stw	r2,-40(fp)
  800768:	e0bff617 	ldw	r2,-40(fp)
  80076c:	10800290 	cmplti	r2,r2,10
  800770:	103fd01e 	bne	r2,zero,8006b4 <detmat+0x19c>

			//clear swap count
			rswapcount =0;

			//for each row (j) bleow diagonal of current column
			for(int j = i+1; j < MXSIZE; j++){
  800774:	e0bff817 	ldw	r2,-32(fp)
  800778:	10800044 	addi	r2,r2,1
  80077c:	e0bff815 	stw	r2,-32(fp)
  800780:	e0bff817 	ldw	r2,-32(fp)
  800784:	10800290 	cmplti	r2,r2,10
  800788:	103fac1e 	bne	r2,zero,80063c <detmat+0x124>
  80078c:	00002406 	br	800820 <detmat+0x308>
					tempmat[j][k] -= f*tempmat[i][k];
			}
		} else {

			//if we have exhausted all swap options, we know it must be singular
			if ((MXSIZE - 1 - i) == rswapcount++){
  800790:	00c00244 	movi	r3,9
  800794:	e0bff917 	ldw	r2,-28(fp)
  800798:	1887c83a 	sub	r3,r3,r2
  80079c:	e0bffc17 	ldw	r2,-16(fp)
  8007a0:	1885003a 	cmpeq	r2,r3,r2
  8007a4:	1007883a 	mov	r3,r2
  8007a8:	e0bffc17 	ldw	r2,-16(fp)
  8007ac:	10800044 	addi	r2,r2,1
  8007b0:	e0bffc15 	stw	r2,-16(fp)
  8007b4:	18803fcc 	andi	r2,r3,255
  8007b8:	1005003a 	cmpeq	r2,r2,zero
  8007bc:	1000031e 	bne	r2,zero,8007cc <detmat+0x2b4>
				return 0;
  8007c0:	0005883a 	mov	r2,zero
  8007c4:	e0bfff15 	stw	r2,-4(fp)
  8007c8:	00003506 	br	8008a0 <detmat+0x388>
			} else {

				//maintain a sorted list of swaps so we know we have tried all
				for (int k = i; k < MXSIZE - 1; ++k){
  8007cc:	e0bff917 	ldw	r2,-28(fp)
  8007d0:	e0bff515 	stw	r2,-44(fp)
  8007d4:	00000c06 	br	800808 <detmat+0x2f0>
					rswap(tempmat,k,k+1);
  8007d8:	d1200317 	ldw	r4,-32756(gp)
  8007dc:	e17ff517 	ldw	r5,-44(fp)
  8007e0:	e0bff517 	ldw	r2,-44(fp)
  8007e4:	10800044 	addi	r2,r2,1
  8007e8:	100d883a 	mov	r6,r2
  8007ec:	08004780 	call	800478 <rswap>
					det *= -1;
  8007f0:	e0bffd17 	ldw	r2,-12(fp)
  8007f4:	10a0003c 	xorhi	r2,r2,32768
  8007f8:	e0bffd15 	stw	r2,-12(fp)
			if ((MXSIZE - 1 - i) == rswapcount++){
				return 0;
			} else {

				//maintain a sorted list of swaps so we know we have tried all
				for (int k = i; k < MXSIZE - 1; ++k){
  8007fc:	e0bff517 	ldw	r2,-44(fp)
  800800:	10800044 	addi	r2,r2,1
  800804:	e0bff515 	stw	r2,-44(fp)
  800808:	e0bff517 	ldw	r2,-44(fp)
  80080c:	10800250 	cmplti	r2,r2,9
  800810:	103ff11e 	bne	r2,zero,8007d8 <detmat+0x2c0>
					rswap(tempmat,k,k+1);
					det *= -1;
				}

				//retry this column
				i--;
  800814:	e0bff917 	ldw	r2,-28(fp)
  800818:	10bfffc4 	addi	r2,r2,-1
  80081c:	e0bff915 	stw	r2,-28(fp)

	// Fill Lower with 0's
	int rswapcount = 0;

	//iterate over columns
	for(int i =0; i < MXSIZE; ++i){
  800820:	e0bff917 	ldw	r2,-28(fp)
  800824:	10800044 	addi	r2,r2,1
  800828:	e0bff915 	stw	r2,-28(fp)
  80082c:	e0bff917 	ldw	r2,-28(fp)
  800830:	10800290 	cmplti	r2,r2,10
  800834:	103f6a1e 	bne	r2,zero,8005e0 <detmat+0xc8>
				i--;
			}
		}
	}
	// Calculate Determinant
	for(int i=0; i < MXSIZE; ++i)
  800838:	e03ff415 	stw	zero,-48(fp)
  80083c:	00001306 	br	80088c <detmat+0x374>
		det *= tempmat[i][i];
  800840:	e0bff417 	ldw	r2,-48(fp)
  800844:	1085883a 	add	r2,r2,r2
  800848:	1085883a 	add	r2,r2,r2
  80084c:	1007883a 	mov	r3,r2
  800850:	d0a00317 	ldw	r2,-32756(gp)
  800854:	1885883a 	add	r2,r3,r2
  800858:	10c00017 	ldw	r3,0(r2)
  80085c:	e0bff417 	ldw	r2,-48(fp)
  800860:	1085883a 	add	r2,r2,r2
  800864:	1085883a 	add	r2,r2,r2
  800868:	1885883a 	add	r2,r3,r2
  80086c:	10800017 	ldw	r2,0(r2)
  800870:	e13ffd17 	ldw	r4,-12(fp)
  800874:	100b883a 	mov	r5,r2
  800878:	0800be00 	call	800be0 <__mulsf3>
  80087c:	e0bffd15 	stw	r2,-12(fp)
				i--;
			}
		}
	}
	// Calculate Determinant
	for(int i=0; i < MXSIZE; ++i)
  800880:	e0bff417 	ldw	r2,-48(fp)
  800884:	10800044 	addi	r2,r2,1
  800888:	e0bff415 	stw	r2,-48(fp)
  80088c:	e0bff417 	ldw	r2,-48(fp)
  800890:	10800290 	cmplti	r2,r2,10
  800894:	103fea1e 	bne	r2,zero,800840 <detmat+0x328>
		det *= tempmat[i][i];

	// return det
	return det;
  800898:	e0fffd17 	ldw	r3,-12(fp)
  80089c:	e0ffff15 	stw	r3,-4(fp)
  8008a0:	e0ffff17 	ldw	r3,-4(fp)
  8008a4:	1805883a 	mov	r2,r3
}
  8008a8:	e037883a 	mov	sp,fp
  8008ac:	dfc00317 	ldw	ra,12(sp)
  8008b0:	df000217 	ldw	fp,8(sp)
  8008b4:	dc400117 	ldw	r17,4(sp)
  8008b8:	dc000017 	ldw	r16,0(sp)
  8008bc:	dec00404 	addi	sp,sp,16
  8008c0:	f800283a 	ret

008008c4 <main>:
extern short _binary_beeth5_noise_bin_start[];
//extern short _binary_beeth5_noise_bin_end[];
//extern int _binary_beeth5_noise_bin_size;

int main()
{
  8008c4:	deff7904 	addi	sp,sp,-540
  8008c8:	df008615 	stw	fp,536(sp)
  8008cc:	df008604 	addi	fp,sp,536

	IOWR(NOTCHFILTER_0_BASE, 0, _binary_beeth5_noise_bin_start);
  8008d0:	00c03834 	movhi	r3,224
  8008d4:	18c00004 	addi	r3,r3,0
  8008d8:	00804034 	movhi	r2,256
  8008dc:	10840c04 	addi	r2,r2,4144
  8008e0:	10c00035 	stwio	r3,0(r2)
	IOWR(NOTCHFILTER_0_BASE, 1, (int)_binary_beeth5_noise_bin_start + 0x2000);// 0x001d6490);
  8008e4:	00803834 	movhi	r2,224
  8008e8:	10800004 	addi	r2,r2,0
  8008ec:	10c80004 	addi	r3,r2,8192
  8008f0:	00804034 	movhi	r2,256
  8008f4:	10840d04 	addi	r2,r2,4148
  8008f8:	10c00035 	stwio	r3,0(r2)


	//barrier for old tests--------------------------------
	while(1);
  8008fc:	003fff06 	br	8008fc <main+0x38>

00800900 <alt_main>:
	}

	return 0;
}

int alt_main(){
  800900:	defffe04 	addi	sp,sp,-8
  800904:	dfc00115 	stw	ra,4(sp)
  800908:	df000015 	stw	fp,0(sp)
  80090c:	d839883a 	mov	fp,sp
	return main();
  800910:	08008c40 	call	8008c4 <main>
}
  800914:	e037883a 	mov	sp,fp
  800918:	dfc00117 	ldw	ra,4(sp)
  80091c:	df000017 	ldw	fp,0(sp)
  800920:	dec00204 	addi	sp,sp,8
  800924:	f800283a 	ret

00800928 <_fpadd_parts>:
  800928:	21c00017 	ldw	r7,0(r4)
  80092c:	02000044 	movi	r8,1
  800930:	41c0332e 	bgeu	r8,r7,800a00 <_fpadd_parts+0xd8>
  800934:	28800017 	ldw	r2,0(r5)
  800938:	4080462e 	bgeu	r8,r2,800a54 <_fpadd_parts+0x12c>
  80093c:	00c00104 	movi	r3,4
  800940:	38c06b26 	beq	r7,r3,800af0 <_fpadd_parts+0x1c8>
  800944:	10c04326 	beq	r2,r3,800a54 <_fpadd_parts+0x12c>
  800948:	00c00084 	movi	r3,2
  80094c:	10c02e26 	beq	r2,r3,800a08 <_fpadd_parts+0xe0>
  800950:	38c04026 	beq	r7,r3,800a54 <_fpadd_parts+0x12c>
  800954:	22800217 	ldw	r10,8(r4)
  800958:	28c00217 	ldw	r3,8(r5)
  80095c:	23000317 	ldw	r12,12(r4)
  800960:	2a400317 	ldw	r9,12(r5)
  800964:	50cfc83a 	sub	r7,r10,r3
  800968:	3817883a 	mov	r11,r7
  80096c:	38004f16 	blt	r7,zero,800aac <_fpadd_parts+0x184>
  800970:	008007c4 	movi	r2,31
  800974:	11c03316 	blt	r2,r7,800a44 <_fpadd_parts+0x11c>
  800978:	02c0540e 	bge	zero,r11,800acc <_fpadd_parts+0x1a4>
  80097c:	41c4983a 	sll	r2,r8,r7
  800980:	49c6d83a 	srl	r3,r9,r7
  800984:	10bfffc4 	addi	r2,r2,-1
  800988:	4884703a 	and	r2,r9,r2
  80098c:	1004c03a 	cmpne	r2,r2,zero
  800990:	1892b03a 	or	r9,r3,r2
  800994:	20c00117 	ldw	r3,4(r4)
  800998:	28800117 	ldw	r2,4(r5)
  80099c:	18803c26 	beq	r3,r2,800a90 <_fpadd_parts+0x168>
  8009a0:	18002f26 	beq	r3,zero,800a60 <_fpadd_parts+0x138>
  8009a4:	4b05c83a 	sub	r2,r9,r12
  8009a8:	10004216 	blt	r2,zero,800ab4 <_fpadd_parts+0x18c>
  8009ac:	32800215 	stw	r10,8(r6)
  8009b0:	30800315 	stw	r2,12(r6)
  8009b4:	30000115 	stw	zero,4(r6)
  8009b8:	31000317 	ldw	r4,12(r6)
  8009bc:	01d00034 	movhi	r7,16384
  8009c0:	39ffff84 	addi	r7,r7,-2
  8009c4:	20bfffc4 	addi	r2,r4,-1
  8009c8:	2007883a 	mov	r3,r4
  8009cc:	38800836 	bltu	r7,r2,8009f0 <_fpadd_parts+0xc8>
  8009d0:	31400217 	ldw	r5,8(r6)
  8009d4:	18c9883a 	add	r4,r3,r3
  8009d8:	20bfffc4 	addi	r2,r4,-1
  8009dc:	297fffc4 	addi	r5,r5,-1
  8009e0:	2007883a 	mov	r3,r4
  8009e4:	38bffb2e 	bgeu	r7,r2,8009d4 <_fpadd_parts+0xac>
  8009e8:	31400215 	stw	r5,8(r6)
  8009ec:	31000315 	stw	r4,12(r6)
  8009f0:	008000c4 	movi	r2,3
  8009f4:	30800015 	stw	r2,0(r6)
  8009f8:	20001b16 	blt	r4,zero,800a68 <_fpadd_parts+0x140>
  8009fc:	3009883a 	mov	r4,r6
  800a00:	2005883a 	mov	r2,r4
  800a04:	f800283a 	ret
  800a08:	38fffd1e 	bne	r7,r3,800a00 <_fpadd_parts+0xd8>
  800a0c:	31c00015 	stw	r7,0(r6)
  800a10:	20800117 	ldw	r2,4(r4)
  800a14:	30800115 	stw	r2,4(r6)
  800a18:	20c00217 	ldw	r3,8(r4)
  800a1c:	30c00215 	stw	r3,8(r6)
  800a20:	20800317 	ldw	r2,12(r4)
  800a24:	30800315 	stw	r2,12(r6)
  800a28:	20c00117 	ldw	r3,4(r4)
  800a2c:	28800117 	ldw	r2,4(r5)
  800a30:	3009883a 	mov	r4,r6
  800a34:	1886703a 	and	r3,r3,r2
  800a38:	2005883a 	mov	r2,r4
  800a3c:	30c00115 	stw	r3,4(r6)
  800a40:	f800283a 	ret
  800a44:	1a801716 	blt	r3,r10,800aa4 <_fpadd_parts+0x17c>
  800a48:	1815883a 	mov	r10,r3
  800a4c:	0019883a 	mov	r12,zero
  800a50:	003fd006 	br	800994 <_fpadd_parts+0x6c>
  800a54:	2809883a 	mov	r4,r5
  800a58:	2005883a 	mov	r2,r4
  800a5c:	f800283a 	ret
  800a60:	6245c83a 	sub	r2,r12,r9
  800a64:	003fd006 	br	8009a8 <_fpadd_parts+0x80>
  800a68:	30800217 	ldw	r2,8(r6)
  800a6c:	2006d07a 	srli	r3,r4,1
  800a70:	2100004c 	andi	r4,r4,1
  800a74:	10800044 	addi	r2,r2,1
  800a78:	1906b03a 	or	r3,r3,r4
  800a7c:	3009883a 	mov	r4,r6
  800a80:	30800215 	stw	r2,8(r6)
  800a84:	2005883a 	mov	r2,r4
  800a88:	30c00315 	stw	r3,12(r6)
  800a8c:	f800283a 	ret
  800a90:	4b09883a 	add	r4,r9,r12
  800a94:	30c00115 	stw	r3,4(r6)
  800a98:	32800215 	stw	r10,8(r6)
  800a9c:	31000315 	stw	r4,12(r6)
  800aa0:	003fd306 	br	8009f0 <_fpadd_parts+0xc8>
  800aa4:	0013883a 	mov	r9,zero
  800aa8:	003fba06 	br	800994 <_fpadd_parts+0x6c>
  800aac:	01cfc83a 	sub	r7,zero,r7
  800ab0:	003faf06 	br	800970 <_fpadd_parts+0x48>
  800ab4:	0089c83a 	sub	r4,zero,r2
  800ab8:	00800044 	movi	r2,1
  800abc:	30800115 	stw	r2,4(r6)
  800ac0:	32800215 	stw	r10,8(r6)
  800ac4:	31000315 	stw	r4,12(r6)
  800ac8:	003fbb06 	br	8009b8 <_fpadd_parts+0x90>
  800acc:	583fb126 	beq	r11,zero,800994 <_fpadd_parts+0x6c>
  800ad0:	41c4983a 	sll	r2,r8,r7
  800ad4:	61c6d83a 	srl	r3,r12,r7
  800ad8:	51d5883a 	add	r10,r10,r7
  800adc:	10bfffc4 	addi	r2,r2,-1
  800ae0:	6084703a 	and	r2,r12,r2
  800ae4:	1004c03a 	cmpne	r2,r2,zero
  800ae8:	1898b03a 	or	r12,r3,r2
  800aec:	003fa906 	br	800994 <_fpadd_parts+0x6c>
  800af0:	11ffc31e 	bne	r2,r7,800a00 <_fpadd_parts+0xd8>
  800af4:	28c00117 	ldw	r3,4(r5)
  800af8:	20800117 	ldw	r2,4(r4)
  800afc:	10ffc026 	beq	r2,r3,800a00 <_fpadd_parts+0xd8>
  800b00:	01002034 	movhi	r4,128
  800b04:	2105a204 	addi	r4,r4,5768
  800b08:	003fbd06 	br	800a00 <_fpadd_parts+0xd8>

00800b0c <__subsf3>:
  800b0c:	deffef04 	addi	sp,sp,-68
  800b10:	dcc00f15 	stw	r19,60(sp)
  800b14:	dcc00204 	addi	r19,sp,8
  800b18:	dc400e15 	stw	r17,56(sp)
  800b1c:	d9000015 	stw	r4,0(sp)
  800b20:	d9400115 	stw	r5,4(sp)
  800b24:	d809883a 	mov	r4,sp
  800b28:	980b883a 	mov	r5,r19
  800b2c:	dc400604 	addi	r17,sp,24
  800b30:	dfc01015 	stw	ra,64(sp)
  800b34:	08012bc0 	call	8012bc <__unpack_f>
  800b38:	d9000104 	addi	r4,sp,4
  800b3c:	880b883a 	mov	r5,r17
  800b40:	08012bc0 	call	8012bc <__unpack_f>
  800b44:	d8800717 	ldw	r2,28(sp)
  800b48:	9809883a 	mov	r4,r19
  800b4c:	880b883a 	mov	r5,r17
  800b50:	d9800a04 	addi	r6,sp,40
  800b54:	1080005c 	xori	r2,r2,1
  800b58:	d8800715 	stw	r2,28(sp)
  800b5c:	08009280 	call	800928 <_fpadd_parts>
  800b60:	1009883a 	mov	r4,r2
  800b64:	080115c0 	call	80115c <__pack_f>
  800b68:	dfc01017 	ldw	ra,64(sp)
  800b6c:	dcc00f17 	ldw	r19,60(sp)
  800b70:	dc400e17 	ldw	r17,56(sp)
  800b74:	dec01104 	addi	sp,sp,68
  800b78:	f800283a 	ret

00800b7c <__addsf3>:
  800b7c:	deffef04 	addi	sp,sp,-68
  800b80:	dcc00f15 	stw	r19,60(sp)
  800b84:	dcc00204 	addi	r19,sp,8
  800b88:	dc400e15 	stw	r17,56(sp)
  800b8c:	d9000015 	stw	r4,0(sp)
  800b90:	d9400115 	stw	r5,4(sp)
  800b94:	d809883a 	mov	r4,sp
  800b98:	980b883a 	mov	r5,r19
  800b9c:	dc400604 	addi	r17,sp,24
  800ba0:	dfc01015 	stw	ra,64(sp)
  800ba4:	08012bc0 	call	8012bc <__unpack_f>
  800ba8:	d9000104 	addi	r4,sp,4
  800bac:	880b883a 	mov	r5,r17
  800bb0:	08012bc0 	call	8012bc <__unpack_f>
  800bb4:	d9800a04 	addi	r6,sp,40
  800bb8:	9809883a 	mov	r4,r19
  800bbc:	880b883a 	mov	r5,r17
  800bc0:	08009280 	call	800928 <_fpadd_parts>
  800bc4:	1009883a 	mov	r4,r2
  800bc8:	080115c0 	call	80115c <__pack_f>
  800bcc:	dfc01017 	ldw	ra,64(sp)
  800bd0:	dcc00f17 	ldw	r19,60(sp)
  800bd4:	dc400e17 	ldw	r17,56(sp)
  800bd8:	dec01104 	addi	sp,sp,68
  800bdc:	f800283a 	ret

00800be0 <__mulsf3>:
  800be0:	deffef04 	addi	sp,sp,-68
  800be4:	dc400f15 	stw	r17,60(sp)
  800be8:	dc400204 	addi	r17,sp,8
  800bec:	dc000e15 	stw	r16,56(sp)
  800bf0:	d9000015 	stw	r4,0(sp)
  800bf4:	d9400115 	stw	r5,4(sp)
  800bf8:	d809883a 	mov	r4,sp
  800bfc:	880b883a 	mov	r5,r17
  800c00:	dc000604 	addi	r16,sp,24
  800c04:	dfc01015 	stw	ra,64(sp)
  800c08:	08012bc0 	call	8012bc <__unpack_f>
  800c0c:	d9000104 	addi	r4,sp,4
  800c10:	800b883a 	mov	r5,r16
  800c14:	08012bc0 	call	8012bc <__unpack_f>
  800c18:	d9000217 	ldw	r4,8(sp)
  800c1c:	00800044 	movi	r2,1
  800c20:	01400104 	movi	r5,4
  800c24:	1100142e 	bgeu	r2,r4,800c78 <__mulsf3+0x98>
  800c28:	d8c00617 	ldw	r3,24(sp)
  800c2c:	10c0052e 	bgeu	r2,r3,800c44 <__mulsf3+0x64>
  800c30:	21400f26 	beq	r4,r5,800c70 <__mulsf3+0x90>
  800c34:	19405d26 	beq	r3,r5,800dac <__mulsf3+0x1cc>
  800c38:	00800084 	movi	r2,2
  800c3c:	20800e26 	beq	r4,r2,800c78 <__mulsf3+0x98>
  800c40:	1880181e 	bne	r3,r2,800ca4 <__mulsf3+0xc4>
  800c44:	d8c00717 	ldw	r3,28(sp)
  800c48:	d8800317 	ldw	r2,12(sp)
  800c4c:	8009883a 	mov	r4,r16
  800c50:	10c4c03a 	cmpne	r2,r2,r3
  800c54:	d8800715 	stw	r2,28(sp)
  800c58:	080115c0 	call	80115c <__pack_f>
  800c5c:	dfc01017 	ldw	ra,64(sp)
  800c60:	dc400f17 	ldw	r17,60(sp)
  800c64:	dc000e17 	ldw	r16,56(sp)
  800c68:	dec01104 	addi	sp,sp,68
  800c6c:	f800283a 	ret
  800c70:	00800084 	movi	r2,2
  800c74:	18804f26 	beq	r3,r2,800db4 <__mulsf3+0x1d4>
  800c78:	d8800317 	ldw	r2,12(sp)
  800c7c:	d8c00717 	ldw	r3,28(sp)
  800c80:	8809883a 	mov	r4,r17
  800c84:	10c4c03a 	cmpne	r2,r2,r3
  800c88:	d8800315 	stw	r2,12(sp)
  800c8c:	080115c0 	call	80115c <__pack_f>
  800c90:	dfc01017 	ldw	ra,64(sp)
  800c94:	dc400f17 	ldw	r17,60(sp)
  800c98:	dc000e17 	ldw	r16,56(sp)
  800c9c:	dec01104 	addi	sp,sp,68
  800ca0:	f800283a 	ret
  800ca4:	d8800517 	ldw	r2,20(sp)
  800ca8:	da000917 	ldw	r8,36(sp)
  800cac:	0013883a 	mov	r9,zero
  800cb0:	0007883a 	mov	r3,zero
  800cb4:	480f883a 	mov	r7,r9
  800cb8:	180b883a 	mov	r5,r3
  800cbc:	400d883a 	mov	r6,r8
  800cc0:	1009883a 	mov	r4,r2
  800cc4:	08010440 	call	801044 <__muldi3>
  800cc8:	da800417 	ldw	r10,16(sp)
  800ccc:	d9800817 	ldw	r6,32(sp)
  800cd0:	da400317 	ldw	r9,12(sp)
  800cd4:	52800084 	addi	r10,r10,2
  800cd8:	3295883a 	add	r10,r6,r10
  800cdc:	d9800717 	ldw	r6,28(sp)
  800ce0:	180b883a 	mov	r5,r3
  800ce4:	180f883a 	mov	r7,r3
  800ce8:	4992c03a 	cmpne	r9,r9,r6
  800cec:	da400b15 	stw	r9,44(sp)
  800cf0:	1007883a 	mov	r3,r2
  800cf4:	da800c15 	stw	r10,48(sp)
  800cf8:	2800070e 	bge	r5,zero,800d18 <__mulsf3+0x138>
  800cfc:	2880004c 	andi	r2,r5,1
  800d00:	1005003a 	cmpeq	r2,r2,zero
  800d04:	500d883a 	mov	r6,r10
  800d08:	10001e26 	beq	r2,zero,800d84 <__mulsf3+0x1a4>
  800d0c:	380ed07a 	srli	r7,r7,1
  800d10:	31800044 	addi	r6,r6,1
  800d14:	d9800c15 	stw	r6,48(sp)
  800d18:	01100034 	movhi	r4,16384
  800d1c:	213fffc4 	addi	r4,r4,-1
  800d20:	21c00b36 	bltu	r4,r7,800d50 <__mulsf3+0x170>
  800d24:	d8800c17 	ldw	r2,48(sp)
  800d28:	00000206 	br	800d34 <__mulsf3+0x154>
  800d2c:	18c7883a 	add	r3,r3,r3
  800d30:	21c00636 	bltu	r4,r7,800d4c <__mulsf3+0x16c>
  800d34:	10bfffc4 	addi	r2,r2,-1
  800d38:	39cf883a 	add	r7,r7,r7
  800d3c:	183ffb0e 	bge	r3,zero,800d2c <__mulsf3+0x14c>
  800d40:	39c00054 	ori	r7,r7,1
  800d44:	18c7883a 	add	r3,r3,r3
  800d48:	21fffa2e 	bgeu	r4,r7,800d34 <__mulsf3+0x154>
  800d4c:	d8800c15 	stw	r2,48(sp)
  800d50:	39001fcc 	andi	r4,r7,127
  800d54:	00801004 	movi	r2,64
  800d58:	20800d26 	beq	r4,r2,800d90 <__mulsf3+0x1b0>
  800d5c:	008000c4 	movi	r2,3
  800d60:	d9000a04 	addi	r4,sp,40
  800d64:	d9c00d15 	stw	r7,52(sp)
  800d68:	d8800a15 	stw	r2,40(sp)
  800d6c:	080115c0 	call	80115c <__pack_f>
  800d70:	dfc01017 	ldw	ra,64(sp)
  800d74:	dc400f17 	ldw	r17,60(sp)
  800d78:	dc000e17 	ldw	r16,56(sp)
  800d7c:	dec01104 	addi	sp,sp,68
  800d80:	f800283a 	ret
  800d84:	1804d07a 	srli	r2,r3,1
  800d88:	10e00034 	orhi	r3,r2,32768
  800d8c:	003fdf06 	br	800d0c <__mulsf3+0x12c>
  800d90:	3880200c 	andi	r2,r7,128
  800d94:	103ff11e 	bne	r2,zero,800d5c <__mulsf3+0x17c>
  800d98:	183ff026 	beq	r3,zero,800d5c <__mulsf3+0x17c>
  800d9c:	3907883a 	add	r3,r7,r4
  800da0:	00bfe004 	movi	r2,-128
  800da4:	188e703a 	and	r7,r3,r2
  800da8:	003fec06 	br	800d5c <__mulsf3+0x17c>
  800dac:	00800084 	movi	r2,2
  800db0:	20bfa41e 	bne	r4,r2,800c44 <__mulsf3+0x64>
  800db4:	01002034 	movhi	r4,128
  800db8:	2105a204 	addi	r4,r4,5768
  800dbc:	003fb306 	br	800c8c <__mulsf3+0xac>

00800dc0 <__divsf3>:
  800dc0:	defff304 	addi	sp,sp,-52
  800dc4:	dc400b15 	stw	r17,44(sp)
  800dc8:	dc400204 	addi	r17,sp,8
  800dcc:	dc000a15 	stw	r16,40(sp)
  800dd0:	d9000015 	stw	r4,0(sp)
  800dd4:	d9400115 	stw	r5,4(sp)
  800dd8:	d809883a 	mov	r4,sp
  800ddc:	880b883a 	mov	r5,r17
  800de0:	dc000604 	addi	r16,sp,24
  800de4:	dfc00c15 	stw	ra,48(sp)
  800de8:	08012bc0 	call	8012bc <__unpack_f>
  800dec:	d9000104 	addi	r4,sp,4
  800df0:	800b883a 	mov	r5,r16
  800df4:	08012bc0 	call	8012bc <__unpack_f>
  800df8:	d9000217 	ldw	r4,8(sp)
  800dfc:	00800044 	movi	r2,1
  800e00:	01800104 	movi	r6,4
  800e04:	11000a2e 	bgeu	r2,r4,800e30 <__divsf3+0x70>
  800e08:	d9400617 	ldw	r5,24(sp)
  800e0c:	1140432e 	bgeu	r2,r5,800f1c <__divsf3+0x15c>
  800e10:	d8800317 	ldw	r2,12(sp)
  800e14:	d8c00717 	ldw	r3,28(sp)
  800e18:	10c4f03a 	xor	r2,r2,r3
  800e1c:	d8800315 	stw	r2,12(sp)
  800e20:	21800226 	beq	r4,r6,800e2c <__divsf3+0x6c>
  800e24:	00800084 	movi	r2,2
  800e28:	2080101e 	bne	r4,r2,800e6c <__divsf3+0xac>
  800e2c:	29000726 	beq	r5,r4,800e4c <__divsf3+0x8c>
  800e30:	8809883a 	mov	r4,r17
  800e34:	080115c0 	call	80115c <__pack_f>
  800e38:	dfc00c17 	ldw	ra,48(sp)
  800e3c:	dc400b17 	ldw	r17,44(sp)
  800e40:	dc000a17 	ldw	r16,40(sp)
  800e44:	dec00d04 	addi	sp,sp,52
  800e48:	f800283a 	ret
  800e4c:	01002034 	movhi	r4,128
  800e50:	2105a204 	addi	r4,r4,5768
  800e54:	080115c0 	call	80115c <__pack_f>
  800e58:	dfc00c17 	ldw	ra,48(sp)
  800e5c:	dc400b17 	ldw	r17,44(sp)
  800e60:	dc000a17 	ldw	r16,40(sp)
  800e64:	dec00d04 	addi	sp,sp,52
  800e68:	f800283a 	ret
  800e6c:	29802d26 	beq	r5,r6,800f24 <__divsf3+0x164>
  800e70:	28801a26 	beq	r5,r2,800edc <__divsf3+0x11c>
  800e74:	d8c00417 	ldw	r3,16(sp)
  800e78:	d8800817 	ldw	r2,32(sp)
  800e7c:	d9000517 	ldw	r4,20(sp)
  800e80:	d9800917 	ldw	r6,36(sp)
  800e84:	1885c83a 	sub	r2,r3,r2
  800e88:	d8800415 	stw	r2,16(sp)
  800e8c:	2180032e 	bgeu	r4,r6,800e9c <__divsf3+0xdc>
  800e90:	10bfffc4 	addi	r2,r2,-1
  800e94:	d8800415 	stw	r2,16(sp)
  800e98:	2109883a 	add	r4,r4,r4
  800e9c:	01500034 	movhi	r5,16384
  800ea0:	0007883a 	mov	r3,zero
  800ea4:	0005883a 	mov	r2,zero
  800ea8:	01c007c4 	movi	r7,31
  800eac:	10800044 	addi	r2,r2,1
  800eb0:	21800236 	bltu	r4,r6,800ebc <__divsf3+0xfc>
  800eb4:	1946b03a 	or	r3,r3,r5
  800eb8:	2189c83a 	sub	r4,r4,r6
  800ebc:	280ad07a 	srli	r5,r5,1
  800ec0:	2109883a 	add	r4,r4,r4
  800ec4:	11fff91e 	bne	r2,r7,800eac <__divsf3+0xec>
  800ec8:	19401fcc 	andi	r5,r3,127
  800ecc:	00801004 	movi	r2,64
  800ed0:	28800a26 	beq	r5,r2,800efc <__divsf3+0x13c>
  800ed4:	d8c00515 	stw	r3,20(sp)
  800ed8:	003fd506 	br	800e30 <__divsf3+0x70>
  800edc:	8809883a 	mov	r4,r17
  800ee0:	d9800215 	stw	r6,8(sp)
  800ee4:	080115c0 	call	80115c <__pack_f>
  800ee8:	dfc00c17 	ldw	ra,48(sp)
  800eec:	dc400b17 	ldw	r17,44(sp)
  800ef0:	dc000a17 	ldw	r16,40(sp)
  800ef4:	dec00d04 	addi	sp,sp,52
  800ef8:	f800283a 	ret
  800efc:	1880200c 	andi	r2,r3,128
  800f00:	103ff41e 	bne	r2,zero,800ed4 <__divsf3+0x114>
  800f04:	203ff326 	beq	r4,zero,800ed4 <__divsf3+0x114>
  800f08:	1947883a 	add	r3,r3,r5
  800f0c:	00bfe004 	movi	r2,-128
  800f10:	1886703a 	and	r3,r3,r2
  800f14:	d8c00515 	stw	r3,20(sp)
  800f18:	003fc506 	br	800e30 <__divsf3+0x70>
  800f1c:	8009883a 	mov	r4,r16
  800f20:	003fc406 	br	800e34 <__divsf3+0x74>
  800f24:	8809883a 	mov	r4,r17
  800f28:	d8000515 	stw	zero,20(sp)
  800f2c:	d8000415 	stw	zero,16(sp)
  800f30:	003fc006 	br	800e34 <__divsf3+0x74>

00800f34 <__nesf2>:
  800f34:	defff304 	addi	sp,sp,-52
  800f38:	dc400b15 	stw	r17,44(sp)
  800f3c:	dc400204 	addi	r17,sp,8
  800f40:	dc000a15 	stw	r16,40(sp)
  800f44:	d9000015 	stw	r4,0(sp)
  800f48:	d9400115 	stw	r5,4(sp)
  800f4c:	d809883a 	mov	r4,sp
  800f50:	880b883a 	mov	r5,r17
  800f54:	dc000604 	addi	r16,sp,24
  800f58:	dfc00c15 	stw	ra,48(sp)
  800f5c:	08012bc0 	call	8012bc <__unpack_f>
  800f60:	d9000104 	addi	r4,sp,4
  800f64:	800b883a 	mov	r5,r16
  800f68:	08012bc0 	call	8012bc <__unpack_f>
  800f6c:	d8800217 	ldw	r2,8(sp)
  800f70:	00c00044 	movi	r3,1
  800f74:	180d883a 	mov	r6,r3
  800f78:	1880062e 	bgeu	r3,r2,800f94 <__nesf2+0x60>
  800f7c:	d8800617 	ldw	r2,24(sp)
  800f80:	8809883a 	mov	r4,r17
  800f84:	800b883a 	mov	r5,r16
  800f88:	1880022e 	bgeu	r3,r2,800f94 <__nesf2+0x60>
  800f8c:	08013840 	call	801384 <__fpcmp_parts_f>
  800f90:	100d883a 	mov	r6,r2
  800f94:	3005883a 	mov	r2,r6
  800f98:	dfc00c17 	ldw	ra,48(sp)
  800f9c:	dc400b17 	ldw	r17,44(sp)
  800fa0:	dc000a17 	ldw	r16,40(sp)
  800fa4:	dec00d04 	addi	sp,sp,52
  800fa8:	f800283a 	ret

00800fac <__floatsisf>:
  800fac:	2006d7fa 	srli	r3,r4,31
  800fb0:	defffa04 	addi	sp,sp,-24
  800fb4:	008000c4 	movi	r2,3
  800fb8:	dfc00515 	stw	ra,20(sp)
  800fbc:	dc000415 	stw	r16,16(sp)
  800fc0:	d8800015 	stw	r2,0(sp)
  800fc4:	d8c00115 	stw	r3,4(sp)
  800fc8:	2000081e 	bne	r4,zero,800fec <__floatsisf+0x40>
  800fcc:	00800084 	movi	r2,2
  800fd0:	d8800015 	stw	r2,0(sp)
  800fd4:	d809883a 	mov	r4,sp
  800fd8:	080115c0 	call	80115c <__pack_f>
  800fdc:	dfc00517 	ldw	ra,20(sp)
  800fe0:	dc000417 	ldw	r16,16(sp)
  800fe4:	dec00604 	addi	sp,sp,24
  800fe8:	f800283a 	ret
  800fec:	00800784 	movi	r2,30
  800ff0:	1807003a 	cmpeq	r3,r3,zero
  800ff4:	d8800215 	stw	r2,8(sp)
  800ff8:	18000e1e 	bne	r3,zero,801034 <__floatsisf+0x88>
  800ffc:	00a00034 	movhi	r2,32768
  801000:	20800e26 	beq	r4,r2,80103c <__floatsisf+0x90>
  801004:	0121c83a 	sub	r16,zero,r4
  801008:	8009883a 	mov	r4,r16
  80100c:	dc000315 	stw	r16,12(sp)
  801010:	08010dc0 	call	8010dc <__clzsi2>
  801014:	117fffc4 	addi	r5,r2,-1
  801018:	017fee0e 	bge	zero,r5,800fd4 <__floatsisf+0x28>
  80101c:	d8800217 	ldw	r2,8(sp)
  801020:	8146983a 	sll	r3,r16,r5
  801024:	1145c83a 	sub	r2,r2,r5
  801028:	d8c00315 	stw	r3,12(sp)
  80102c:	d8800215 	stw	r2,8(sp)
  801030:	003fe806 	br	800fd4 <__floatsisf+0x28>
  801034:	2021883a 	mov	r16,r4
  801038:	003ff306 	br	801008 <__floatsisf+0x5c>
  80103c:	00b3c034 	movhi	r2,52992
  801040:	003fe606 	br	800fdc <__floatsisf+0x30>

00801044 <__muldi3>:
  801044:	2011883a 	mov	r8,r4
  801048:	427fffcc 	andi	r9,r8,65535
  80104c:	4018d43a 	srli	r12,r8,16
  801050:	32bfffcc 	andi	r10,r6,65535
  801054:	3016d43a 	srli	r11,r6,16
  801058:	4a85383a 	mul	r2,r9,r10
  80105c:	6295383a 	mul	r10,r12,r10
  801060:	4ad3383a 	mul	r9,r9,r11
  801064:	113fffcc 	andi	r4,r2,65535
  801068:	1004d43a 	srli	r2,r2,16
  80106c:	4a93883a 	add	r9,r9,r10
  801070:	3807883a 	mov	r3,r7
  801074:	1245883a 	add	r2,r2,r9
  801078:	280f883a 	mov	r7,r5
  80107c:	180b883a 	mov	r5,r3
  801080:	1006943a 	slli	r3,r2,16
  801084:	defffd04 	addi	sp,sp,-12
  801088:	dc800215 	stw	r18,8(sp)
  80108c:	1907883a 	add	r3,r3,r4
  801090:	dc400115 	stw	r17,4(sp)
  801094:	dc000015 	stw	r16,0(sp)
  801098:	4165383a 	mul	r18,r8,r5
  80109c:	31e3383a 	mul	r17,r6,r7
  8010a0:	1012d43a 	srli	r9,r2,16
  8010a4:	62d9383a 	mul	r12,r12,r11
  8010a8:	181f883a 	mov	r15,r3
  8010ac:	1280022e 	bgeu	r2,r10,8010b8 <__muldi3+0x74>
  8010b0:	00800074 	movhi	r2,1
  8010b4:	6099883a 	add	r12,r12,r2
  8010b8:	624d883a 	add	r6,r12,r9
  8010bc:	9187883a 	add	r3,r18,r6
  8010c0:	88c7883a 	add	r3,r17,r3
  8010c4:	7805883a 	mov	r2,r15
  8010c8:	dc800217 	ldw	r18,8(sp)
  8010cc:	dc400117 	ldw	r17,4(sp)
  8010d0:	dc000017 	ldw	r16,0(sp)
  8010d4:	dec00304 	addi	sp,sp,12
  8010d8:	f800283a 	ret

008010dc <__clzsi2>:
  8010dc:	00bfffd4 	movui	r2,65535
  8010e0:	11000e36 	bltu	r2,r4,80111c <__clzsi2+0x40>
  8010e4:	00803fc4 	movi	r2,255
  8010e8:	01400204 	movi	r5,8
  8010ec:	0007883a 	mov	r3,zero
  8010f0:	11001036 	bltu	r2,r4,801134 <__clzsi2+0x58>
  8010f4:	000b883a 	mov	r5,zero
  8010f8:	20c6d83a 	srl	r3,r4,r3
  8010fc:	00802034 	movhi	r2,128
  801100:	1085a604 	addi	r2,r2,5784
  801104:	1887883a 	add	r3,r3,r2
  801108:	18800003 	ldbu	r2,0(r3)
  80110c:	00c00804 	movi	r3,32
  801110:	2885883a 	add	r2,r5,r2
  801114:	1885c83a 	sub	r2,r3,r2
  801118:	f800283a 	ret
  80111c:	01400404 	movi	r5,16
  801120:	00804034 	movhi	r2,256
  801124:	10bfffc4 	addi	r2,r2,-1
  801128:	2807883a 	mov	r3,r5
  80112c:	113ff22e 	bgeu	r2,r4,8010f8 <__clzsi2+0x1c>
  801130:	01400604 	movi	r5,24
  801134:	2807883a 	mov	r3,r5
  801138:	20c6d83a 	srl	r3,r4,r3
  80113c:	00802034 	movhi	r2,128
  801140:	1085a604 	addi	r2,r2,5784
  801144:	1887883a 	add	r3,r3,r2
  801148:	18800003 	ldbu	r2,0(r3)
  80114c:	00c00804 	movi	r3,32
  801150:	2885883a 	add	r2,r5,r2
  801154:	1885c83a 	sub	r2,r3,r2
  801158:	f800283a 	ret

0080115c <__pack_f>:
  80115c:	20c00017 	ldw	r3,0(r4)
  801160:	01c00044 	movi	r7,1
  801164:	21800317 	ldw	r6,12(r4)
  801168:	21400117 	ldw	r5,4(r4)
  80116c:	38c02d2e 	bgeu	r7,r3,801224 <__pack_f+0xc8>
  801170:	00800104 	movi	r2,4
  801174:	18802826 	beq	r3,r2,801218 <__pack_f+0xbc>
  801178:	00800084 	movi	r2,2
  80117c:	18800126 	beq	r3,r2,801184 <__pack_f+0x28>
  801180:	3000101e 	bne	r6,zero,8011c4 <__pack_f+0x68>
  801184:	000d883a 	mov	r6,zero
  801188:	0007883a 	mov	r3,zero
  80118c:	19003fcc 	andi	r4,r3,255
  801190:	200895fa 	slli	r4,r4,23
  801194:	00c02034 	movhi	r3,128
  801198:	18ffffc4 	addi	r3,r3,-1
  80119c:	30c6703a 	and	r3,r6,r3
  8011a0:	10a0002c 	andhi	r2,r2,32768
  8011a4:	10c4b03a 	or	r2,r2,r3
  8011a8:	280a97fa 	slli	r5,r5,31
  8011ac:	1104b03a 	or	r2,r2,r4
  8011b0:	00e00034 	movhi	r3,32768
  8011b4:	18ffffc4 	addi	r3,r3,-1
  8011b8:	10c4703a 	and	r2,r2,r3
  8011bc:	1144b03a 	or	r2,r2,r5
  8011c0:	f800283a 	ret
  8011c4:	21000217 	ldw	r4,8(r4)
  8011c8:	00bfe084 	movi	r2,-126
  8011cc:	20801b16 	blt	r4,r2,80123c <__pack_f+0xe0>
  8011d0:	00801fc4 	movi	r2,127
  8011d4:	11001016 	blt	r2,r4,801218 <__pack_f+0xbc>
  8011d8:	308e703a 	and	r7,r6,r2
  8011dc:	2087883a 	add	r3,r4,r2
  8011e0:	00801004 	movi	r2,64
  8011e4:	38800526 	beq	r7,r2,8011fc <__pack_f+0xa0>
  8011e8:	31800fc4 	addi	r6,r6,63
  8011ec:	30000716 	blt	r6,zero,80120c <__pack_f+0xb0>
  8011f0:	300490ba 	slli	r2,r6,2
  8011f4:	100cd27a 	srli	r6,r2,9
  8011f8:	003fe406 	br	80118c <__pack_f+0x30>
  8011fc:	3080200c 	andi	r2,r6,128
  801200:	103ffa26 	beq	r2,zero,8011ec <__pack_f+0x90>
  801204:	31cd883a 	add	r6,r6,r7
  801208:	003ff806 	br	8011ec <__pack_f+0x90>
  80120c:	300cd07a 	srli	r6,r6,1
  801210:	18c00044 	addi	r3,r3,1
  801214:	003ff606 	br	8011f0 <__pack_f+0x94>
  801218:	000d883a 	mov	r6,zero
  80121c:	00ffffc4 	movi	r3,-1
  801220:	003fda06 	br	80118c <__pack_f+0x30>
  801224:	31800434 	orhi	r6,r6,16
  801228:	00802034 	movhi	r2,128
  80122c:	10bfffc4 	addi	r2,r2,-1
  801230:	308c703a 	and	r6,r6,r2
  801234:	00ffffc4 	movi	r3,-1
  801238:	003fd406 	br	80118c <__pack_f+0x30>
  80123c:	1109c83a 	sub	r4,r2,r4
  801240:	00800644 	movi	r2,25
  801244:	11001216 	blt	r2,r4,801290 <__pack_f+0x134>
  801248:	3904983a 	sll	r2,r7,r4
  80124c:	3106d83a 	srl	r3,r6,r4
  801250:	10bfffc4 	addi	r2,r2,-1
  801254:	3084703a 	and	r2,r6,r2
  801258:	1004c03a 	cmpne	r2,r2,zero
  80125c:	1886b03a 	or	r3,r3,r2
  801260:	19001fcc 	andi	r4,r3,127
  801264:	00801004 	movi	r2,64
  801268:	20800c26 	beq	r4,r2,80129c <__pack_f+0x140>
  80126c:	18c00fc4 	addi	r3,r3,63
  801270:	00900034 	movhi	r2,16384
  801274:	10bfffc4 	addi	r2,r2,-1
  801278:	180cd1fa 	srli	r6,r3,7
  80127c:	10c7803a 	cmpltu	r3,r2,r3
  801280:	00802034 	movhi	r2,128
  801284:	10bfffc4 	addi	r2,r2,-1
  801288:	308c703a 	and	r6,r6,r2
  80128c:	003fbf06 	br	80118c <__pack_f+0x30>
  801290:	0007883a 	mov	r3,zero
  801294:	000d883a 	mov	r6,zero
  801298:	003ff906 	br	801280 <__pack_f+0x124>
  80129c:	1880200c 	andi	r2,r3,128
  8012a0:	10000126 	beq	r2,zero,8012a8 <__pack_f+0x14c>
  8012a4:	1907883a 	add	r3,r3,r4
  8012a8:	180cd1fa 	srli	r6,r3,7
  8012ac:	00900034 	movhi	r2,16384
  8012b0:	10bfffc4 	addi	r2,r2,-1
  8012b4:	10c7803a 	cmpltu	r3,r2,r3
  8012b8:	003ff106 	br	801280 <__pack_f+0x124>

008012bc <__unpack_f>:
  8012bc:	21800017 	ldw	r6,0(r4)
  8012c0:	00c02034 	movhi	r3,128
  8012c4:	18ffffc4 	addi	r3,r3,-1
  8012c8:	3004d5fa 	srli	r2,r6,23
  8012cc:	3008d7fa 	srli	r4,r6,31
  8012d0:	30ce703a 	and	r7,r6,r3
  8012d4:	10c03fcc 	andi	r3,r2,255
  8012d8:	29000115 	stw	r4,4(r5)
  8012dc:	1800131e 	bne	r3,zero,80132c <__unpack_f+0x70>
  8012e0:	38000f26 	beq	r7,zero,801320 <__unpack_f+0x64>
  8012e4:	380691fa 	slli	r3,r7,7
  8012e8:	01bfe084 	movi	r6,-126
  8012ec:	008000c4 	movi	r2,3
  8012f0:	01100034 	movhi	r4,16384
  8012f4:	213fffc4 	addi	r4,r4,-1
  8012f8:	28800015 	stw	r2,0(r5)
  8012fc:	29800215 	stw	r6,8(r5)
  801300:	20c00536 	bltu	r4,r3,801318 <__unpack_f+0x5c>
  801304:	3005883a 	mov	r2,r6
  801308:	18c7883a 	add	r3,r3,r3
  80130c:	10bfffc4 	addi	r2,r2,-1
  801310:	20fffd2e 	bgeu	r4,r3,801308 <__unpack_f+0x4c>
  801314:	28800215 	stw	r2,8(r5)
  801318:	28c00315 	stw	r3,12(r5)
  80131c:	f800283a 	ret
  801320:	00800084 	movi	r2,2
  801324:	28800015 	stw	r2,0(r5)
  801328:	f800283a 	ret
  80132c:	00803fc4 	movi	r2,255
  801330:	18800826 	beq	r3,r2,801354 <__unpack_f+0x98>
  801334:	380491fa 	slli	r2,r7,7
  801338:	18ffe044 	addi	r3,r3,-127
  80133c:	28c00215 	stw	r3,8(r5)
  801340:	10900034 	orhi	r2,r2,16384
  801344:	28800315 	stw	r2,12(r5)
  801348:	008000c4 	movi	r2,3
  80134c:	28800015 	stw	r2,0(r5)
  801350:	f800283a 	ret
  801354:	3800031e 	bne	r7,zero,801364 <__unpack_f+0xa8>
  801358:	00800104 	movi	r2,4
  80135c:	28800015 	stw	r2,0(r5)
  801360:	f800283a 	ret
  801364:	3080042c 	andhi	r2,r6,16
  801368:	10000426 	beq	r2,zero,80137c <__unpack_f+0xc0>
  80136c:	00800044 	movi	r2,1
  801370:	28800015 	stw	r2,0(r5)
  801374:	29c00315 	stw	r7,12(r5)
  801378:	f800283a 	ret
  80137c:	28000015 	stw	zero,0(r5)
  801380:	003ffc06 	br	801374 <__unpack_f+0xb8>

00801384 <__fpcmp_parts_f>:
  801384:	21800017 	ldw	r6,0(r4)
  801388:	00c00044 	movi	r3,1
  80138c:	19800a2e 	bgeu	r3,r6,8013b8 <__fpcmp_parts_f+0x34>
  801390:	28800017 	ldw	r2,0(r5)
  801394:	1880082e 	bgeu	r3,r2,8013b8 <__fpcmp_parts_f+0x34>
  801398:	00c00104 	movi	r3,4
  80139c:	30c01e26 	beq	r6,r3,801418 <__fpcmp_parts_f+0x94>
  8013a0:	10c01a26 	beq	r2,r3,80140c <__fpcmp_parts_f+0x88>
  8013a4:	00c00084 	movi	r3,2
  8013a8:	30c00526 	beq	r6,r3,8013c0 <__fpcmp_parts_f+0x3c>
  8013ac:	10c0071e 	bne	r2,r3,8013cc <__fpcmp_parts_f+0x48>
  8013b0:	20800117 	ldw	r2,4(r4)
  8013b4:	1000091e 	bne	r2,zero,8013dc <__fpcmp_parts_f+0x58>
  8013b8:	00800044 	movi	r2,1
  8013bc:	f800283a 	ret
  8013c0:	10c0121e 	bne	r2,r3,80140c <__fpcmp_parts_f+0x88>
  8013c4:	0005883a 	mov	r2,zero
  8013c8:	f800283a 	ret
  8013cc:	20c00117 	ldw	r3,4(r4)
  8013d0:	28800117 	ldw	r2,4(r5)
  8013d4:	18800326 	beq	r3,r2,8013e4 <__fpcmp_parts_f+0x60>
  8013d8:	183ff726 	beq	r3,zero,8013b8 <__fpcmp_parts_f+0x34>
  8013dc:	00bfffc4 	movi	r2,-1
  8013e0:	f800283a 	ret
  8013e4:	21800217 	ldw	r6,8(r4)
  8013e8:	28800217 	ldw	r2,8(r5)
  8013ec:	11bffa16 	blt	r2,r6,8013d8 <__fpcmp_parts_f+0x54>
  8013f0:	30800416 	blt	r6,r2,801404 <__fpcmp_parts_f+0x80>
  8013f4:	21000317 	ldw	r4,12(r4)
  8013f8:	29400317 	ldw	r5,12(r5)
  8013fc:	293ff636 	bltu	r5,r4,8013d8 <__fpcmp_parts_f+0x54>
  801400:	217ff02e 	bgeu	r4,r5,8013c4 <__fpcmp_parts_f+0x40>
  801404:	183fec1e 	bne	r3,zero,8013b8 <__fpcmp_parts_f+0x34>
  801408:	003ff406 	br	8013dc <__fpcmp_parts_f+0x58>
  80140c:	28800117 	ldw	r2,4(r5)
  801410:	103fe91e 	bne	r2,zero,8013b8 <__fpcmp_parts_f+0x34>
  801414:	003ff106 	br	8013dc <__fpcmp_parts_f+0x58>
  801418:	11bfe51e 	bne	r2,r6,8013b0 <__fpcmp_parts_f+0x2c>
  80141c:	28c00117 	ldw	r3,4(r5)
  801420:	20800117 	ldw	r2,4(r4)
  801424:	1885c83a 	sub	r2,r3,r2
  801428:	f800283a 	ret

0080142c <alt_dcache_flush>:
  80142c:	2145883a 	add	r2,r4,r5
  801430:	2007883a 	mov	r3,r4
  801434:	2080032e 	bgeu	r4,r2,801444 <alt_dcache_flush+0x18>
  801438:	1800001b 	flushda	0(r3)
  80143c:	18c00804 	addi	r3,r3,32
  801440:	18bffd36 	bltu	r3,r2,801438 <alt_dcache_flush+0xc>
  801444:	208007cc 	andi	r2,r4,31
  801448:	10000126 	beq	r2,zero,801450 <alt_dcache_flush+0x24>
  80144c:	1800001b 	flushda	0(r3)
  801450:	f800283a 	ret

00801454 <alt_ic_irq_enabled>:
  801454:	000530fa 	rdctl	r2,ienable
  801458:	00c00044 	movi	r3,1
  80145c:	1946983a 	sll	r3,r3,r5
  801460:	10c4703a 	and	r2,r2,r3
  801464:	1004c03a 	cmpne	r2,r2,zero
  801468:	f800283a 	ret

0080146c <alt_ic_irq_enable>:
  80146c:	000d303a 	rdctl	r6,status
  801470:	00bfff84 	movi	r2,-2
  801474:	3084703a 	and	r2,r6,r2
  801478:	1001703a 	wrctl	status,r2
  80147c:	01002034 	movhi	r4,128
  801480:	2105ea04 	addi	r4,r4,6056
  801484:	00800044 	movi	r2,1
  801488:	20c00017 	ldw	r3,0(r4)
  80148c:	1144983a 	sll	r2,r2,r5
  801490:	10c4b03a 	or	r2,r2,r3
  801494:	20800015 	stw	r2,0(r4)
  801498:	20c00017 	ldw	r3,0(r4)
  80149c:	180170fa 	wrctl	ienable,r3
  8014a0:	3001703a 	wrctl	status,r6
  8014a4:	0005883a 	mov	r2,zero
  8014a8:	f800283a 	ret

008014ac <alt_ic_irq_disable>:
  8014ac:	000d303a 	rdctl	r6,status
  8014b0:	00bfff84 	movi	r2,-2
  8014b4:	3084703a 	and	r2,r6,r2
  8014b8:	1001703a 	wrctl	status,r2
  8014bc:	01002034 	movhi	r4,128
  8014c0:	2105ea04 	addi	r4,r4,6056
  8014c4:	00bfff84 	movi	r2,-2
  8014c8:	20c00017 	ldw	r3,0(r4)
  8014cc:	1144183a 	rol	r2,r2,r5
  8014d0:	10c4703a 	and	r2,r2,r3
  8014d4:	20800015 	stw	r2,0(r4)
  8014d8:	20c00017 	ldw	r3,0(r4)
  8014dc:	180170fa 	wrctl	ienable,r3
  8014e0:	3001703a 	wrctl	status,r6
  8014e4:	0005883a 	mov	r2,zero
  8014e8:	f800283a 	ret

008014ec <alt_ic_isr_register>:
  8014ec:	08014f01 	jmpi	8014f0 <alt_iic_isr_register>

008014f0 <alt_iic_isr_register>:
  8014f0:	defffe04 	addi	sp,sp,-8
  8014f4:	008007c4 	movi	r2,31
  8014f8:	dfc00115 	stw	ra,4(sp)
  8014fc:	dc000015 	stw	r16,0(sp)
  801500:	023ffa84 	movi	r8,-22
  801504:	1140050e 	bge	r2,r5,80151c <alt_iic_isr_register+0x2c>
  801508:	4005883a 	mov	r2,r8
  80150c:	dfc00117 	ldw	ra,4(sp)
  801510:	dc000017 	ldw	r16,0(sp)
  801514:	dec00204 	addi	sp,sp,8
  801518:	f800283a 	ret
  80151c:	0021303a 	rdctl	r16,status
  801520:	00bfff84 	movi	r2,-2
  801524:	8084703a 	and	r2,r16,r2
  801528:	1001703a 	wrctl	status,r2
  80152c:	280690fa 	slli	r3,r5,3
  801530:	00802034 	movhi	r2,128
  801534:	1085eb04 	addi	r2,r2,6060
  801538:	1887883a 	add	r3,r3,r2
  80153c:	19c00115 	stw	r7,4(r3)
  801540:	19800015 	stw	r6,0(r3)
  801544:	30000826 	beq	r6,zero,801568 <alt_iic_isr_register+0x78>
  801548:	080146c0 	call	80146c <alt_ic_irq_enable>
  80154c:	1011883a 	mov	r8,r2
  801550:	8001703a 	wrctl	status,r16
  801554:	4005883a 	mov	r2,r8
  801558:	dfc00117 	ldw	ra,4(sp)
  80155c:	dc000017 	ldw	r16,0(sp)
  801560:	dec00204 	addi	sp,sp,8
  801564:	f800283a 	ret
  801568:	08014ac0 	call	8014ac <alt_ic_irq_disable>
  80156c:	1011883a 	mov	r8,r2
  801570:	8001703a 	wrctl	status,r16
  801574:	003ff706 	br	801554 <alt_iic_isr_register+0x64>

00801578 <alt_load>:
  801578:	deffff04 	addi	sp,sp,-4
  80157c:	01002034 	movhi	r4,128
  801580:	2105e704 	addi	r4,r4,6044
  801584:	00c02034 	movhi	r3,128
  801588:	18c5e604 	addi	r3,r3,6040
  80158c:	dfc00015 	stw	ra,0(sp)
  801590:	20c00826 	beq	r4,r3,8015b4 <alt_load+0x3c>
  801594:	01402034 	movhi	r5,128
  801598:	2945e704 	addi	r5,r5,6044
  80159c:	19400526 	beq	r3,r5,8015b4 <alt_load+0x3c>
  8015a0:	20800017 	ldw	r2,0(r4)
  8015a4:	21000104 	addi	r4,r4,4
  8015a8:	18800015 	stw	r2,0(r3)
  8015ac:	18c00104 	addi	r3,r3,4
  8015b0:	28fffb1e 	bne	r5,r3,8015a0 <alt_load+0x28>
  8015b4:	01002034 	movhi	r4,128
  8015b8:	21000804 	addi	r4,r4,32
  8015bc:	00c02034 	movhi	r3,128
  8015c0:	18c00804 	addi	r3,r3,32
  8015c4:	20c00826 	beq	r4,r3,8015e8 <alt_load+0x70>
  8015c8:	01402034 	movhi	r5,128
  8015cc:	29406104 	addi	r5,r5,388
  8015d0:	19400526 	beq	r3,r5,8015e8 <alt_load+0x70>
  8015d4:	20800017 	ldw	r2,0(r4)
  8015d8:	21000104 	addi	r4,r4,4
  8015dc:	18800015 	stw	r2,0(r3)
  8015e0:	18c00104 	addi	r3,r3,4
  8015e4:	28fffb1e 	bne	r5,r3,8015d4 <alt_load+0x5c>
  8015e8:	01002034 	movhi	r4,128
  8015ec:	2105a204 	addi	r4,r4,5768
  8015f0:	00c02034 	movhi	r3,128
  8015f4:	18c5a204 	addi	r3,r3,5768
  8015f8:	20c00826 	beq	r4,r3,80161c <alt_load+0xa4>
  8015fc:	01402034 	movhi	r5,128
  801600:	2945e604 	addi	r5,r5,6040
  801604:	19400526 	beq	r3,r5,80161c <alt_load+0xa4>
  801608:	20800017 	ldw	r2,0(r4)
  80160c:	21000104 	addi	r4,r4,4
  801610:	18800015 	stw	r2,0(r3)
  801614:	18c00104 	addi	r3,r3,4
  801618:	28fffb1e 	bne	r5,r3,801608 <alt_load+0x90>
  80161c:	080162c0 	call	80162c <alt_dcache_flush_all>
  801620:	dfc00017 	ldw	ra,0(sp)
  801624:	dec00104 	addi	sp,sp,4
  801628:	08016441 	jmpi	801644 <alt_icache_flush_all>

0080162c <alt_dcache_flush_all>:
  80162c:	0005883a 	mov	r2,zero
  801630:	00c20004 	movi	r3,2048
  801634:	1000003b 	flushd	0(r2)
  801638:	10800804 	addi	r2,r2,32
  80163c:	10fffd1e 	bne	r2,r3,801634 <alt_dcache_flush_all+0x8>
  801640:	f800283a 	ret

00801644 <alt_icache_flush_all>:
  801644:	0009883a 	mov	r4,zero
  801648:	01420004 	movi	r5,2048
  80164c:	08016501 	jmpi	801650 <alt_icache_flush>

00801650 <alt_icache_flush>:
  801650:	00820004 	movi	r2,2048
  801654:	2007883a 	mov	r3,r4
  801658:	1140012e 	bgeu	r2,r5,801660 <alt_icache_flush+0x10>
  80165c:	100b883a 	mov	r5,r2
  801660:	194b883a 	add	r5,r3,r5
  801664:	1940032e 	bgeu	r3,r5,801674 <alt_icache_flush+0x24>
  801668:	1800603a 	flushi	r3
  80166c:	18c00804 	addi	r3,r3,32
  801670:	197ffd36 	bltu	r3,r5,801668 <alt_icache_flush+0x18>
  801674:	208007cc 	andi	r2,r4,31
  801678:	10000126 	beq	r2,zero,801680 <alt_icache_flush+0x30>
  80167c:	1800603a 	flushi	r3
  801680:	0000203a 	flushp
  801684:	f800283a 	ret
